<?xml version="1.0"?>
<doc>
    <assembly>
        <name>linq2db</name>
    </assembly>
    <members>
        <member name="T:System.Index">
            <summary>Represent a type can be used to index a collection either from the start or the end.</summary>
            <remarks>
            Index is used by the C# compiler to support the new index syntax
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ;
            int lastElement = someArray[^1]; // lastElement = 5
            </code>
            </remarks>
        </member>
        <member name="M:System.Index.#ctor(System.Int32,System.Boolean)">
            <summary>Construct an Index using a value and indicating if the index is from the start or from the end.</summary>
            <param name="value">The index value. it has to be zero or positive number.</param>
            <param name="fromEnd">Indicating if the index is from the start or from the end.</param>
            <remarks>
            If the Index constructed from the end, index value 1 means pointing at the last element and index value 0 means pointing at beyond last element.
            </remarks>
        </member>
        <member name="P:System.Index.Start">
            <summary>Create an Index pointing at first element.</summary>
        </member>
        <member name="P:System.Index.End">
            <summary>Create an Index pointing at beyond last element.</summary>
        </member>
        <member name="M:System.Index.FromStart(System.Int32)">
            <summary>Create an Index from the start at the position indicated by the value.</summary>
            <param name="value">The index value from the start.</param>
        </member>
        <member name="M:System.Index.FromEnd(System.Int32)">
            <summary>Create an Index from the end at the position indicated by the value.</summary>
            <param name="value">The index value from the end.</param>
        </member>
        <member name="P:System.Index.Value">
            <summary>Returns the index value.</summary>
        </member>
        <member name="P:System.Index.IsFromEnd">
            <summary>Indicates whether the index is from the start or the end.</summary>
        </member>
        <member name="M:System.Index.GetOffset(System.Int32)">
            <summary>Calculate the offset from the start using the giving collection length.</summary>
            <param name="length">The length of the collection that the Index will be used with. length has to be a positive value</param>
            <remarks>
            For performance reason, we don't validate the input length parameter and the returned offset value against negative values.
            we don't validate either the returned offset is greater than the input length.
            It is expected Index will be used with collections which always have non negative length/count. If the returned offset is negative and
            then used to index a collection will get out of range exception which will be same affect as the validation.
            </remarks>
        </member>
        <member name="M:System.Index.Equals(System.Object)">
            <summary>Indicates whether the current Index object is equal to another object of the same type.</summary>
            <param name="obj">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.Equals(System.Index)">
            <summary>Indicates whether the current Index object is equal to another Index object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
            <summary>Converts integer number to an Index.</summary>
        </member>
        <member name="M:System.Index.ToString">
            <summary>Converts the value of the current Index object to its equivalent string representation.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c>
            flag should not be set in method headers.
            </summary>
            <remarks>
            This attribute is unsafe because it may reveal uninitialized memory to
            the application in certain instances (e.g., reading from uninitialized
            stackalloc'd memory). If applied to a method directly, the attribute
            applies to that method and all nested functions (lambdas, local
            functions) below it. If applied to a type or module, it applies to all
            methods nested inside. This attribute is intentionally not permitted on
            assemblies. Use at the module level instead to apply to multiple type
            declarations.
            </remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it. Specifies that an input argument was not null when the call returns.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>Initializes the attribute with the specified return value condition and a field or property member.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>Initializes the attribute with the specified return value condition and list of field and property members.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with a field or property member.</summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>Initializes the attribute with the list of field and property members.</summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="M:System.Data.Linq.Binary.ComputeHash">
            <summary>
            Simple hash using pseudo-random coefficients for each byte in
            the array to achieve order dependency.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
             <summary>
             Indicates that the marked method builds string by format pattern and (optional) arguments.
             Parameter, which contains format string, should be given in constructor. The format string
             should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form.
             </summary>
             <example><code>
             [StringFormatMethod("message")]
             void ShowError(string message, params object[] args) { /* do something */ }
            
             void Foo() {
               ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
             }
             </code></example>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes
            as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type.</summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked
            with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used.</summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
             <summary>
             Indicates that a method does not make any observable state changes.
             The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
             </summary>
             <example><code>
             [Pure] int Multiply(int x, int y) => x * y;
            
             void M() {
               Multiply(123, 42); // Waring: Return value of pure method is not used
             }
             </code></example>
        </member>
        <member name="T:JetBrains.Annotations.LinqTunnelAttribute">
            <summary>
            Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
            .Where). This annotation allows inference of [InstantHandle] annotation for parameters
            of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NoEnumerationAttribute">
            <summary>
            Indicates that IEnumerable, passed as parameter, is not enumerated.
            </summary>
        </member>
        <member name="T:LinqToDB.ThrowHelper">
            <summary>
            Helper methods to efficiently throw exceptions.
            </summary>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowArrayTypeMismatchException">
            <summary>
            Throws a new <see cref="T:System.ArrayTypeMismatchException"/>.
            </summary>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown with no parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowArrayTypeMismatchException(System.String)">
            <summary>
            Throws a new <see cref="T:System.ArrayTypeMismatchException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowArrayTypeMismatchException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.ArrayTypeMismatchException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowArgumentException">
            <summary>
            Throws a new <see cref="T:System.ArgumentException"/>.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown with no parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowArgumentException(System.String)">
            <summary>
            Throws a new <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.ArgumentException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowArgumentException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.ArgumentException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowArgumentException(System.String,System.String)">
            <summary>
            Throws a new <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="name">The argument name.</param>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.ArgumentException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowArgumentException(System.String,System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="name">The argument name.</param>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.ArgumentException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowArgumentNullException">
            <summary>
            Throws a new <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown with no parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowArgumentNullException(System.String)">
            <summary>
            Throws a new <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <param name="name">The argument name.</param>
            <exception cref="T:System.ArgumentNullException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowArgumentNullException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <param name="name">The argument name.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.ArgumentNullException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowArgumentNullException(System.String,System.String)">
            <summary>
            Throws a new <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <param name="name">The argument name.</param>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.ArgumentNullException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowArgumentOutOfRangeException">
            <summary>
            Throws a new <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown with no parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowArgumentOutOfRangeException(System.String)">
            <summary>
            Throws a new <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name="name">The argument name.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowArgumentOutOfRangeException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name="name">The argument name.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowArgumentOutOfRangeException(System.String,System.String)">
            <summary>
            Throws a new <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name="name">The argument name.</param>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowArgumentOutOfRangeException(System.String,System.Object,System.String)">
            <summary>
            Throws a new <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name="name">The argument name.</param>
            <param name="value">The current argument value.</param>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowFormatException">
            <summary>
            Throws a new <see cref="T:System.FormatException"/>.
            </summary>
            <exception cref="T:System.FormatException">Thrown with no parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowFormatException(System.String)">
            <summary>
            Throws a new <see cref="T:System.FormatException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.FormatException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowFormatException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.FormatException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.FormatException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowInsufficientMemoryException">
            <summary>
            Throws a new <see cref="T:System.InsufficientMemoryException"/>.
            </summary>
            <exception cref="T:System.InsufficientMemoryException">Thrown with no parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowInsufficientMemoryException(System.String)">
            <summary>
            Throws a new <see cref="T:System.InsufficientMemoryException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.InsufficientMemoryException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowInsufficientMemoryException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.InsufficientMemoryException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.InsufficientMemoryException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowInvalidCastException">
            <summary>
            Throws a new <see cref="T:System.InvalidCastException"/>.
            </summary>
            <exception cref="T:System.InvalidCastException">Thrown with no parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowInvalidCastException(System.String)">
            <summary>
            Throws a new <see cref="T:System.InvalidCastException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.InvalidCastException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowInvalidCastException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.InvalidCastException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.InvalidCastException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowInvalidDataException">
            <summary>
            Throws a new <see cref="T:System.IO.InvalidDataException"/>.
            </summary>
            <exception cref="T:System.IO.InvalidDataException">Thrown with no parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowInvalidDataException(System.String)">
            <summary>
            Throws a new <see cref="T:System.IO.InvalidDataException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.IO.InvalidDataException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowInvalidDataException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.IO.InvalidDataException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.IO.InvalidDataException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowInvalidOperationException">
            <summary>
            Throws a new <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown with no parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowInvalidOperationException(System.String)">
            <summary>
            Throws a new <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.InvalidOperationException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowInvalidOperationException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.InvalidOperationException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowLinqException">
            <summary>
            Throws a new <see cref="T:LinqToDB.Linq.LinqException"/>.
            </summary>
            <exception cref="T:LinqToDB.Linq.LinqException">Thrown with no parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowLinqException(System.String)">
            <summary>
            Throws a new <see cref="T:LinqToDB.Linq.LinqException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:LinqToDB.Linq.LinqException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowLinqException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:LinqToDB.Linq.LinqException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:LinqToDB.Linq.LinqException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowLinqToDBException">
            <summary>
            Throws a new <see cref="T:LinqToDB.LinqToDBException"/>.
            </summary>
            <exception cref="T:LinqToDB.LinqToDBException">Thrown with no parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowLinqToDBException(System.String)">
            <summary>
            Throws a new <see cref="T:LinqToDB.LinqToDBException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:LinqToDB.LinqToDBException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowLinqToDBException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:LinqToDB.LinqToDBException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:LinqToDB.LinqToDBException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowLinqToDBConvertException">
            <summary>
            Throws a new <see cref="T:LinqToDB.Common.LinqToDBConvertException"/>.
            </summary>
            <exception cref="T:LinqToDB.Common.LinqToDBConvertException">Thrown with no parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowLinqToDBConvertException(System.String)">
            <summary>
            Throws a new <see cref="T:LinqToDB.Common.LinqToDBConvertException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:LinqToDB.Common.LinqToDBConvertException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowLinqToDBConvertException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:LinqToDB.Common.LinqToDBConvertException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:LinqToDB.Common.LinqToDBConvertException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowLinqToDBConvertException(System.String,System.Exception,System.String)">
            <summary>
            Throws a new <see cref="T:LinqToDB.Common.LinqToDBConvertException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <param name="columnName">The column which had a conversion issue.</param>
            <exception cref="T:LinqToDB.Common.LinqToDBConvertException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowLockRecursionException">
            <summary>
            Throws a new <see cref="T:System.Threading.LockRecursionException"/>.
            </summary>
            <exception cref="T:System.Threading.LockRecursionException">Thrown with no parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowLockRecursionException(System.String)">
            <summary>
            Throws a new <see cref="T:System.Threading.LockRecursionException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.Threading.LockRecursionException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowLockRecursionException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.Threading.LockRecursionException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.Threading.LockRecursionException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowMetadataException">
            <summary>
            Throws a new <see cref="T:LinqToDB.Metadata.MetadataException"/>.
            </summary>
            <exception cref="T:LinqToDB.Metadata.MetadataException">Thrown with no parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowMetadataException(System.String)">
            <summary>
            Throws a new <see cref="T:LinqToDB.Metadata.MetadataException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:LinqToDB.Metadata.MetadataException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowMetadataException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:LinqToDB.Metadata.MetadataException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:LinqToDB.Metadata.MetadataException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowMissingFieldException">
            <summary>
            Throws a new <see cref="T:System.MissingFieldException"/>.
            </summary>
            <exception cref="T:System.MissingFieldException">Thrown with no parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowMissingFieldException(System.String)">
            <summary>
            Throws a new <see cref="T:System.MissingFieldException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.MissingFieldException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowMissingFieldException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.MissingFieldException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.MissingFieldException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowMissingFieldException(System.String,System.String)">
            <summary>
            Throws a new <see cref="T:System.MissingFieldException"/>.
            </summary>
            <param name="className">The target class being inspected.</param>
            <param name="fieldName">The target field being retrieved.</param>
            <exception cref="T:System.MissingFieldException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowMissingMemberException">
            <summary>
            Throws a new <see cref="T:System.MissingMemberException"/>.
            </summary>
            <exception cref="T:System.MissingMemberException">Thrown with no parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowMissingMemberException(System.String)">
            <summary>
            Throws a new <see cref="T:System.MissingMemberException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.MissingMemberException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowMissingMemberException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.MissingMemberException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.MissingMemberException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowMissingMemberException(System.String,System.String)">
            <summary>
            Throws a new <see cref="T:System.MissingMemberException"/>.
            </summary>
            <param name="className">The target class being inspected.</param>
            <param name="memberName">The target member being retrieved.</param>
            <exception cref="T:System.MissingMemberException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowMissingMethodException">
            <summary>
            Throws a new <see cref="T:System.MissingMethodException"/>.
            </summary>
            <exception cref="T:System.MissingMethodException">Thrown with no parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowMissingMethodException(System.String)">
            <summary>
            Throws a new <see cref="T:System.MissingMethodException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.MissingMethodException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowMissingMethodException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.MissingMethodException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.MissingMethodException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowMissingMethodException(System.String,System.String)">
            <summary>
            Throws a new <see cref="T:System.MissingMethodException"/>.
            </summary>
            <param name="className">The target class being inspected.</param>
            <param name="methodName">The target method being retrieved.</param>
            <exception cref="T:System.MissingMethodException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowNotImplementedException">
            <summary>
            Throws a new <see cref="T:System.NotImplementedException"/>.
            </summary>
            <exception cref="T:System.NotImplementedException">Thrown with no parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowNotImplementedException(System.String)">
            <summary>
            Throws a new <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.NotImplementedException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowNotImplementedException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.NotImplementedException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowNotSupportedException">
            <summary>
            Throws a new <see cref="T:System.NotSupportedException"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown with no parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowNotSupportedException(System.String)">
            <summary>
            Throws a new <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.NotSupportedException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowNotSupportedException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.NotSupportedException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowObjectDisposedException(System.String)">
            <summary>
            Throws a new <see cref="T:System.ObjectDisposedException"/>.
            </summary>
            <param name="objectName">The name of the disposed object.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowObjectDisposedException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.ObjectDisposedException"/>.
            </summary>
            <param name="objectName">The name of the disposed object.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowObjectDisposedException(System.String,System.String)">
            <summary>
            Throws a new <see cref="T:System.ObjectDisposedException"/>.
            </summary>
            <param name="objectName">The name of the disposed object.</param>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowOperationCanceledException">
            <summary>
            Throws a new <see cref="T:System.OperationCanceledException"/>.
            </summary>
            <exception cref="T:System.OperationCanceledException">Thrown with no parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowOperationCanceledException(System.String)">
            <summary>
            Throws a new <see cref="T:System.OperationCanceledException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.OperationCanceledException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowOperationCanceledException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.OperationCanceledException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.OperationCanceledException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowOperationCanceledException(System.Threading.CancellationToken)">
            <summary>
            Throws a new <see cref="T:System.OperationCanceledException"/>.
            </summary>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> in use.</param>
            <exception cref="T:System.OperationCanceledException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowOperationCanceledException(System.String,System.Threading.CancellationToken)">
            <summary>
            Throws a new <see cref="T:System.OperationCanceledException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> in use.</param>
            <exception cref="T:System.OperationCanceledException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowOperationCanceledException(System.String,System.Exception,System.Threading.CancellationToken)">
            <summary>
            Throws a new <see cref="T:System.OperationCanceledException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> in use.</param>
            <exception cref="T:System.OperationCanceledException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowPlatformNotSupportedException">
            <summary>
            Throws a new <see cref="T:System.PlatformNotSupportedException"/>.
            </summary>
            <exception cref="T:System.PlatformNotSupportedException">Thrown with no parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowPlatformNotSupportedException(System.String)">
            <summary>
            Throws a new <see cref="T:System.PlatformNotSupportedException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.PlatformNotSupportedException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowPlatformNotSupportedException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.PlatformNotSupportedException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.PlatformNotSupportedException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowSerializationException">
            <summary>
            Throws a new <see cref="T:System.Runtime.Serialization.SerializationException"/>.
            </summary>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown with no parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowSerializationException(System.String)">
            <summary>
            Throws a new <see cref="T:System.Runtime.Serialization.SerializationException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowSerializationException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.Runtime.Serialization.SerializationException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowSqlException">
            <summary>
            Throws a new <see cref="T:LinqToDB.SqlQuery.SqlException"/>.
            </summary>
            <exception cref="T:LinqToDB.SqlQuery.SqlException">Thrown with no parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowSqlException(System.String)">
            <summary>
            Throws a new <see cref="T:LinqToDB.SqlQuery.SqlException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:LinqToDB.SqlQuery.SqlException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowSqlException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:LinqToDB.SqlQuery.SqlException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:LinqToDB.SqlQuery.SqlException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowSynchronizationLockException">
            <summary>
            Throws a new <see cref="T:System.Threading.SynchronizationLockException"/>.
            </summary>
            <exception cref="T:System.Threading.SynchronizationLockException">Thrown with no parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowSynchronizationLockException(System.String)">
            <summary>
            Throws a new <see cref="T:System.Threading.SynchronizationLockException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.Threading.SynchronizationLockException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowSynchronizationLockException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.Threading.SynchronizationLockException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.Threading.SynchronizationLockException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowTimeoutException">
            <summary>
            Throws a new <see cref="T:System.TimeoutException"/>.
            </summary>
            <exception cref="T:System.TimeoutException">Thrown with no parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowTimeoutException(System.String)">
            <summary>
            Throws a new <see cref="T:System.TimeoutException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.TimeoutException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowTimeoutException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.TimeoutException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.TimeoutException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowUnauthorizedAccessException">
            <summary>
            Throws a new <see cref="T:System.UnauthorizedAccessException"/>.
            </summary>
            <exception cref="T:System.UnauthorizedAccessException">Thrown with no parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowUnauthorizedAccessException(System.String)">
            <summary>
            Throws a new <see cref="T:System.UnauthorizedAccessException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.UnauthorizedAccessException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowUnauthorizedAccessException(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.UnauthorizedAccessException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.UnauthorizedAccessException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowArrayTypeMismatchException``1">
            <summary>
            Throws a new <see cref="T:System.ArrayTypeMismatchException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowArrayTypeMismatchException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.ArrayTypeMismatchException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowArrayTypeMismatchException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.ArrayTypeMismatchException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown with the specified parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowArgumentException``1">
            <summary>
            Throws a new <see cref="T:System.ArgumentException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:System.ArgumentException">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowArgumentException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.ArgumentException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.ArgumentException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowArgumentException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.ArgumentException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.ArgumentException">Thrown with the specified parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowArgumentException``1(System.String,System.String)">
            <summary>
            Throws a new <see cref="T:System.ArgumentException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="name">The argument name.</param>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.ArgumentException">Thrown with the specified parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowArgumentException``1(System.String,System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.ArgumentException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="name">The argument name.</param>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.ArgumentException">Thrown with the specified parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowArgumentNullException``1">
            <summary>
            Throws a new <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:System.ArgumentNullException">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowArgumentNullException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="name">The argument name.</param>
            <exception cref="T:System.ArgumentNullException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowArgumentNullException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="name">The argument name.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.ArgumentNullException">Thrown with the specified parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowArgumentNullException``1(System.String,System.String)">
            <summary>
            Throws a new <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="name">The argument name.</param>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.ArgumentNullException">Thrown with the specified parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowArgumentOutOfRangeException``1">
            <summary>
            Throws a new <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowArgumentOutOfRangeException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="name">The argument name.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowArgumentOutOfRangeException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="name">The argument name.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowArgumentOutOfRangeException``1(System.String,System.String)">
            <summary>
            Throws a new <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="name">The argument name.</param>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown with the specified parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowArgumentOutOfRangeException``1(System.String,System.Object,System.String)">
            <summary>
            Throws a new <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="name">The argument name.</param>
            <param name="value">The current argument value.</param>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown with the specified parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowFormatException``1">
            <summary>
            Throws a new <see cref="T:System.FormatException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:System.FormatException">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowFormatException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.FormatException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.FormatException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowFormatException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.FormatException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.FormatException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowInsufficientMemoryException``1">
            <summary>
            Throws a new <see cref="T:System.InsufficientMemoryException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:System.InsufficientMemoryException">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowInsufficientMemoryException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.InsufficientMemoryException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.InsufficientMemoryException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowInsufficientMemoryException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.InsufficientMemoryException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.InsufficientMemoryException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowInvalidCastException``1">
            <summary>
            Throws a new <see cref="T:System.InvalidCastException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:System.InvalidCastException">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowInvalidCastException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.InvalidCastException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.InvalidCastException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowInvalidCastException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.InvalidCastException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.InvalidCastException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowInvalidDataException``1">
            <summary>
            Throws a new <see cref="T:System.IO.InvalidDataException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:System.IO.InvalidDataException">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowInvalidDataException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.IO.InvalidDataException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.IO.InvalidDataException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowInvalidDataException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.IO.InvalidDataException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.IO.InvalidDataException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowInvalidOperationException``1">
            <summary>
            Throws a new <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:System.InvalidOperationException">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowInvalidOperationException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.InvalidOperationException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowInvalidOperationException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.InvalidOperationException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowLinqException``1">
            <summary>
            Throws a new <see cref="T:LinqToDB.Linq.LinqException"/>.
            </summary>
            <exception cref="T:LinqToDB.Linq.LinqException">Thrown with no parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowLinqException``1(System.String)">
            <summary>
            Throws a new <see cref="T:LinqToDB.Linq.LinqException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:LinqToDB.Linq.LinqException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowLinqException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:LinqToDB.Linq.LinqException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:LinqToDB.Linq.LinqException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowLinqToDBException``1">
            <summary>
            Throws a new <see cref="T:LinqToDB.LinqToDBException"/>.
            </summary>
            <exception cref="T:LinqToDB.LinqToDBException">Thrown with no parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowLinqToDBException``1(System.String)">
            <summary>
            Throws a new <see cref="T:LinqToDB.LinqToDBException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:LinqToDB.LinqToDBException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowLinqToDBException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:LinqToDB.LinqToDBException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:LinqToDB.LinqToDBException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowLinqToDBConvertException``1">
            <summary>
            Throws a new <see cref="T:LinqToDB.Common.LinqToDBConvertException"/>.
            </summary>
            <exception cref="T:LinqToDB.Common.LinqToDBConvertException">Thrown with no parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowLinqToDBConvertException``1(System.String)">
            <summary>
            Throws a new <see cref="T:LinqToDB.Common.LinqToDBConvertException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:LinqToDB.Common.LinqToDBConvertException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowLinqToDBConvertException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:LinqToDB.Common.LinqToDBConvertException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:LinqToDB.Common.LinqToDBConvertException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowLinqToDBConvertException``1(System.String,System.Exception,System.String)">
            <summary>
            Throws a new <see cref="T:LinqToDB.Common.LinqToDBConvertException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <param name="columnName">The column which had a conversion issue.</param>
            <exception cref="T:LinqToDB.Common.LinqToDBConvertException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowLockRecursionException``1">
            <summary>
            Throws a new <see cref="T:System.Threading.LockRecursionException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:System.Threading.LockRecursionException">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowLockRecursionException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.Threading.LockRecursionException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.Threading.LockRecursionException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowLockRecursionException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.Threading.LockRecursionException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.Threading.LockRecursionException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowMetadataException``1">
            <summary>
            Throws a new <see cref="T:LinqToDB.Metadata.MetadataException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:LinqToDB.Metadata.MetadataException">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowMetadataException``1(System.String)">
            <summary>
            Throws a new <see cref="T:LinqToDB.Metadata.MetadataException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:LinqToDB.Metadata.MetadataException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowMetadataException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:LinqToDB.Metadata.MetadataException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:LinqToDB.Metadata.MetadataException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowMissingFieldException``1">
            <summary>
            Throws a new <see cref="T:System.MissingFieldException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:System.MissingFieldException">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowMissingFieldException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.MissingFieldException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.MissingFieldException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowMissingFieldException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.MissingFieldException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.MissingFieldException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowMissingFieldException``1(System.String,System.String)">
            <summary>
            Throws a new <see cref="T:System.MissingFieldException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="className">The target class being inspected.</param>
            <param name="fieldName">The target field being retrieved.</param>
            <exception cref="T:System.MissingFieldException">Thrown with the specified parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowMissingMemberException``1">
            <summary>
            Throws a new <see cref="T:System.MissingMemberException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:System.MissingMemberException">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowMissingMemberException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.MissingMemberException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.MissingMemberException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowMissingMemberException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.MissingMemberException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.MissingMemberException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowMissingMemberException``1(System.String,System.String)">
            <summary>
            Throws a new <see cref="T:System.MissingMemberException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="className">The target class being inspected.</param>
            <param name="memberName">The target member being retrieved.</param>
            <exception cref="T:System.MissingMemberException">Thrown with the specified parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowMissingMethodException``1">
            <summary>
            Throws a new <see cref="T:System.MissingMethodException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:System.MissingMethodException">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowMissingMethodException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.MissingMethodException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.MissingMethodException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowMissingMethodException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.MissingMethodException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.MissingMethodException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowMissingMethodException``1(System.String,System.String)">
            <summary>
            Throws a new <see cref="T:System.MissingMethodException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="className">The target class being inspected.</param>
            <param name="methodName">The target method being retrieved.</param>
            <exception cref="T:System.MissingMethodException">Thrown with the specified parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowNotImplementedException``1">
            <summary>
            Throws a new <see cref="T:System.NotImplementedException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:System.NotImplementedException">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowNotImplementedException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.NotImplementedException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.NotImplementedException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowNotImplementedException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.NotImplementedException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.NotImplementedException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowNotSupportedException``1">
            <summary>
            Throws a new <see cref="T:System.NotSupportedException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:System.NotSupportedException">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowNotSupportedException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.NotSupportedException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.NotSupportedException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowNotSupportedException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.NotSupportedException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.NotSupportedException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowObjectDisposedException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.ObjectDisposedException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="objectName">The name of the disposed object.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowObjectDisposedException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.ObjectDisposedException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="objectName">The name of the disposed object.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowObjectDisposedException``1(System.String,System.String)">
            <summary>
            Throws a new <see cref="T:System.ObjectDisposedException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="objectName">The name of the disposed object.</param>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown with the specified parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowOperationCanceledException``1">
            <summary>
            Throws a new <see cref="T:System.OperationCanceledException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:System.OperationCanceledException">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowOperationCanceledException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.OperationCanceledException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.OperationCanceledException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowOperationCanceledException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.OperationCanceledException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.OperationCanceledException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowOperationCanceledException``1(System.Threading.CancellationToken)">
            <summary>
            Throws a new <see cref="T:System.OperationCanceledException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> in use.</param>
            <exception cref="T:System.OperationCanceledException">Thrown with the specified parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowOperationCanceledException``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Throws a new <see cref="T:System.OperationCanceledException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> in use.</param>
            <exception cref="T:System.OperationCanceledException">Thrown with the specified parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowOperationCanceledException``1(System.String,System.Exception,System.Threading.CancellationToken)">
            <summary>
            Throws a new <see cref="T:System.OperationCanceledException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <param name="token">The <see cref="T:System.Threading.CancellationToken"/> in use.</param>
            <exception cref="T:System.OperationCanceledException">Thrown with the specified parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowPlatformNotSupportedException``1">
            <summary>
            Throws a new <see cref="T:System.PlatformNotSupportedException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:System.PlatformNotSupportedException">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowPlatformNotSupportedException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.PlatformNotSupportedException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.PlatformNotSupportedException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowPlatformNotSupportedException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.PlatformNotSupportedException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.PlatformNotSupportedException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowSerializationException``1">
            <summary>
            Throws a new <see cref="T:System.Runtime.Serialization.SerializationException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown with no parameters.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowSerializationException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.Runtime.Serialization.SerializationException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowSerializationException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.Runtime.Serialization.SerializationException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown with the specified parameter.</exception>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowSqlException``1">
            <summary>
            Throws a new <see cref="T:LinqToDB.SqlQuery.SqlException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:LinqToDB.SqlQuery.SqlException">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowSqlException``1(System.String)">
            <summary>
            Throws a new <see cref="T:LinqToDB.SqlQuery.SqlException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:LinqToDB.SqlQuery.SqlException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowSqlException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:LinqToDB.SqlQuery.SqlException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:LinqToDB.SqlQuery.SqlException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowSynchronizationLockException``1">
            <summary>
            Throws a new <see cref="T:System.Threading.SynchronizationLockException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:System.Threading.SynchronizationLockException">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowSynchronizationLockException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.Threading.SynchronizationLockException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.Threading.SynchronizationLockException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowSynchronizationLockException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.Threading.SynchronizationLockException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.Threading.SynchronizationLockException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowTimeoutException``1">
            <summary>
            Throws a new <see cref="T:System.TimeoutException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:System.TimeoutException">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowTimeoutException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.TimeoutException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.TimeoutException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowTimeoutException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.TimeoutException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.TimeoutException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowUnauthorizedAccessException``1">
            <summary>
            Throws a new <see cref="T:System.UnauthorizedAccessException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <exception cref="T:System.UnauthorizedAccessException">Thrown with no parameters.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowUnauthorizedAccessException``1(System.String)">
            <summary>
            Throws a new <see cref="T:System.UnauthorizedAccessException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <exception cref="T:System.UnauthorizedAccessException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="M:LinqToDB.ThrowHelper.ThrowUnauthorizedAccessException``1(System.String,System.Exception)">
            <summary>
            Throws a new <see cref="T:System.UnauthorizedAccessException"/>.
            </summary>
            <typeparam name="T">The type of expected result.</typeparam>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.UnauthorizedAccessException">Thrown with the specified parameter.</exception>
            <returns>This method always throws, so it actually never returns a value.</returns>
        </member>
        <member name="T:LinqToDB.AsyncExtensions">
            <summary>
            Provides helper methods for asynchronous operations.
            </summary>
        </member>
        <member name="M:LinqToDB.AsyncExtensions.GetActionTask(System.Action,System.Threading.CancellationToken)">
            <summary>
            Executes provided action using task scheduler.
            </summary>
            <param name="action">Action to execute.</param>
            <param name="token">Asynchronous operation cancellation token.</param>
            <returns>Asynchronous operation completion task.</returns>
        </member>
        <member name="M:LinqToDB.AsyncExtensions.GetTask``1(System.Func{``0})">
            <summary>
            Executes provided function using task scheduler.
            </summary>
            <typeparam name="T">Function result type.</typeparam>
            <param name="func">Function to execute.</param>
            <returns>Asynchronous operation completion task.</returns>
        </member>
        <member name="M:LinqToDB.AsyncExtensions.GetTask``1(System.Func{``0},System.Threading.CancellationToken)">
            <summary>
            Executes provided function using task scheduler.
            </summary>
            <typeparam name="T">Function result type.</typeparam>
            <param name="func">Function to execute.</param>
            <param name="token">Asynchronous operation cancellation token.</param>
            <returns>Asynchronous operation completion task.</returns>
        </member>
        <member name="M:LinqToDB.AsyncExtensions.AsAsyncEnumerable``1(System.Linq.IQueryable{``0})">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> that can be enumerated asynchronously.
            </summary>
            <typeparam name="TSource">Source sequence element type.</typeparam>
            <param name="source">Source sequence.</param>
            <returns>A query that can be enumerated asynchronously.</returns>
        </member>
        <member name="M:LinqToDB.AsyncExtensions.ForEachAsync``1(System.Linq.IQueryable{``0},System.Action{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously apply provided action to each element in source sequence.
            Sequence elements processed sequentially.
            </summary>
            <typeparam name="TSource">Source sequence element type.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="action">Action to apply to each sequence element.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Asynchronous operation completion task.</returns>
        </member>
        <member name="M:LinqToDB.AsyncExtensions.ForEachUntilAsync``1(System.Linq.IQueryable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Asynchronously apply provided function to each element in source sequence sequentially.
            Sequence enumeration stops if function returns <c>false</c>.
            </summary>
            <typeparam name="TSource">Source sequence element type.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="func">Function to apply to each sequence element. Returning <c>false</c> from function will stop numeration.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Asynchronous operation completion task.</returns>
        </member>
        <member name="M:LinqToDB.AsyncExtensions.ToListAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads data from query to a list.
            </summary>
            <typeparam name="TSource">Query element type.</typeparam>
            <param name="source">Source query.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>List with query results.</returns>
        </member>
        <member name="M:LinqToDB.AsyncExtensions.ToArrayAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads data from query to an array.
            </summary>
            <typeparam name="TSource">Query element type.</typeparam>
            <param name="source">Source query.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Array with query results.</returns>
        </member>
        <member name="M:LinqToDB.AsyncExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads data from query to a dictionary.
            </summary>
            <typeparam name="TSource">Query element type.</typeparam>
            <typeparam name="TKey">Dictionary key type.</typeparam>
            <param name="source">Source query.</param>
            <param name="keySelector">Source element key selector.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Dictionary with query results.</returns>
        </member>
        <member name="M:LinqToDB.AsyncExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads data from query to a dictionary.
            </summary>
            <typeparam name="TSource">Query element type.</typeparam>
            <typeparam name="TKey">Dictionary key type.</typeparam>
            <param name="source">Source query.</param>
            <param name="keySelector">Source element key selector.</param>
            <param name="comparer">Dictionary key comparer.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Dictionary with query results.</returns>
        </member>
        <member name="M:LinqToDB.AsyncExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads data from query to a dictionary.
            </summary>
            <typeparam name="TSource">Query element type.</typeparam>
            <typeparam name="TKey">Dictionary key type.</typeparam>
            <typeparam name="TElement">Dictionary element type.</typeparam>
            <param name="source">Source query.</param>
            <param name="keySelector">Source element key selector.</param>
            <param name="elementSelector">Dictionary element selector.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Dictionary with query results.</returns>
        </member>
        <member name="M:LinqToDB.AsyncExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads data from query to a dictionary.
            </summary>
            <typeparam name="TSource">Query element type.</typeparam>
            <typeparam name="TKey">Dictionary key type.</typeparam>
            <typeparam name="TElement">Dictionary element type.</typeparam>
            <param name="source">Source query.</param>
            <param name="keySelector">Source element key selector.</param>
            <param name="elementSelector">Dictionary element selector.</param>
            <param name="comparer">Dictionary key comparer.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Dictionary with query results.</returns>
        </member>
        <member name="T:LinqToDB.Async.AsyncDbConnection">
            <summary>
            Implements <see cref="T:LinqToDB.Async.IAsyncDbConnection"/> wrapper over <see cref="T:System.Data.Common.DbConnection"/> instance with
            synchronous implementation of asynchronous methods.
            Providers with async operations support could override its methods with asynchronous implementations.
            </summary>
        </member>
        <member name="T:LinqToDB.Async.AsyncDbTransaction">
            <summary>
            Basic <see cref="T:LinqToDB.Async.IAsyncDbTransaction"/> implementation with fallback to synchronous operations if corresponding functionality
            missing from <see cref="T:System.Data.Common.DbTransaction"/>.
            </summary>
        </member>
        <member name="T:LinqToDB.Async.AsyncEnumerableExtensions">
            <summary>
            Contains custom extension methods for <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> interface.
            </summary>
        </member>
        <member name="M:LinqToDB.Async.AsyncEnumerableExtensions.ToListAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously creates a <see cref="T:System.Collections.Generic.List`1" /> from <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" />
                by enumerating it asynchronously.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">Async enumerable.</param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains a <see cref="T:System.Collections.Generic.List`1" /> that contains elements from the input sequence.
            </returns>
        </member>
        <member name="M:LinqToDB.Async.AsyncEnumerableExtensions.ToArrayAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously creates an array from <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" />.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">Async enumerable.</param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains an array that contains elements from the input sequence.
            </returns>
        </member>
        <member name="M:LinqToDB.Async.AsyncEnumerableExtensions.FirstOrDefaultAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the first element of a sequence, or a default value if the sequence contains no elements />
                by enumerating it asynchronously.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">Async enumerable.</param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains a <see cref="T:System.Collections.Generic.List`1" /> that contains elements from the input sequence.
            </returns>
        </member>
        <member name="M:LinqToDB.Async.AsyncEnumerableExtensions.FirstAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
            <summary>Returns the first element of a sequence.</summary>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the first element of.</param>
            <param name="token">Cancellation token</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <returns>The first element in the specified sequence.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is <see langword="null" />.</exception>
            <exception cref="T:System.InvalidOperationException">The source sequence is empty.</exception>
        </member>
        <member name="T:LinqToDB.Async.AsyncFactory">
            <summary>
            Provides factory methods to create async wrappers for <see cref="T:System.Data.Common.DbConnection"/> and <see cref="T:System.Data.Common.DbTransaction"/> instances.
            </summary>
        </member>
        <member name="M:LinqToDB.Async.AsyncFactory.RegisterConnectionFactory``1(System.Func{System.Data.Common.DbConnection,LinqToDB.Async.IAsyncDbConnection})">
            <summary>
            Register or replace custom <see cref="T:LinqToDB.Async.IAsyncDbConnection"/> for <typeparamref name="TConnection"/> type.
            </summary>
            <typeparam name="TConnection">Connection type, which should use provided factory.</typeparam>
            <param name="factory"><see cref="T:LinqToDB.Async.IAsyncDbConnection"/> factory.</param>
        </member>
        <member name="M:LinqToDB.Async.AsyncFactory.RegisterTransactionFactory``1(System.Func{System.Data.Common.DbTransaction,LinqToDB.Async.IAsyncDbTransaction})">
            <summary>
            Register or replace custom <see cref="T:LinqToDB.Async.IAsyncDbTransaction"/> for <typeparamref name="TTransaction"/> type.
            </summary>
            <typeparam name="TTransaction">Transaction type, which should use provided factory.</typeparam>
            <param name="factory"><see cref="T:LinqToDB.Async.IAsyncDbTransaction"/> factory.</param>
        </member>
        <member name="M:LinqToDB.Async.AsyncFactory.Create(System.Data.Common.DbConnection)">
            <summary>
            Wraps <see cref="T:System.Data.Common.DbConnection"/> instance into type, implementing <see cref="T:LinqToDB.Async.IAsyncDbConnection"/>.
            </summary>
            <param name="connection">Connection to wrap.</param>
            <returns><see cref="T:LinqToDB.Async.IAsyncDbConnection"/> implementation for provided connection instance.</returns>
        </member>
        <member name="M:LinqToDB.Async.AsyncFactory.Create(System.Data.Common.DbTransaction)">
            <summary>
            Wraps <see cref="T:System.Data.Common.DbTransaction"/> instance into type, implementing <see cref="T:LinqToDB.Async.IAsyncDbTransaction"/>.
            </summary>
            <param name="transaction">Transaction to wrap.</param>
            <returns><see cref="T:LinqToDB.Async.IAsyncDbTransaction"/> implementation for provided transaction instance.</returns>
        </member>
        <member name="M:LinqToDB.Async.AsyncFactory.ToTask(System.Linq.Expressions.Expression)">
            <summary>
            Returns an expression which returns a <see cref="T:System.Threading.Tasks.Task`1"/> from a ValueTask.
            </summary>
        </member>
        <member name="M:LinqToDB.Async.AsyncFactory.ToValueTask(System.Linq.Expressions.Expression)">
            <summary>
            Returns an expression which returns a <see cref="T:System.Threading.Tasks.ValueTask"/> from a <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
        </member>
        <member name="M:LinqToDB.Async.AsyncFactory.ToValueTTask(System.Linq.Expressions.Expression)">
            <summary>
            Returns an expression which returns a <see cref="T:System.Threading.Tasks.ValueTask`1"/> from a <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
        </member>
        <member name="T:LinqToDB.Async.IAsyncDbConnection">
            <summary>
            Wrapper over <see cref="T:System.Data.Common.DbConnection"/> instance which contains all operations that could have custom implementation like:
            <list type="bullet">
            <item><see cref="T:LinqToDB.Data.RetryPolicy.IRetryPolicy"/> support</item>
            <item>asynchronous operations, missing from <see cref="T:System.Data.Common.DbConnection"/> but provided by data provider implementation.</item>.
            </list>
            </summary>
        </member>
        <member name="P:LinqToDB.Async.IAsyncDbConnection.Connection">
            <summary>
            Gets underlying connection instance.
            </summary>
        </member>
        <member name="M:LinqToDB.Async.IAsyncDbConnection.TryClone">
            <summary>
            Returns cloned connection instance, if underlying provider supports cloning or null otherwise.
            </summary>
        </member>
        <member name="P:LinqToDB.Async.IAsyncDbConnection.ConnectionString">
            <inheritdoc cref="P:System.Data.Common.DbConnection.ConnectionString"/>
        </member>
        <member name="P:LinqToDB.Async.IAsyncDbConnection.State">
            <inheritdoc cref="P:System.Data.Common.DbConnection.State"/>
        </member>
        <member name="M:LinqToDB.Async.IAsyncDbConnection.CreateCommand">
            <inheritdoc cref="M:System.Data.Common.DbConnection.CreateCommand"/>
        </member>
        <member name="M:LinqToDB.Async.IAsyncDbConnection.Open">
            <inheritdoc cref="M:System.Data.Common.DbConnection.Open"/>
        </member>
        <member name="M:LinqToDB.Async.IAsyncDbConnection.OpenAsync(System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:LinqToDB.Async.IAsyncDbConnection.Close">
            <inheritdoc cref="M:System.Data.Common.DbConnection.Close"/>
        </member>
        <member name="M:LinqToDB.Async.IAsyncDbConnection.CloseAsync">
            <summary>
            Closes current connection asynchonously.
            </summary>
            <returns>Async operation task.</returns>
        </member>
        <member name="M:LinqToDB.Async.IAsyncDbConnection.BeginTransaction">
            <summary>
            Starts new transaction for current connection with default isolation level.
            </summary>
            <returns>Database transaction object.</returns>
        </member>
        <member name="M:LinqToDB.Async.IAsyncDbConnection.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Starts new transaction for current connection with specified isolation level.
            </summary>
            <param name="isolationLevel">Transaction isolation level.</param>
            <returns>Database transaction object.</returns>
        </member>
        <member name="M:LinqToDB.Async.IAsyncDbConnection.BeginTransactionAsync(System.Threading.CancellationToken)">
            <summary>
            Starts new transaction asynchronously for current connection with default isolation level.
            </summary>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Database transaction object.</returns>
        </member>
        <member name="M:LinqToDB.Async.IAsyncDbConnection.BeginTransactionAsync(System.Data.IsolationLevel,System.Threading.CancellationToken)">
            <summary>
            Starts new transaction asynchronously for current connection with specified isolation level.
            </summary>
            <param name="isolationLevel">Transaction isolation level.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Database transaction object.</returns>
        </member>
        <member name="T:LinqToDB.Async.IAsyncDbTransaction">
            <summary>
            Wrapper over <see cref="T:System.Data.Common.DbTransaction"/> instance with asynchronous operations, missing from <see cref="T:System.Data.Common.DbTransaction"/>.
            Includes only operations, used by Linq To DB.
            </summary>
        </member>
        <member name="P:LinqToDB.Async.IAsyncDbTransaction.Transaction">
            <summary>
            Gets underlying transaction instance.
            </summary>
        </member>
        <member name="M:LinqToDB.Async.IAsyncDbTransaction.Commit">
            <inheritdoc cref="M:System.Data.Common.DbTransaction.Commit"/>
        </member>
        <member name="M:LinqToDB.Async.IAsyncDbTransaction.Rollback">
            <inheritdoc cref="M:System.Data.Common.DbTransaction.Rollback"/>
        </member>
        <member name="M:LinqToDB.Async.IAsyncDbTransaction.CommitAsync(System.Threading.CancellationToken)">
            <summary>
            Commits transaction asynchronously.
            </summary>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Asynchronous operation completion task.</returns>
        </member>
        <member name="M:LinqToDB.Async.IAsyncDbTransaction.RollbackAsync(System.Threading.CancellationToken)">
            <summary>
            Rollbacks transaction asynchronously.
            </summary>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Asynchronous operation completion task.</returns>
        </member>
        <member name="T:LinqToDB.Async.IQueryProviderAsync">
            <summary>
            This is internal API and is not intended for use by Linq To DB applications.
            It may change or be removed without further notice.
            </summary>
        </member>
        <member name="M:LinqToDB.Async.IQueryProviderAsync.ExecuteAsyncEnumerable``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)">
            <summary>
            This is internal API and is not intended for use by Linq To DB applications.
            It may change or be removed without further notice.
            </summary>
        </member>
        <member name="M:LinqToDB.Async.IQueryProviderAsync.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)">
            <summary>
            This is internal API and is not intended for use by Linq To DB applications.
            It may change or be removed without further notice.
            </summary>
        </member>
        <member name="T:LinqToDB.Async.ReflectedAsyncDbConnection">
            <summary>
            Provides reflection-based <see cref="T:System.Data.Common.DbConnection"/> wrapper with async operations support.
            </summary>
        </member>
        <member name="T:LinqToDB.Async.ReflectedAsyncDbTransaction">
            <summary>
            Asynchronous version of the <see cref="T:System.Data.Common.DbTransaction"/> interface, allowing asynchronous operations,
            missing from <see cref="T:System.Data.Common.DbTransaction"/>.
            Providers with async operations support could override its methods with asynchronous implementations.
            </summary>
        </member>
        <member name="T:LinqToDB.Async.SafeAwaiter">
            <summary>
            Provides deadlock-free task await helpers.
            </summary>
        </member>
        <member name="T:LinqToDB.Common.Array`1">
            <summary>
            Empty array instance helper.
            </summary>
            <typeparam name="T">Array element type.</typeparam>
        </member>
        <member name="F:LinqToDB.Common.Array`1.Empty">
            <summary>
            Static instance of empty array of specific type.
            </summary>
        </member>
        <member name="T:LinqToDB.Common.Compilation">
            <summary>
            Contains LINQ expression compilation options.
            </summary>
        </member>
        <member name="M:LinqToDB.Common.Compilation.SetExpressionCompiler(System.Func{System.Linq.Expressions.LambdaExpression,System.Delegate})">
            <summary>
            Sets LINQ expression compilation method.
            </summary>
            <param name="compiler">Method to use for expression compilation or <c>null</c> to reset compilation logic to defaults.</param>
        </member>
        <member name="M:LinqToDB.Common.Compilation.CompileExpression``1(System.Linq.Expressions.Expression{``0})">
            <summary>
            Internal API.
            </summary>
        </member>
        <member name="M:LinqToDB.Common.Compilation.CompileExpression(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Internal API.
            </summary>
        </member>
        <member name="T:LinqToDB.Common.Configuration">
            <summary>
            Contains global linq2db settings.
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Configuration.IsStructIsScalarType">
            <summary>
            If <c>true</c> - non-primitive and non-enum value types (structures) will be treated as scalar types (e.g. <see cref="T:System.DateTime"/>) during mapping;
            otherwise they will be treated the same way as classes.
            Default value: <c>true</c>.
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Configuration.UseEnumValueNameForStringColumns">
            <summary>
            If <c>true</c> - Enum values are stored as by calling ToString().
            Default value: <c>true</c>.
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Configuration.ContinueOnCapturedContext">
            <summary>
            Defines value to pass to <see cref="M:System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)"/> method for all linq2db internal await operations.
            Default value: <c>false</c>.
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Configuration.OptimizeForSequentialAccess">
            <summary>
            Enables mapping expression to be compatible with <see cref="F:System.Data.CommandBehavior.SequentialAccess"/> behavior.
            Note that it doesn't switch linq2db to use <see cref="F:System.Data.CommandBehavior.SequentialAccess"/> behavior for
            queries, so this optimization could be used for <see cref="F:System.Data.CommandBehavior.Default"/> too.
            Default value: <c>false</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Configuration.MaxBinaryParameterLengthLogging">
            <summary>
            Determines the length after which logging of binary data in SQL will be truncated.
            This is to avoid Out-Of-Memory exceptions when getting SqlText from <see cref="T:LinqToDB.Data.TraceInfo"/>
            or <see cref="T:LinqToDB.Linq.IExpressionQuery"/> for logging or other purposes.
            </summary>
            <remarks>
            This value defaults to 100.
            Use a value of -1 to disable and always log full binary.
            Set to 0 to truncate all binary data.
            </remarks>
        </member>
        <member name="P:LinqToDB.Common.Configuration.MaxStringParameterLengthLogging">
            <summary>
            Determines the length after which logging of string data in SQL will be truncated.
            This is to avoid Out-Of-Memory exceptions when getting SqlText from <see cref="T:LinqToDB.Data.TraceInfo"/>
            or <see cref="T:LinqToDB.Linq.IExpressionQuery"/> for logging or other purposes.
            </summary>
            <remarks>
            This value defaults to 200.
            Use a value of -1 to disable and always log full string.
            Set to 0 to truncate all string data.
            </remarks>
        </member>
        <member name="F:LinqToDB.Common.Configuration.Data.ThrowOnDisposed">
            <summary>
            Enables throwing of <see cref="T:System.ObjectDisposedException"/> when access disposed <see cref="T:LinqToDB.Data.DataConnection"/> instance.
            Default value: <c>true</c>.
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Configuration.Data.BulkCopyUseConnectionCommandTimeout">
            <summary>
            Controls behavior of bulk copy timeout if <see cref="P:LinqToDB.Data.BulkCopyOptions.BulkCopyTimeout"/> is not provided.
            - if <c>true</c> - the current timeout on the <see cref="T:LinqToDB.Data.DataConnection"/> is used
            - if <c>false</c> - command timeout is infinite.
            Default value: <c>false</c>.
            </summary>
        </member>
        <member name="T:LinqToDB.Common.Configuration.Linq">
            <summary>
            LINQ query settings.
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Configuration.Linq.PreloadGroups">
            <summary>
            Controls how group data for LINQ queries ended with GroupBy will be loaded:
            - if <c>true</c> - group data will be loaded together with main query, resulting in 1 + N queries, where N - number of groups;
            - if <c>false</c> - group data will be loaded when you call enumerator for specific group <see cref="T:System.Linq.IGrouping`2"/>.
            Default value: <c>false</c>.
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Configuration.Linq.IgnoreEmptyUpdate">
            <summary>
            Controls behavior of linq2db when there is no updateable fields in Update query:
            - if <c>true</c> - query not executed and Update operation returns 0 as number of affected records;
            - if <c>false</c> - <see cref="T:LinqToDB.Linq.LinqException"/> will be thrown.
            Default value: <c>false</c>.
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Configuration.Linq.GenerateExpressionTest">
            <summary>
            Enables generation of test class for each LINQ query, executed while this option is enabled.
            This option could be useful for issue reporting, when you need to provide reproducible case.
            Test file will be placed to <c>linq2db</c> subfolder of temp folder and exact file path will be logged
            to data connection tracing infrastructure.
            See <see cref="P:LinqToDB.Data.DataConnection.TraceSwitch"/> for more details.
            Default value: <c>false</c>.
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Configuration.Linq.TraceMapperExpression">
            <summary>
            Enables logging of generated mapping expression to data connection tracing infrastructure.
            See <see cref="P:LinqToDB.Data.DataConnection.TraceSwitch"/> for more details.
            Default value: <c>false</c>.
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Configuration.Linq.DoNotClearOrderBys">
            <summary>
            Controls behavior, when LINQ query chain contains multiple <see cref="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})"/> or <see cref="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})"/> calls:
            - if <c>true</c> - non-first OrderBy* call will be treated as ThenBy* call;
            - if <c>false</c> - OrderBy* call will discard sort specifications, added by previous OrderBy* and ThenBy* calls.
            Default value: <c>false</c>.
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Configuration.Linq.OptimizeJoins">
            <summary>
            If enabled, linq2db will try to reduce number of generated SQL JOINs for LINQ query.
            Attempted optimizations:
            - removes duplicate joins by unique target table key;
            - removes self-joins by unique key;
            - removes left joins if joined table is not used in query.
            Default value: <c>true</c>.
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Configuration.Linq.CompareNullsAsValues">
             <summary>
             If set to true nullable fields would be checked for IS NULL in Equal/NotEqual comparisons.
             This affects: Equal, NotEqual, Not Contains
             Default value: <c>true</c>.
             </summary>
             <example>
             <code>
             public class MyEntity
             {
                 public int? Value;
             }
            
             db.MyEntity.Where(e => e.Value != 10)
            
             from e1 in db.MyEntity
             join e2 in db.MyEntity on e1.Value equals e2.Value
             select e1
            
             var filter = new [] {1, 2, 3};
             db.MyEntity.Where(e => ! filter.Contains(e.Value))
             </code>
            
             Would be converted to next queries:
             <code>
             SELECT Value FROM MyEntity WHERE Value IS NULL OR Value != 10
            
             SELECT e1.Value
             FROM MyEntity e1
             INNER JOIN MyEntity e2 ON e1.Value = e2.Value OR (e1.Value IS NULL AND e2.Value IS NULL)
            
             SELECT Value FROM MyEntity WHERE Value IS NULL OR NOT Value IN (1, 2, 3)
             </code>
             </example>
        </member>
        <member name="F:LinqToDB.Common.Configuration.Linq.GuardGrouping">
            <summary>
            Controls behavior of LINQ query, which ends with GroupBy call.
            - if <c>true</c> - <seealso cref="T:LinqToDB.LinqToDBException"/> will be thrown for such queries;
            - if <c>false</c> - behavior is controlled by <see cref="F:LinqToDB.Common.Configuration.Linq.PreloadGroups"/> option.
            Default value: <c>true</c>.
            </summary>
            <remarks>
            <a href="https://github.com/linq2db/linq2db/issues/365">More details</a>.
            </remarks>
        </member>
        <member name="F:LinqToDB.Common.Configuration.Linq.DisableQueryCache">
            <summary>
            Used to disable LINQ expressions caching for queries.
            This cache reduces time, required for query parsing but have several side-effects:
            <para />
            - cached LINQ expressions could contain references to external objects as parameters, which could lead to memory leaks if those objects are not used anymore by other code
            <para />
            - cache access synchronization could lead to bigger latencies than it saves.
            <para />
            Default value: <c>false</c>.
            <para />
            It is not recommended to enable this option as it could lead to severe slowdown. Better approach will be
            to call <see cref="M:LinqToDB.Linq.Query`1.ClearCache"/> method to cleanup cache after queries, that produce severe memory leaks you need to fix.
            <para />
            <a href="https://github.com/linq2db/linq2db/issues/256">More details</a>.
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Configuration.Linq.CacheSlidingExpiration">
            <summary>
            Specifies timeout when query will be evicted from cache since last execution of query.
            Default value is 1 hour.
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Configuration.Linq.PreferApply">
            <summary>
            Used to generate CROSS APPLY or OUTER APPLY if possible.
            Default value: <c>true</c>.
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Configuration.Linq.KeepDistinctOrdered">
            <summary>
            Allows SQL generation to automatically transform
            <code>SELECT DISTINCT value FROM Table ORDER BY date</code>
            Into GROUP BY equivalent if syntax is not supported
            Default value: <c>true</c>.
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Configuration.Linq.ParameterizeTakeSkip">
            <summary>
            Enables Take/Skip parameterization.
            Default value: <c>true</c>.
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Configuration.Linq.EnableAutoFluentMapping">
            <summary>
            If <c>true</c>, auto support for fluent mapping is ON,
            which means that you do not need to create additional MappingSchema object to define FluentMapping.
            You can use <c>context.MappingSchema.GetFluentMappingBuilder()</c>.
            </summary>
        </member>
        <member name="T:LinqToDB.Common.Configuration.SqlServer">
            <summary>
            SqlServer specific global settings.
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Configuration.SqlServer.UseSchemaOnlyToGetSchema">
            <summary>
            if set to <c>true</c>, SchemaProvider uses <see cref="F:System.Data.CommandBehavior.SchemaOnly"/> to get metadata.
            Otherwise the sp_describe_first_result_set sproc is used.
            Default value: <c>false</c>.
            </summary>
        </member>
        <member name="T:LinqToDB.Common.Configuration.LinqService">
            <summary>
            Linq over WCF global settings.
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Configuration.LinqService.SerializeAssemblyQualifiedName">
            <summary>
            Controls format of type name, sent over remote context:
            - if <c>true</c> - name from <see cref="P:System.Type.AssemblyQualifiedName"/> used;
            - if <c>false</c> - name from <see cref="P:System.Type.FullName"/> used.
            Default value: <c>false</c>.
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Configuration.LinqService.ThrowUnresolvedTypeException">
            <summary>
            Controls behavior of linq2db, when it cannot load <see cref="T:System.Type"/> by type name on query deserialization:
            - if <c>true</c> - <see cref="T:LinqToDB.LinqToDBException"/> will be thrown;
            - if <c>false</c> - type load error will be ignored.
            Default value: <c>false</c>.
            </summary>
        </member>
        <member name="T:LinqToDB.Common.Configuration.RetryPolicy">
            <summary>
            Retry policy global settings.
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Configuration.RetryPolicy.Factory">
            <summary>
            Retry policy factory method, used to create retry policy for new <see cref="T:LinqToDB.Data.DataConnection"/> instance.
            If factory method is not set, retry policy is not used.
            Not set by default.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Configuration.RetryPolicy.UseDefaultPolicy">
            <summary>
            Status of use of default retry policy.
            Getter returns <c>true</c> if default retry policy used, and false if custom retry policy used or retry policy is not set.
            Setter sets <see cref="F:LinqToDB.Common.Configuration.RetryPolicy.Factory"/> to default retry policy factory if <paramref name="value"/> is <c>true</c>, otherwise removes retry policy.
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Configuration.RetryPolicy.DefaultMaxRetryCount">
            <summary>
            The default number of retry attempts.
            Default value: <c>5</c>.
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Configuration.RetryPolicy.DefaultMaxDelay">
            <summary>
            The default maximum time delay between retries, must be nonnegative.
            Default value: 30 seconds.
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Configuration.RetryPolicy.DefaultRandomFactor">
            <summary>
            The default maximum random factor, must not be lesser than 1.
            Default value: <c>1.1</c>.
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Configuration.RetryPolicy.DefaultExponentialBase">
            <summary>
            The default base for the exponential function used to compute the delay between retries, must be positive.
            Default value: <c>2</c>.
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Configuration.RetryPolicy.DefaultCoefficient">
            <summary>
            The default coefficient for the exponential function used to compute the delay between retries, must be nonnegative.
            Default value: 1 second.
            </summary>
        </member>
        <member name="T:LinqToDB.Common.Configuration.Sql">
            <summary>
            SQL generation global settings.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Configuration.Sql.AssociationAlias">
            <summary>
            Format for association alias.
            <para>
            Default value: <c>"a_{0}"</c>.
            </para>
            <example>
            In the following query
            <code>
            var query = from child in db.Child
               select new
               {
                  child.ChildID,
                  child.Parent.Value1
               };
            </code>
            for association <c>Parent</c> will be generated association <c>A_Parent</c> in resulting SQL.
            <code>
            SELECT
               [child].[ChildID],
               [a_Parent].[Value1]
            FROM
               [Child] [child]
                  LEFT JOIN [Parent] [a_Parent] ON ([child].[ParentID] = [a_Parent].[ParentID])
            </code>
            </example>
            <remarks>
            Set this value to <c>null</c> to disable special alias generation queries.
            </remarks>
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Configuration.Sql.GenerateFinalAliases">
            <summary>
            Indicates whether SQL Builder should generate aliases for final projection.
            It is not required for correct query processing but simplifies SQL analysis.
            <para>
            Default value: <c>false</c>.
            </para>
            <example>
            For the query
            <code>
            var query = from child in db.Child
               select new
               {
                  TrackId = child.ChildID,
               };
            </code>
            When property is <c>true</c>
            <code>
            SELECT
               [child].[ChildID] as [TrackId]
            FROM
               [Child] [child]
            </code>
            Otherwise alias will be removed
            <code>
            SELECT
               [child].[ChildID]
            FROM
               [Child] [child]
            </code>
            </example>
            </summary>
        </member>
        <member name="T:LinqToDB.Common.Converter">
            <summary>
            Type conversion manager.
            </summary>
        </member>
        <member name="M:LinqToDB.Common.Converter.SetConverter``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Sets custom converter from <typeparamref name="TFrom"/> to <typeparamref name="TTo"/> type.
            </summary>
            <typeparam name="TFrom">Source conversion type.</typeparam>
            <typeparam name="TTo">Target conversion type.</typeparam>
            <param name="expr">Converter expression.</param>
        </member>
        <member name="M:LinqToDB.Common.Converter.GetConverter(System.Type,System.Type)">
            <summary>
            Tries to get converter from <paramref name="from"/> to <paramref name="to"/> type.
            </summary>
            <param name="from">Source conversion type.</param>
            <param name="to">Target conversion type.</param>
            <returns>Conversion expression or null, of converter not found.</returns>
        </member>
        <member name="M:LinqToDB.Common.Converter.ChangeType(System.Object,System.Type,LinqToDB.Mapping.MappingSchema)">
            <summary>
            Converts value to <paramref name="conversionType"/> type.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="conversionType">Target conversion type.</param>
            <param name="mappingSchema">Optional mapping schema.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:LinqToDB.Common.Converter.ChangeTypeTo``1(System.Object,LinqToDB.Mapping.MappingSchema)">
            <summary>
            Converts value to <typeparamref name="T"/> type.
            </summary>
            <typeparam name="T">Target conversion type.</typeparam>
            <param name="value">Value to convert.</param>
            <param name="mappingSchema">Optional mapping schema.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:LinqToDB.Common.Converter.IsDefaultValuePlaceHolder(System.Linq.Expressions.Expression)">
            <summary>
            Returns true, if expression value is <see cref="T:LinqToDB.Expressions.DefaultValueExpression"/> or
            <code>
            DefaultValue&lt;T&gt;.Value
            </code>
            </summary>
            <param name="expr">Expression to inspect.</param>
            <returns><c>true</c>, if expression represents default value.</returns>
        </member>
        <member name="M:LinqToDB.Common.Converter.GetDefaultMappingFromEnumType(LinqToDB.Mapping.MappingSchema,System.Type)">
            <summary>
            Returns type, to which provided enumeration values should be mapped.
            </summary>
            <param name="mappingSchema">Current mapping schema</param>
            <param name="enumType">Enumeration type.</param>
            <returns>Underlying mapping type.</returns>
        </member>
        <member name="T:LinqToDB.Common.Convert`2">
            <summary>
            Converters provider for value conversion from <typeparamref name="TFrom"/> to <typeparamref name="TTo"/> type.
            </summary>
            <typeparam name="TFrom">Source conversion type.</typeparam>
            <typeparam name="TTo">Target conversion type.</typeparam>
        </member>
        <member name="P:LinqToDB.Common.Convert`2.Expression">
            <summary>
            Gets or sets an expression that converts a value of <i>TFrom</i> type to <i>TTo</i> type.
            Setter updates both expression and delegate forms of converter.
            Assigning <c>null</c> value will reset converter to default conversion logic.
            Assigning non-null value will also set converter as default converter.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Convert`2.Lambda">
            <summary>
            Gets or sets a function that converts a value of <i>TFrom</i> type to <i>TTo</i> type.
            Setter updates both expression and delegate forms of converter.
            Assigning <c>null</c> value will reset converter to default conversion logic.
            Assigning non-null value will also set converter as default converter.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Convert`2.From">
            <summary>
            Gets conversion function delegate.
            </summary>
        </member>
        <member name="T:LinqToDB.Common.ConvertTo`1">
            <summary>
            Value converter to <typeparamref name="TTo"/> type.
            </summary>
            <typeparam name="TTo">Target conversion type.</typeparam>
        </member>
        <member name="M:LinqToDB.Common.ConvertTo`1.From``1(``0)">
            <summary>
            Converts value from <typeparamref name="TFrom"/> to <typeparamref name="TTo"/> type.
            </summary>
            <typeparam name="TFrom">Source conversion type.</typeparam>
            <param name="o">Value to convert.</param>
            <returns>Converted value.</returns>
            <example>
            ConvertTo&lt;int&gt;.From("123");
            </example>
        </member>
        <member name="T:LinqToDB.Common.DbDataType">
            <summary>
            Stores database type attributes.
            </summary>
        </member>
        <member name="T:LinqToDB.Common.DefaultValue">
            <summary>
            Default value provider.
            Default value used for mapping from NULL database value to C# value.
            </summary>
        </member>
        <member name="M:LinqToDB.Common.DefaultValue.GetValue(System.Type,LinqToDB.Mapping.MappingSchema)">
            <summary>
            Returns default value for provided type.
            </summary>
            <param name="type">Type, for which default value requested.</param>
            <param name="mappingSchema">Optional mapping schema to provide mapping information for enum type.</param>
            <returns>Default value for specific type.</returns>
        </member>
        <member name="M:LinqToDB.Common.DefaultValue.GetValue``1">
            <summary>
            Returns default value for provided type.
            </summary>
            <typeparam name="T">Type, for which default value requested.</typeparam>
            <returns>Default value for specific type.</returns>
        </member>
        <member name="M:LinqToDB.Common.DefaultValue.SetValue``1(``0)">
            <summary>
            Sets default value for provided type.
            </summary>
            <typeparam name="T">Type, for which default value set.</typeparam>
            <param name="value">Default value for specific type.</param>
        </member>
        <member name="T:LinqToDB.Common.DefaultValue`1">
            <summary>
            Default value provider for specific type.
            Default value used for mapping from NULL database value to C# value.
            </summary>
            <typeparam name="T">Type parameter.</typeparam>
        </member>
        <member name="P:LinqToDB.Common.DefaultValue`1.Value">
            <summary>
            Gets or sets default value for specific type.
            </summary>
        </member>
        <member name="M:LinqToDB.Common.EnumerableHelper.Batch``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Split enumerable source into batches of specified size.
            Limitation: each batch could be enumerated only once or exception will be generated.
            </summary>
            <typeparam name="T">Type of element in source.</typeparam>
            <param name="source">Source collection to split into batches.</param>
            <param name="batchSize">Size of each batch. Must be positive number.</param>
            <returns>New enumerable of batches.</returns>
        </member>
        <member name="M:LinqToDB.Common.EnumerableHelper.Batch``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Int32)">
            <summary>
            Split enumerable source into batches of specified size.
            Limitation: each batch should be enumerated only once or exception will be generated.
            </summary>
            <typeparam name="T">Type of element in source.</typeparam>
            <param name="source">Source collection to split into batches.</param>
            <param name="batchSize">Size of each batch. Must be positive number.</param>
            <returns>New enumerable of batches.</returns>
        </member>
        <member name="P:LinqToDB.Common.Internal.Cache.CacheEntry`1.AbsoluteExpiration">
            <summary>
            Gets or sets an absolute expiration date for the cache entry.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Internal.Cache.CacheEntry`1.AbsoluteExpirationRelativeToNow">
            <summary>
            Gets or sets an absolute expiration time, relative to now.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Internal.Cache.CacheEntry`1.SlidingExpiration">
            <summary>
            Gets or sets how long a cache entry can be inactive (e.g. not accessed) before it will be removed.
            This will not extend the entry lifetime beyond the absolute expiration (if set).
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Internal.Cache.CacheEntry`1.ExpirationTokens">
            <summary>
            Gets the <see cref="T:LinqToDB.Common.Internal.Cache.IChangeToken"/> instances which cause the cache entry to expire.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Internal.Cache.CacheEntry`1.PostEvictionCallbacks">
            <summary>
            Gets or sets the callbacks will be fired after the cache entry is evicted from the cache.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Internal.Cache.CacheEntry`1.Priority">
            <summary>
            Gets or sets the priority for keeping the cache entry in the cache during a
            memory pressure triggered cleanup. The default is <see cref="F:LinqToDB.Common.Internal.Cache.CacheItemPriority.Normal"/>.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Internal.Cache.CacheEntry`1.Size">
            <summary>
            Gets or sets the size of the cache entry value.
            </summary>
        </member>
        <member name="M:LinqToDB.Common.Internal.Cache.CacheEntryExtensions.SetPriority``1(LinqToDB.Common.Internal.Cache.ICacheEntry{``0},LinqToDB.Common.Internal.Cache.CacheItemPriority)">
            <summary>
            Sets the priority for keeping the cache entry in the cache during a memory pressure tokened cleanup.
            </summary>
            <param name="entry">The entry to set the priority for.</param>
            <param name="priority">The <see cref="T:LinqToDB.Common.Internal.Cache.CacheItemPriority"/> to set on the entry.</param>
            <returns>The <see cref="T:LinqToDB.Common.Internal.Cache.ICacheEntry`1"/> for chaining.</returns>
        </member>
        <member name="M:LinqToDB.Common.Internal.Cache.CacheEntryExtensions.AddExpirationToken``1(LinqToDB.Common.Internal.Cache.ICacheEntry{``0},LinqToDB.Common.Internal.Cache.IChangeToken)">
            <summary>
            Expire the cache entry if the given <see cref="T:LinqToDB.Common.Internal.Cache.IChangeToken"/> expires.
            </summary>
            <param name="entry">The <see cref="T:LinqToDB.Common.Internal.Cache.ICacheEntry`1"/>.</param>
            <param name="expirationToken">The <see cref="T:LinqToDB.Common.Internal.Cache.IChangeToken"/> that causes the cache entry to expire.</param>
            <returns>The <see cref="T:LinqToDB.Common.Internal.Cache.ICacheEntry`1"/> for chaining.</returns>
        </member>
        <member name="M:LinqToDB.Common.Internal.Cache.CacheEntryExtensions.SetAbsoluteExpiration``1(LinqToDB.Common.Internal.Cache.ICacheEntry{``0},System.TimeSpan)">
            <summary>
            Sets an absolute expiration time, relative to now.
            </summary>
            <param name="entry">The <see cref="T:LinqToDB.Common.Internal.Cache.ICacheEntry`1"/>.</param>
            <param name="relative">The <see cref="T:System.TimeSpan"/> representing the expiration time relative to now.</param>
            <returns>The <see cref="T:LinqToDB.Common.Internal.Cache.ICacheEntry`1"/> for chaining.</returns>
        </member>
        <member name="M:LinqToDB.Common.Internal.Cache.CacheEntryExtensions.SetAbsoluteExpiration``1(LinqToDB.Common.Internal.Cache.ICacheEntry{``0},System.DateTimeOffset)">
            <summary>
            Sets an absolute expiration date for the cache entry.
            </summary>
            <param name="entry">The <see cref="T:LinqToDB.Common.Internal.Cache.ICacheEntry`1"/>.</param>
            <param name="absolute">A <see cref="T:System.DateTimeOffset"/> representing the expiration time in absolute terms.</param>
            <returns>The <see cref="T:LinqToDB.Common.Internal.Cache.ICacheEntry`1"/> for chaining.</returns>
        </member>
        <member name="M:LinqToDB.Common.Internal.Cache.CacheEntryExtensions.SetSlidingExpiration``1(LinqToDB.Common.Internal.Cache.ICacheEntry{``0},System.TimeSpan)">
            <summary>
            Sets how long the cache entry can be inactive (e.g. not accessed) before it will be removed.
            This will not extend the entry lifetime beyond the absolute expiration (if set).
            </summary>
            <param name="entry">The <see cref="T:LinqToDB.Common.Internal.Cache.ICacheEntry`1"/>.</param>
            <param name="offset">A <see cref="T:System.TimeSpan"/> representing a sliding expiration.</param>
            <returns>The <see cref="T:LinqToDB.Common.Internal.Cache.ICacheEntry`1"/> for chaining.</returns>
        </member>
        <member name="M:LinqToDB.Common.Internal.Cache.CacheEntryExtensions.RegisterPostEvictionCallback``1(LinqToDB.Common.Internal.Cache.ICacheEntry{``0},LinqToDB.Common.Internal.Cache.PostEvictionDelegate{``0})">
            <summary>
            The given callback will be fired after the cache entry is evicted from the cache.
            </summary>
            <param name="entry">The <see cref="T:LinqToDB.Common.Internal.Cache.ICacheEntry`1"/>.</param>
            <param name="callback">The callback to run after the entry is evicted.</param>
            <returns>The <see cref="T:LinqToDB.Common.Internal.Cache.ICacheEntry`1"/> for chaining.</returns>
        </member>
        <member name="M:LinqToDB.Common.Internal.Cache.CacheEntryExtensions.RegisterPostEvictionCallback``1(LinqToDB.Common.Internal.Cache.ICacheEntry{``0},LinqToDB.Common.Internal.Cache.PostEvictionDelegate{``0},System.Object)">
            <summary>
            The given callback will be fired after the cache entry is evicted from the cache.
            </summary>
            <param name="entry">The <see cref="T:LinqToDB.Common.Internal.Cache.ICacheEntry`1"/>.</param>
            <param name="callback">The callback to run after the entry is evicted.</param>
            <param name="state">The state to pass to the post-eviction callback.</param>
            <returns>The <see cref="T:LinqToDB.Common.Internal.Cache.ICacheEntry`1"/> for chaining.</returns>
        </member>
        <member name="M:LinqToDB.Common.Internal.Cache.CacheEntryExtensions.SetValue``1(LinqToDB.Common.Internal.Cache.ICacheEntry{``0},System.Object)">
            <summary>
            Sets the value of the cache entry.
            </summary>
            <param name="entry">The <see cref="T:LinqToDB.Common.Internal.Cache.ICacheEntry`1"/>.</param>
            <param name="value">The value to set on the <paramref name="entry"/>.</param>
            <returns>The <see cref="T:LinqToDB.Common.Internal.Cache.ICacheEntry`1"/> for chaining.</returns>
        </member>
        <member name="M:LinqToDB.Common.Internal.Cache.CacheEntryExtensions.SetSize``1(LinqToDB.Common.Internal.Cache.ICacheEntry{``0},System.Int64)">
            <summary>
            Sets the size of the cache entry value.
            </summary>
            <param name="entry">The <see cref="T:LinqToDB.Common.Internal.Cache.ICacheEntry`1"/>.</param>
            <param name="size">The size to set on the <paramref name="entry"/>.</param>
            <returns>The <see cref="T:LinqToDB.Common.Internal.Cache.ICacheEntry`1"/> for chaining.</returns>
        </member>
        <member name="M:LinqToDB.Common.Internal.Cache.CacheEntryExtensions.SetOptions``1(LinqToDB.Common.Internal.Cache.ICacheEntry{``0},LinqToDB.Common.Internal.Cache.MemoryCacheEntryOptions{``0})">
            <summary>
            Applies the values of an existing <see cref="T:LinqToDB.Common.Internal.Cache.MemoryCacheEntryOptions`1"/> to the entry.
            </summary>
            <param name="entry">The <see cref="T:LinqToDB.Common.Internal.Cache.ICacheEntry`1"/>.</param>
            <param name="options">Set the values of these options on the <paramref name="entry"/>.</param>
            <returns>The <see cref="T:LinqToDB.Common.Internal.Cache.ICacheEntry`1"/> for chaining.</returns>
        </member>
        <member name="T:LinqToDB.Common.Internal.Cache.CacheItemPriority">
            <summary>
            Specifies how items are prioritized for preservation during a memory pressure triggered cleanup.
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Internal.Cache.EvictionReason.Removed">
            <summary>
            Manually
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Internal.Cache.EvictionReason.Replaced">
            <summary>
            Overwritten
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Internal.Cache.EvictionReason.Expired">
            <summary>
            Timed out
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Internal.Cache.EvictionReason.TokenExpired">
            <summary>
            Event
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Internal.Cache.EvictionReason.Capacity">
            <summary>
            Overflow
            </summary>
        </member>
        <member name="T:LinqToDB.Common.Internal.Cache.ICacheEntry`1">
            <summary>
            Represents an entry in the <see cref="T:LinqToDB.Common.Internal.Cache.IMemoryCache`1"/> implementation.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Internal.Cache.ICacheEntry`1.Key">
            <summary>
            Gets the key of the cache entry.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Internal.Cache.ICacheEntry`1.Value">
            <summary>
            Gets or set the value of the cache entry.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Internal.Cache.ICacheEntry`1.AbsoluteExpiration">
            <summary>
            Gets or sets an absolute expiration date for the cache entry.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Internal.Cache.ICacheEntry`1.AbsoluteExpirationRelativeToNow">
            <summary>
            Gets or sets an absolute expiration time, relative to now.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Internal.Cache.ICacheEntry`1.SlidingExpiration">
            <summary>
            Gets or sets how long a cache entry can be inactive (e.g. not accessed) before it will be removed.
            This will not extend the entry lifetime beyond the absolute expiration (if set).
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Internal.Cache.ICacheEntry`1.ExpirationTokens">
            <summary>
            Gets the <see cref="T:LinqToDB.Common.Internal.Cache.IChangeToken"/> instances which cause the cache entry to expire.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Internal.Cache.ICacheEntry`1.PostEvictionCallbacks">
            <summary>
            Gets or sets the callbacks will be fired after the cache entry is evicted from the cache.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Internal.Cache.ICacheEntry`1.Priority">
            <summary>
            Gets or sets the priority for keeping the cache entry in the cache during a
             cleanup. The default is <see cref="F:LinqToDB.Common.Internal.Cache.CacheItemPriority.Normal"/>.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Internal.Cache.ICacheEntry`1.Size">
            <summary>
            Gets or set the size of the cache entry value.
            </summary>
        </member>
        <member name="T:LinqToDB.Common.Internal.Cache.IChangeToken">
            <summary>
            Propagates notifications that a change has occurred.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Internal.Cache.IChangeToken.HasChanged">
            <summary>
            Gets a value that indicates if a change has occurred.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Internal.Cache.IChangeToken.ActiveChangeCallbacks">
            <summary>
            Indicates if this token will pro-actively raise callbacks. If <c>false</c>, the token consumer must
            poll <see cref="P:LinqToDB.Common.Internal.Cache.IChangeToken.HasChanged" /> to detect changes.
            </summary>
        </member>
        <member name="M:LinqToDB.Common.Internal.Cache.IChangeToken.RegisterChangeCallback(System.Action{System.Object},System.Object)">
            <summary>
            Registers for a callback that will be invoked when the entry has changed.
            <see cref="P:LinqToDB.Common.Internal.Cache.IChangeToken.HasChanged"/> MUST be set before the callback is invoked.
            </summary>
            <param name="callback">The <see cref="T:System.Action`1"/> to invoke.</param>
            <param name="state">State to be passed into the callback.</param>
            <returns>An <see cref="T:System.IDisposable"/> that is used to unregister the callback.</returns>
        </member>
        <member name="T:LinqToDB.Common.Internal.Cache.IMemoryCache`1">
            <summary>
            Represents a local in-memory cache whose values are not serialized.
            </summary>
        </member>
        <member name="M:LinqToDB.Common.Internal.Cache.IMemoryCache`1.TryGetValue(`0,System.Object@)">
            <summary>
            Gets the item associated with this key if present.
            </summary>
            <param name="key">An object identifying the requested entry.</param>
            <param name="value">The located value or null.</param>
            <returns>True if the key was found.</returns>
        </member>
        <member name="M:LinqToDB.Common.Internal.Cache.IMemoryCache`1.CreateEntry(`0)">
            <summary>
            Create or overwrite an entry in the cache.
            </summary>
            <param name="key">An object identifying the entry.</param>
            <returns>The newly created <see cref="T:LinqToDB.Common.Internal.Cache.ICacheEntry`1"/> instance.</returns>
        </member>
        <member name="M:LinqToDB.Common.Internal.Cache.IMemoryCache`1.Remove(`0)">
            <summary>
            Removes the object associated with the given key.
            </summary>
            <param name="key">An object identifying the entry.</param>
        </member>
        <member name="T:LinqToDB.Common.Internal.Cache.ISystemClock">
            <summary>
            Abstracts the system clock to facilitate testing.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Internal.Cache.ISystemClock.UtcNow">
            <summary>
            Retrieves the current system time in UTC.
            </summary>
        </member>
        <member name="T:LinqToDB.Common.Internal.Cache.MemoryCache`1">
            <summary>
            An implementation of <see cref="T:LinqToDB.Common.Internal.Cache.IMemoryCache`1"/> using a dictionary to
            store its entries.
            </summary>
        </member>
        <member name="M:LinqToDB.Common.Internal.Cache.MemoryCache`1.#ctor(LinqToDB.Common.Internal.Cache.MemoryCacheOptions)">
            <summary>
            Creates a new <see cref="T:LinqToDB.Common.Internal.Cache.MemoryCache`1"/> instance.
            </summary>
            <param name="optionsAccessor">The options of the cache.</param>
        </member>
        <member name="M:LinqToDB.Common.Internal.Cache.MemoryCache`1.Finalize">
            <summary>
            Cleans up the background collection events.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Internal.Cache.MemoryCache`1.Count">
            <summary>
            Gets the count of the current entries for diagnostic purposes.
            </summary>
        </member>
        <member name="M:LinqToDB.Common.Internal.Cache.MemoryCache`1.CreateEntry(`0)">
            <inheritdoc />
        </member>
        <member name="M:LinqToDB.Common.Internal.Cache.MemoryCache`1.TryGetValue(`0,System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:LinqToDB.Common.Internal.Cache.MemoryCache`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:LinqToDB.Common.Internal.Cache.MemoryCache`1.Compact(System.Double)">
            Remove at least the given percentage (0.10 for 10%) of the total entries (or estimated memory?), according to the following policy:
            1. Remove all expired items.
            2. Bucket by CacheItemPriority.
            3. Least recently used objects.
            ?. Items with the soonest absolute expiration.
            ?. Items with the soonest sliding expiration.
            ?. Larger objects - estimated by object graph size, inaccurate.
        </member>
        <member name="M:LinqToDB.Common.Internal.Cache.MemoryCache`1.Clear">
            <summary>
            Remove all cache entries.
            </summary>
        </member>
        <member name="M:LinqToDB.Common.Internal.Cache.MemoryCache`1.ExpirePriorityBucket(System.Int64@,System.Int64,System.Func{LinqToDB.Common.Internal.Cache.CacheEntry{`0},System.Int64},System.Collections.Generic.List{LinqToDB.Common.Internal.Cache.CacheEntry{`0}},System.Collections.Generic.List{LinqToDB.Common.Internal.Cache.CacheEntry{`0}})">
            Policy:
            1. Least recently used objects.
            ?. Items with the soonest absolute expiration.
            ?. Items with the soonest sliding expiration.
            ?. Larger objects - estimated by object graph size, inaccurate.
        </member>
        <member name="M:LinqToDB.Common.Internal.Cache.MemoryCacheEntryExtensions.SetPriority``1(LinqToDB.Common.Internal.Cache.MemoryCacheEntryOptions{``0},LinqToDB.Common.Internal.Cache.CacheItemPriority)">
            <summary>
            Sets the priority for keeping the cache entry in the cache during a memory pressure tokened cleanup.
            </summary>
            <param name="options">The option on which to set the priority.</param>
            <param name="priority">The <see cref="T:LinqToDB.Common.Internal.Cache.CacheItemPriority"/> to set on the option.</param>
            <returns>The <see cref="T:LinqToDB.Common.Internal.Cache.MemoryCacheEntryOptions`1"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:LinqToDB.Common.Internal.Cache.MemoryCacheEntryExtensions.SetSize``1(LinqToDB.Common.Internal.Cache.MemoryCacheEntryOptions{``0},System.Int64)">
            <summary>
            Sets the size of the cache entry value.
            </summary>
            <param name="options">The options to set the entry size on.</param>
            <param name="size">The size to set on the <see cref="T:LinqToDB.Common.Internal.Cache.MemoryCacheEntryOptions`1"/>.</param>
            <returns>The <see cref="T:LinqToDB.Common.Internal.Cache.MemoryCacheEntryOptions`1"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:LinqToDB.Common.Internal.Cache.MemoryCacheEntryExtensions.AddExpirationToken``1(LinqToDB.Common.Internal.Cache.MemoryCacheEntryOptions{``0},LinqToDB.Common.Internal.Cache.IChangeToken)">
            <summary>
            Expire the cache entry if the given <see cref="T:LinqToDB.Common.Internal.Cache.IChangeToken"/> expires.
            </summary>
            <param name="options">The <see cref="T:LinqToDB.Common.Internal.Cache.MemoryCacheEntryOptions`1"/>.</param>
            <param name="expirationToken">The <see cref="T:LinqToDB.Common.Internal.Cache.IChangeToken"/> that causes the cache entry to expire.</param>
            <returns>The <see cref="T:LinqToDB.Common.Internal.Cache.MemoryCacheEntryOptions`1"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:LinqToDB.Common.Internal.Cache.MemoryCacheEntryExtensions.SetAbsoluteExpiration``1(LinqToDB.Common.Internal.Cache.MemoryCacheEntryOptions{``0},System.TimeSpan)">
            <summary>
            Sets an absolute expiration time, relative to now.
            </summary>
            <param name="options">The <see cref="T:LinqToDB.Common.Internal.Cache.MemoryCacheEntryOptions`1"/>.</param>
            <param name="relative">The expiration time, relative to now.</param>
            <returns>The <see cref="T:LinqToDB.Common.Internal.Cache.MemoryCacheEntryOptions`1"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:LinqToDB.Common.Internal.Cache.MemoryCacheEntryExtensions.SetAbsoluteExpiration``1(LinqToDB.Common.Internal.Cache.MemoryCacheEntryOptions{``0},System.DateTimeOffset)">
            <summary>
            Sets an absolute expiration date for the cache entry.
            </summary>
            <param name="options">The <see cref="T:LinqToDB.Common.Internal.Cache.MemoryCacheEntryOptions`1"/>.</param>
            <param name="absolute">The expiration time, in absolute terms.</param>
            <returns>The <see cref="T:LinqToDB.Common.Internal.Cache.MemoryCacheEntryOptions`1"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:LinqToDB.Common.Internal.Cache.MemoryCacheEntryExtensions.SetSlidingExpiration``1(LinqToDB.Common.Internal.Cache.MemoryCacheEntryOptions{``0},System.TimeSpan)">
            <summary>
            Sets how long the cache entry can be inactive (e.g. not accessed) before it will be removed.
            This will not extend the entry lifetime beyond the absolute expiration (if set).
            </summary>
            <param name="options">The <see cref="T:LinqToDB.Common.Internal.Cache.MemoryCacheEntryOptions`1"/>.</param>
            <param name="offset">The sliding expiration time.</param>
            <returns>The <see cref="T:LinqToDB.Common.Internal.Cache.MemoryCacheEntryOptions`1"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:LinqToDB.Common.Internal.Cache.MemoryCacheEntryExtensions.RegisterPostEvictionCallback``1(LinqToDB.Common.Internal.Cache.MemoryCacheEntryOptions{``0},LinqToDB.Common.Internal.Cache.PostEvictionDelegate{``0})">
            <summary>
            The given callback will be fired after the cache entry is evicted from the cache.
            </summary>
            <param name="options">The <see cref="T:LinqToDB.Common.Internal.Cache.MemoryCacheEntryOptions`1"/>.</param>
            <param name="callback">The callback to register for calling after an entry is evicted.</param>
            <returns>The <see cref="T:LinqToDB.Common.Internal.Cache.MemoryCacheEntryOptions`1"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:LinqToDB.Common.Internal.Cache.MemoryCacheEntryExtensions.RegisterPostEvictionCallback``1(LinqToDB.Common.Internal.Cache.MemoryCacheEntryOptions{``0},LinqToDB.Common.Internal.Cache.PostEvictionDelegate{``0},System.Object)">
            <summary>
            The given callback will be fired after the cache entry is evicted from the cache.
            </summary>
            <param name="options">The <see cref="T:LinqToDB.Common.Internal.Cache.MemoryCacheEntryOptions`1"/>.</param>
            <param name="callback">The callback to register for calling after an entry is evicted.</param>
            <param name="state">The state to pass to the callback.</param>
            <returns>The <see cref="T:LinqToDB.Common.Internal.Cache.MemoryCacheEntryOptions`1"/> so that additional calls can be chained.</returns>
        </member>
        <member name="T:LinqToDB.Common.Internal.Cache.MemoryCacheEntryOptions`1">
            <summary>
            Represents the cache options applied to an entry of the <see cref="T:LinqToDB.Common.Internal.Cache.IMemoryCache`1"/> instance.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Internal.Cache.MemoryCacheEntryOptions`1.AbsoluteExpiration">
            <summary>
            Gets or sets an absolute expiration date for the cache entry.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Internal.Cache.MemoryCacheEntryOptions`1.AbsoluteExpirationRelativeToNow">
            <summary>
            Gets or sets an absolute expiration time, relative to now.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Internal.Cache.MemoryCacheEntryOptions`1.SlidingExpiration">
            <summary>
            Gets or sets how long a cache entry can be inactive (e.g. not accessed) before it will be removed.
            This will not extend the entry lifetime beyond the absolute expiration (if set).
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Internal.Cache.MemoryCacheEntryOptions`1.ExpirationTokens">
            <summary>
            Gets the <see cref="T:LinqToDB.Common.Internal.Cache.IChangeToken"/> instances which cause the cache entry to expire.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Internal.Cache.MemoryCacheEntryOptions`1.PostEvictionCallbacks">
            <summary>
            Gets or sets the callbacks will be fired after the cache entry is evicted from the cache.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Internal.Cache.MemoryCacheEntryOptions`1.Priority">
            <summary>
            Gets or sets the priority for keeping the cache entry in the cache during a
            memory pressure triggered cleanup. The default is <see cref="F:LinqToDB.Common.Internal.Cache.CacheItemPriority.Normal"/>.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Internal.Cache.MemoryCacheEntryOptions`1.Size">
            <summary>
            Gets or sets the size of the cache entry value.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Internal.Cache.MemoryCacheOptions.ExpirationScanFrequency">
            <summary>
            Gets or sets the minimum length of time between successive scans for expired items.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Internal.Cache.MemoryCacheOptions.SizeLimit">
            <summary>
            Gets or sets the maximum size of the cache.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Internal.Cache.MemoryCacheOptions.CompactionPercentage">
            <summary>
            Gets or sets the amount to compact the cache by when the maximum size is exceeded.
            </summary>
        </member>
        <member name="T:LinqToDB.Common.Internal.Cache.PostEvictionDelegate`1">
            <summary>
            Signature of the callback which gets called when a cache entry expires.
            </summary>
            <param name="key">The key of the entry being evicted.</param>
            <param name="value">The value of the entry being evicted.</param>
            <param name="reason">The <see cref="T:LinqToDB.Common.Internal.Cache.EvictionReason"/>.</param>
            <param name="state">The information that was passed when registering the callback.</param>
        </member>
        <member name="T:LinqToDB.Common.Internal.Cache.SystemClock">
            <summary>
            Provides access to the normal system clock.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Internal.Cache.SystemClock.UtcNow">
            <summary>
            Retrieves the current system time in UTC.
            </summary>
        </member>
        <member name="M:LinqToDB.Common.Internal.TypeExtensions.IsNullableType(System.Type)">
            <summary>
            Returns <c>true</c> if type is reference type or <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="type">Type to test.</param>
            <returns><c>true</c> if type is reference type or <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:LinqToDB.Common.Internal.ValueComparer.#ctor(System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression)">
            <summary>
                Creates a new <see cref="T:LinqToDB.Common.Internal.ValueComparer" /> with the given comparison.
            </summary>
            <param name="equalsExpression"> The comparison expression. </param>
            <param name="hashCodeExpression"> The associated hash code generator. </param>
        </member>
        <member name="P:LinqToDB.Common.Internal.ValueComparer.Type">
            <summary>
                The type.
            </summary>
        </member>
        <member name="M:LinqToDB.Common.Internal.ValueComparer.Equals(System.Object,System.Object)">
            <summary>
                Compares the two instances to determine if they are equal.
            </summary>
            <param name="x"> The first instance. </param>
            <param name="y"> The second instance. </param>
            <returns> <see langword="true" /> if they are equal; <see langword="false" /> otherwise. </returns>
        </member>
        <member name="M:LinqToDB.Common.Internal.ValueComparer.GetHashCode(System.Object)">
            <summary>
                Returns the hash code for the given instance.
            </summary>
            <param name="obj"> The instance. </param>
            <returns> The hash code. </returns>
        </member>
        <member name="P:LinqToDB.Common.Internal.ValueComparer.EqualsExpression">
            <summary>
                The comparison expression.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Internal.ValueComparer.HashCodeExpression">
            <summary>
                The hash code expression.
            </summary>
        </member>
        <member name="M:LinqToDB.Common.Internal.ValueComparer.ExtractEqualsBody(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
                Takes <see cref="P:LinqToDB.Common.Internal.ValueComparer.EqualsExpression" /> and replaces the two parameters with the given expressions,
                returning the transformed body.
            </summary>
            <param name="leftExpression"> The new left expression. </param>
            <param name="rightExpression"> The new right expression. </param>
            <returns> The body of the lambda with left and right parameters replaced.</returns>
        </member>
        <member name="M:LinqToDB.Common.Internal.ValueComparer.CreateDefault(System.Type,System.Boolean)">
            <summary>
                Creates a default <see cref="T:LinqToDB.Common.Internal.ValueComparer`1" /> for the given type.
            </summary>
            <param name="type"> The type. </param>
            <param name="favorStructuralComparisons">
                If <see langword="true" />, then <see cref="T:System.Collections.IStructuralEquatable" /> will be used if the type
                implements it. This is usually used when byte arrays act as keys.
            </param>
            <returns> The <see cref="T:LinqToDB.Common.Internal.ValueComparer`1" />. </returns>
        </member>
        <member name="M:LinqToDB.Common.Internal.ValueComparer`1.#ctor(System.Boolean)">
            <summary>
                Creates a new <see cref="T:LinqToDB.Common.Internal.ValueComparer`1" /> with a default comparison
                expression and a shallow copy for the snapshot.
            </summary>
            <param name="favorStructuralComparisons">
                If <see langword="true" />, then EF will use <see cref="T:System.Collections.IStructuralEquatable" /> if the type
                implements it. This is usually used when byte arrays act as keys.
            </param>
        </member>
        <member name="M:LinqToDB.Common.Internal.ValueComparer`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})">
            <summary>
                Creates a new <see cref="T:LinqToDB.Common.Internal.ValueComparer`1" /> with the given comparison expression.
                A shallow copy will be used for the snapshot.
            </summary>
            <param name="equalsExpression"> The comparison expression. </param>
            <param name="hashCodeExpression"> The associated hash code generator. </param>
        </member>
        <member name="M:LinqToDB.Common.Internal.ValueComparer`1.CreateDefaultEqualsExpression">
            <summary>
                Creates an expression for equality.
            </summary>
            <returns> The equality expression. </returns>
        </member>
        <member name="M:LinqToDB.Common.Internal.ValueComparer`1.CreateDefaultHashCodeExpression(System.Boolean)">
            <summary>
                Creates an expression for generating a hash code.
            </summary>
            <param name="favorStructuralComparisons">
                If <see langword="true" />, then <see cref="T:System.Collections.IStructuralEquatable" /> is used if the type implements it.
            </param>
            <returns> The hash code expression. </returns>
        </member>
        <member name="M:LinqToDB.Common.Internal.ValueComparer`1.Equals(System.Object,System.Object)">
            <summary>
                Compares the two instances to determine if they are equal.
            </summary>
            <param name="x"> The first instance. </param>
            <param name="y"> The second instance. </param>
            <returns> <see langword="true" /> if they are equal; <see langword="false" /> otherwise. </returns>
        </member>
        <member name="M:LinqToDB.Common.Internal.ValueComparer`1.GetHashCode(System.Object)">
            <summary>
                Returns the hash code for the given instance.
            </summary>
            <param name="obj"> The instance. </param>
            <returns> The hash code. </returns>
        </member>
        <member name="M:LinqToDB.Common.Internal.ValueComparer`1.Equals(`0,`0)">
            <summary>
                Compares the two instances to determine if they are equal.
            </summary>
            <param name="x"> The first instance. </param>
            <param name="y"> The second instance. </param>
            <returns> <see langword="true" /> if they are equal; <see langword="false" /> otherwise. </returns>
        </member>
        <member name="M:LinqToDB.Common.Internal.ValueComparer`1.GetHashCode(`0)">
            <summary>
                Returns the hash code for the given instance.
            </summary>
            <param name="obj"> The instance. </param>
            <returns> The hash code. </returns>
        </member>
        <member name="P:LinqToDB.Common.Internal.ValueComparer`1.Type">
            <summary>
                The type.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Internal.ValueComparer`1.EqualsExpression">
            <summary>
                The comparison expression.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Internal.ValueComparer`1.HashCodeExpression">
            <summary>
                The hash code expression.
            </summary>
        </member>
        <member name="T:LinqToDB.Common.IValueConverter">
            <summary>
                Defines conversions from an object of one type in a model to an object of the same or
                different type in the database.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.IValueConverter.HandlesNulls">
            <summary>
                Identifies that convert expressions can handle null values.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.IValueConverter.FromProviderExpression">
            <summary>
                Gets the expression to convert objects when reading data from the database.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.IValueConverter.ToProviderExpression">
            <summary>
                Gets the expression to convert objects when writing data to the database.
            </summary>
        </member>
        <member name="T:LinqToDB.Common.LinqToDBConvertException">
            <summary>
            Defines the base class for the namespace exceptions.
            </summary>
            <remarks>
            This class is the base class for exceptions that may occur during
            execution of the namespace members.
            </remarks>
        </member>
        <member name="M:LinqToDB.Common.LinqToDBConvertException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LinqToDB.Common.LinqToDBConvertException"/> class.
            </summary>
            <remarks>
            This constructor initializes the <see cref="P:System.Exception.Message"/>
            property of the new instance such as "A Build Type exception has occurred."
            </remarks>
        </member>
        <member name="M:LinqToDB.Common.LinqToDBConvertException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LinqToDB.Common.LinqToDBConvertException"/> class
            with the specified error message.
            </summary>
            <param name="message">The message to display to the client when the
            exception is thrown.</param>
            <seealso cref="P:System.Exception.Message"/>
        </member>
        <member name="M:LinqToDB.Common.LinqToDBConvertException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:LinqToDB.Common.LinqToDBConvertException"/> class
            with the specified error message and InnerException property.
            </summary>
            <param name="message">The message to display to the client when the
            exception is thrown.</param>
            <param name="innerException">The InnerException, if any, that threw
            the current exception.</param>
            <seealso cref="P:System.Exception.Message"/>
            <seealso cref="P:System.Exception.InnerException"/>
        </member>
        <member name="M:LinqToDB.Common.LinqToDBConvertException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:LinqToDB.Common.LinqToDBConvertException"/> class
            with the specified InnerException property.
            </summary>
            <param name="innerException">The InnerException, if any, that threw
            the current exception.</param>
            <seealso cref="P:System.Exception.InnerException"/>
        </member>
        <member name="M:LinqToDB.Common.LinqToDBConvertException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:LinqToDB.Common.LinqToDBConvertException"/> class
            with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or
            destination.</param>
            <remarks>This constructor is called during deserialization to
            reconstitute the exception object transmitted over a stream.</remarks>
        </member>
        <member name="P:LinqToDB.Common.LinqToDBConvertException.ColumnName">
            <summary>
            Gets name of misconfigured column, which caused exception.
            </summary>
        </member>
        <member name="M:LinqToDB.Common.Logging.LoggingExtensions.WriteTraceLine(LinqToDB.IDataContext,System.String,System.String,System.Diagnostics.TraceLevel)">
            <summary>
            Write line to trace associated with provided context.
            </summary>
            <param name="context">Context instance.</param>
            <param name="message">Message text.</param>
            <param name="category">Message category.</param>
            <param name="level">Trace level.</param>
        </member>
        <member name="M:LinqToDB.Common.Logging.LoggingExtensions.GetTraceSwitch(LinqToDB.IDataContext)">
            <summary>
            Returns <see cref="T:System.Diagnostics.TraceSwitch"/> tracing options, used by provided context.
            </summary>
            <param name="context">Context instance.</param>
            <returns><see cref="T:System.Diagnostics.TraceSwitch"/> instance, used for tracing by provided context.</returns>
        </member>
        <member name="T:LinqToDB.Common.Option`1">
            <summary>
            Option type implementation.
            <a href="https://en.wikipedia.org/wiki/Option_type">Option type</a>.
            </summary>
            <typeparam name="T">Value type.</typeparam>
        </member>
        <member name="P:LinqToDB.Common.Option`1.HasValue">
            <summary>
            Returns <c>true</c> if current option stores some value instead of <see cref="F:LinqToDB.Common.Option`1.None"/>.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Option`1.Value">
            <summary>
            Gets value, stored in option.
            </summary>
        </member>
        <member name="M:LinqToDB.Common.Option`1.Some(`0)">
            <summary>
            Creates option with value.
            </summary>
            <param name="value">Option's value.</param>
            <returns>Option instance.</returns>
        </member>
        <member name="F:LinqToDB.Common.Option`1.None">
            <summary>
            Gets <see cref="F:LinqToDB.Common.Option`1.None"/> value for option.
            </summary>
        </member>
        <member name="T:LinqToDB.Common.RawSqlString">
            <summary>
                A string representing a raw SQL query. This type enables overload resolution between
                the regular and interpolated <see cref="M:LinqToDB.DataExtensions.FromSql``1(LinqToDB.IDataContext,LinqToDB.Common.RawSqlString,System.Object[])" />.
            </summary>
        </member>
        <member name="M:LinqToDB.Common.RawSqlString.op_Implicit(System.String)~LinqToDB.Common.RawSqlString">
            <summary>
                Implicitly converts a <see cref="T:System.String" /> to a <see cref="T:LinqToDB.Common.RawSqlString" />
            </summary>
            <param name="s"> The string. </param>
        </member>
        <member name="M:LinqToDB.Common.RawSqlString.op_Implicit(System.FormattableString)~LinqToDB.Common.RawSqlString">
            <summary>
                Implicitly converts a <see cref="T:System.FormattableString" /> to a <see cref="T:LinqToDB.Common.RawSqlString" />
            </summary>
            <param name="fs"> The string format. </param>
        </member>
        <member name="M:LinqToDB.Common.RawSqlString.#ctor(System.String)">
            <summary>
                Constructs a <see cref="T:LinqToDB.Common.RawSqlString" /> from a <see cref="T:System.String" />
            </summary>
            <param name="s"> The string. </param>
        </member>
        <member name="P:LinqToDB.Common.RawSqlString.Format">
            <summary>
                The string format.
            </summary>
        </member>
        <member name="M:LinqToDB.Common.StringBuilderExtensions.AppendByteArrayAsHexViaLookup32(System.Text.StringBuilder,System.Byte[])">
            <summary>
            Appends an array of bytes to a <see cref="T:System.Text.StringBuilder"/> in hex (i.e. 255->FF)
            format utilizing a static lookup table to minimize allocations.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to append to</param>
            <param name="bytes">The byte array to append in hex</param>
            <remarks>
            The implementation here was chosen based on:
            https://stackoverflow.com/a/624379/2937845
            Which indicated that  https://stackoverflow.com/a/24343727/2937845's
            implementation of ByteArrayToHexViaLookup32 was the fastest method
            not involving unsafe
            </remarks>
        </member>
        <member name="T:LinqToDB.Common.Tools">
            <summary>
            Various general-purpose helpers.
            </summary>
        </member>
        <member name="M:LinqToDB.Common.Tools.IsNullOrEmpty(System.Collections.ICollection)">
            <summary>
            Checks that collection is not null and have at least one element.
            </summary>
            <param name="array">Collection to check.</param>
            <returns><c>true</c> if collection is null or contains no elements, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:LinqToDB.Common.Tools.GetPath(System.Reflection.Assembly)">
            <summary>
            Returns path to original directory with provided assembly.
            </summary>
            <param name="assembly">Assembly.</param>
            <returns>Assembly directory path.</returns>
        </member>
        <member name="M:LinqToDB.Common.Tools.GetFileName(System.Reflection.Assembly)">
            <summary>
            Returns original path to assembly file.
            </summary>
            <param name="assembly">Assembly.</param>
            <returns>Assembly file path.</returns>
        </member>
        <member name="M:LinqToDB.Common.Tools.ClearAllCaches">
            <summary>
            Clears all linq2db caches.
            </summary>
        </member>
        <member name="T:LinqToDB.Common.TopoSorting">
            <summary>
            This alogrithm is partially borrowed from CodeJam library.
            Modified to remove dependencies to the library.
            </summary>
        </member>
        <member name="M:LinqToDB.Common.TopoSorting.TopoSort``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Performs topological sort on <paramref name="source"/>.
            </summary>
            <param name="source">Collection to sort.</param>
            <param name="context"><paramref name="dependsOnGetter"/> delegate context object.</param>
            <param name="dependsOnGetter">Function that returns items dependent on specified item.</param>
            <returns>Topologically sorted list of items in <paramref name="source"/>.</returns>
        </member>
        <member name="M:LinqToDB.Common.TopoSorting.TopoSort``2(System.Collections.Generic.ICollection{``0},``1,System.Func{``1,``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Performs topological sort on <paramref name="source"/>.
            </summary>
            <param name="source">Collection to sort.</param>
            <param name="context"><paramref name="dependsOnGetter"/> delegate context object.</param>
            <param name="dependsOnGetter">Function that returns items dependent on specified item.</param>
            <returns>Topologically sorted list of items in <paramref name="source"/>.</returns>
        </member>
        <member name="M:LinqToDB.Common.TopoSorting.TopoSort``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Performs topological sort on <paramref name="source"/>.
            </summary>
            <param name="source">Collection to sort.</param>
            <param name="context"><paramref name="dependsOnGetter"/> delegate context object.</param>
            <param name="dependsOnGetter">Function that returns items dependent on specified item.</param>
            <param name="equalityComparer">Equality comparer for item comparison</param>
            <returns>Topologically sorted list of items in <paramref name="source"/>.</returns>
        </member>
        <member name="M:LinqToDB.Common.TopoSorting.TopoSort``2(System.Collections.Generic.ICollection{``0},``1,System.Func{``1,``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Performs topological sort on <paramref name="source"/>.
            </summary>
            <param name="source">Collection to sort.</param>
            <param name="context"><paramref name="dependsOnGetter"/> delegate context object.</param>
            <param name="dependsOnGetter">Function that returns items dependent on specified item.</param>
            <param name="equalityComparer">Equality comparer for item comparison</param>
            <returns>Topologically sorted list of items in <paramref name="source"/>.</returns>
        </member>
        <member name="M:LinqToDB.Common.TopoSorting.GroupTopoSort``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Performs topological sort on <paramref name="source"/>.
            </summary>
            <param name="source">Collection to sort.</param>
            <param name="context"><paramref name="dependsOnGetter"/> delegate context object.</param>
            <param name="dependsOnGetter">Function that returns items dependent on specified item.</param>
            <returns>Topologically sorted list of items in <paramref name="source"/> separated by dependency level.</returns>
        </member>
        <member name="M:LinqToDB.Common.TopoSorting.GroupTopoSort``2(System.Collections.Generic.ICollection{``0},``1,System.Func{``1,``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Performs topological sort on <paramref name="source"/>.
            </summary>
            <param name="source">Collection to sort.</param>
            <param name="context"><paramref name="dependsOnGetter"/> delegate context object.</param>
            <param name="dependsOnGetter">Function that returns items dependent on specified item.</param>
            <returns>Topologically sorted list of items in <paramref name="source"/> separated by dependency level.</returns>
        </member>
        <member name="M:LinqToDB.Common.TopoSorting.GroupTopoSort``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Performs topological sort on <paramref name="source"/>.
            </summary>
            <param name="source">Collection to sort.</param>
            <param name="context"><paramref name="dependsOnGetter"/> delegate context object.</param>
            <param name="dependsOnGetter">Function that returns items dependent on specified item.</param>
            <param name="equalityComparer">Equality comparer for item comparison</param>
            <returns>Topologically sorted list of items in <paramref name="source"/> separated by dependency level.</returns>
        </member>
        <member name="M:LinqToDB.Common.TopoSorting.GroupTopoSort``2(System.Collections.Generic.ICollection{``0},``1,System.Func{``1,``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Performs topological sort on <paramref name="source"/>.
            </summary>
            <param name="source">Collection to sort.</param>
            <param name="context"><paramref name="dependsOnGetter"/> delegate context object.</param>
            <param name="dependsOnGetter">Function that returns items dependent on specified item.</param>
            <param name="equalityComparer">Equality comparer for item comparison</param>
            <returns>
            Topologically sorted list of items in <paramref name="source"/>, separated by dependency level.
            </returns>
        </member>
        <member name="M:LinqToDB.Common.TypeHelper.RegisterTypeRemapping(System.Type,System.Type,System.Type[],System.Collections.Generic.Dictionary{System.Type,System.Type})">
            <summary>
            Registers type transformation for generic arguments.
            </summary>
            <param name="templateType">Type from generic definition.</param>
            <param name="replaced">Concrete type which needs mapping to generic definition.</param>
            <param name="templateArguments">Generic arguments of generic definition.</param>
            <param name="typeMappings">Accumulator dictionary for registered mappings.</param>
        </member>
        <member name="M:LinqToDB.Common.TypeHelper.EnumTypeRemapping(System.Type,System.Type,System.Type[])">
            <summary>
            Enumerates type transformation for generic arguments.
            </summary>
            <param name="templateType">Type from generic definition.</param>
            <param name="replaced">Concrete type which needs mapping to generic definition.</param>
            <param name="templateArguments">Generic arguments of generic definition.</param>
        </member>
        <member name="M:LinqToDB.Common.TypeHelper.MakeMethodCall(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
            <summary>
            Creates MethodCallExpression without specifying generic parameters.
            </summary>
            <param name="methodInfo"></param>
            <param name="arguments"></param>
            <returns>New MethodCallExpression.</returns>
        </member>
        <member name="M:LinqToDB.Common.TypeHelper.MakeGenericMethod(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
            <summary>
            Makes generic method based on type of arguments.
            </summary>
            <param name="methodInfo"></param>
            <param name="arguments"></param>
            <returns>New MethodCallExpression.</returns>
        </member>
        <member name="T:LinqToDB.ComWrapper">
            <summary>
            This class is used as COM object wrapper instead of dynamic keyword, as dynamic for COM is not supported on .net core till v5.
            See original issue https://github.com/dotnet/runtime/issues/12587.
            </summary>
        </member>
        <member name="M:LinqToDB.ComWrapper.Create(System.String)">
            <summary>
            Caller method should use [SecuritySafeCritical] attribute. We don't put it here, as
            <paramref name="progID"/> value is not static here.
            </summary>
            <param name="progID">ID of COM class to create.</param>
            <returns>Dynamic disposable(!) wrapper over COM object.</returns>
        </member>
        <member name="T:LinqToDB.CompiledQuery">
            <summary>
            Provides API for compilation and caching of queries for reuse.
            </summary>
        </member>
        <member name="M:LinqToDB.CompiledQuery.Invoke``2(``0)">
            <summary>
            Executes compiled query against provided database connection context.
            </summary>
            <typeparam name="TDC">Database connection context type.</typeparam>
            <typeparam name="TResult">Query result type.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <returns>Query execution result.</returns>
        </member>
        <member name="M:LinqToDB.CompiledQuery.Invoke``3(``0,``1)">
            <summary>
            Executes compiled query with one parameter against provided database connection context.
            </summary>
            <typeparam name="TDC">Database connection context type.</typeparam>
            <typeparam name="T1">Query parameter type.</typeparam>
            <typeparam name="TResult">Query result type.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="arg1">Query parameter value.</param>
            <returns>Query execution result.</returns>
        </member>
        <member name="M:LinqToDB.CompiledQuery.Invoke``4(``0,``1,``2)">
            <summary>
            Executes compiled query with two parameters against provided database connection context.
            </summary>
            <typeparam name="TDC">Database connection context type.</typeparam>
            <typeparam name="T1">First query parameter type.</typeparam>
            <typeparam name="T2">Second query parameter type.</typeparam>
            <typeparam name="TResult">Query result type.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="arg1">First query parameter value.</param>
            <param name="arg2">Second query parameter value.</param>
            <returns>Query execution result.</returns>
        </member>
        <member name="M:LinqToDB.CompiledQuery.Invoke``5(``0,``1,``2,``3)">
            <summary>
            Executes compiled query with three parameters against provided database connection context.
            </summary>
            <typeparam name="TDC">Database connection context type.</typeparam>
            <typeparam name="T1">First query parameter type.</typeparam>
            <typeparam name="T2">Second query parameter type.</typeparam>
            <typeparam name="T3">Third query parameter type.</typeparam>
            <typeparam name="TResult">Query result type.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="arg1">First query parameter value.</param>
            <param name="arg2">Second query parameter value.</param>
            <param name="arg3">Third query parameter value.</param>
            <returns>Query execution result.</returns>
        </member>
        <member name="M:LinqToDB.CompiledQuery.Invoke``6(``0,``1,``2,``3,``4)">
            <summary>
            Executes compiled query with four parameters against provided database connection context.
            </summary>
            <typeparam name="TDC">Database connection context type.</typeparam>
            <typeparam name="T1">First query parameter type.</typeparam>
            <typeparam name="T2">Second query parameter type.</typeparam>
            <typeparam name="T3">Third query parameter type.</typeparam>
            <typeparam name="T4">Forth query parameter type.</typeparam>
            <typeparam name="TResult">Query result type.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="arg1">First query parameter value.</param>
            <param name="arg2">Second query parameter value.</param>
            <param name="arg3">Third query parameter value.</param>
            <param name="arg4">Forth query parameter value.</param>
            <returns>Query execution result.</returns>
        </member>
        <member name="M:LinqToDB.CompiledQuery.Invoke``7(``0,``1,``2,``3,``4,``5)">
            <summary>
            Executes compiled query with five parameters against provided database connection context.
            </summary>
            <typeparam name="TDC">Database connection context type.</typeparam>
            <typeparam name="T1">First query parameter type.</typeparam>
            <typeparam name="T2">Second query parameter type.</typeparam>
            <typeparam name="T3">Third query parameter type.</typeparam>
            <typeparam name="T4">Forth query parameter type.</typeparam>
            <typeparam name="T5">Fifth query parameter type.</typeparam>
            <typeparam name="TResult">Query result type.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="arg1">First query parameter value.</param>
            <param name="arg2">Second query parameter value.</param>
            <param name="arg3">Third query parameter value.</param>
            <param name="arg4">Forth query parameter value.</param>
            <param name="arg5">Fifth query parameter value.</param>
            <returns>Query execution result.</returns>
        </member>
        <member name="M:LinqToDB.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Compiles the query.
            </summary>
            <returns>
            A generic delegate that represents the compiled query.
            </returns>
            <param name="query">The query expression to be compiled.</param>
            <typeparam name="TDC">Type of data context parameter, passed to compiled query.</typeparam>
            <typeparam name="TResult">Query result type.</typeparam>
        </member>
        <member name="M:LinqToDB.CompiledQuery.Compile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
            Compiles the query with parameter.
            </summary>
            <returns>
            A generic delegate that represents the compiled query.
            </returns>
            <param name="query">The query expression to be compiled.</param>
            <typeparam name="TDC">Type of data context parameter, passed to compiled query.</typeparam>
            <typeparam name="TArg1">Type of parameter for compiled query.</typeparam>
            <typeparam name="TResult">Query result type.</typeparam>
        </member>
        <member name="M:LinqToDB.CompiledQuery.Compile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
            <summary>
            Compiles the query with two parameters.
            </summary>
            <returns>
            A generic delegate that represents the compiled query.
            </returns>
            <param name="query">The query expression to be compiled.</param>
            <typeparam name="TDC">Type of data context parameter, passed to compiled query.</typeparam>
            <typeparam name="TArg1">Type of first parameter for compiled query.</typeparam>
            <typeparam name="TArg2">Type of second parameter for compiled query.</typeparam>
            <typeparam name="TResult">Query result type.</typeparam>
        </member>
        <member name="M:LinqToDB.CompiledQuery.Compile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
            <summary>
            Compiles the query with three parameters.
            </summary>
            <returns>
            A generic delegate that represents the compiled query.
            </returns>
            <param name="query">The query expression to be compiled.</param>
            <typeparam name="TDC">Type of data context parameter, passed to compiled query.</typeparam>
            <typeparam name="TArg1">Type of first parameter for compiled query.</typeparam>
            <typeparam name="TArg2">Type of second parameter for compiled query.</typeparam>
            <typeparam name="TArg3">Type of third parameter for compiled query.</typeparam>
            <typeparam name="TResult">Query result type.</typeparam>
        </member>
        <member name="M:LinqToDB.CompiledQuery.Compile``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})">
            <summary>
            Compiles the query with four parameters.
            </summary>
            <returns>
            A generic delegate that represents the compiled query.
            </returns>
            <param name="query">The query expression to be compiled.</param>
            <typeparam name="TDC">Type of data context parameter, passed to compiled query.</typeparam>
            <typeparam name="TArg1">Type of first parameter for compiled query.</typeparam>
            <typeparam name="TArg2">Type of second parameter for compiled query.</typeparam>
            <typeparam name="TArg3">Type of third parameter for compiled query.</typeparam>
            <typeparam name="TArg4">Type of forth parameter for compiled query.</typeparam>
            <typeparam name="TResult">Query result type.</typeparam>
        </member>
        <member name="M:LinqToDB.CompiledQuery.Compile``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
            Compiles the query with five parameters.
            </summary>
            <returns>
            A generic delegate that represents the compiled query.
            </returns>
            <param name="query">The query expression to be compiled.</param>
            <typeparam name="TDC">Type of data context parameter, passed to compiled query.</typeparam>
            <typeparam name="TArg1">Type of first parameter for compiled query.</typeparam>
            <typeparam name="TArg2">Type of second parameter for compiled query.</typeparam>
            <typeparam name="TArg3">Type of third parameter for compiled query.</typeparam>
            <typeparam name="TArg4">Type of forth parameter for compiled query.</typeparam>
            <typeparam name="TArg5">Type of fifth parameter for compiled query.</typeparam>
            <typeparam name="TResult">Query result type.</typeparam>
        </member>
        <member name="T:LinqToDB.Configuration.ConnectionStringSettings">
            <summary>
            Provides explicitly-defined <see cref="T:LinqToDB.Configuration.IConnectionStringSettings"/> implementation.
            </summary>
        </member>
        <member name="T:LinqToDB.Configuration.IConnectionStringSettings">
            <summary>
            Connection string configuration provider.
            </summary>
        </member>
        <member name="P:LinqToDB.Configuration.IConnectionStringSettings.ConnectionString">
            <summary>
            Gets connection string.
            </summary>
        </member>
        <member name="P:LinqToDB.Configuration.IConnectionStringSettings.Name">
            <summary>
            Gets connection configuration name.
            </summary>
        </member>
        <member name="P:LinqToDB.Configuration.IConnectionStringSettings.ProviderName">
            <summary>
            Gets data provider configuration name.
            </summary>
        </member>
        <member name="P:LinqToDB.Configuration.IConnectionStringSettings.IsGlobal">
            <summary>
            Is this connection configuration defined on global level (machine.config) or on application level.
            </summary>
        </member>
        <member name="T:LinqToDB.Configuration.IDataProviderSettings">
            <summary>
            Data provider configuration provider.
            </summary>
        </member>
        <member name="P:LinqToDB.Configuration.IDataProviderSettings.TypeName">
            <summary>
            Gets an assembly qualified type name of this data provider.
            </summary>
        </member>
        <member name="P:LinqToDB.Configuration.IDataProviderSettings.Name">
            <summary>
            Gets a name of this data provider configuration.
            </summary>
        </member>
        <member name="P:LinqToDB.Configuration.IDataProviderSettings.Default">
            <summary>
            Gets a value indicating whether the provider is default.
            </summary>
        </member>
        <member name="P:LinqToDB.Configuration.IDataProviderSettings.Attributes">
            <summary>
            Extra provider-specific parameters.
            <para>
            Sybase:
            <list><item>assemblyName - Sybase provider assembly name.</item></list>
            </para>
            <para>
            SAP HANA:
            <list><item>assemblyName - SAP HANA provider assembly name.</item></list>
            </para>
            <para>
            Oracle:
            <list><item>assemblyName - Oracle provider assembly name.</item></list>
            </para>
            <para>
            SQL Server:
            <list>
            <item>assemblyName - provider assembly name. Recognized values:
            <c>"System.Data"</c>, <c>"System.Data.SqlClient"</c>, <c>"Microsoft.Data.SqlClient"</c>.
            </item>
            <item>version - T-SQL support level, recognized values:
            <c>"2005"</c>, <c>"2008"</c>, <c>"2012"</c>, <c>"2014"</c>, <c>"2016"</c>, <c>"2017"</c>, <c>"2018"</c>. Default: <c>"2008"</c>.
            </item>
            </list>
            </para>
            <para>
            DB2:
            <list><item>version - DB2 platform, recognized values:
            <c>"zOS"</c> or <c>"z/OS"</c> - DB2 for z/OS. Default platform - DB2 LUW.</item></list>
            </para>
            </summary>
        </member>
        <member name="T:LinqToDB.Configuration.ILinqToDBSettings">
            <summary>
            Settings provider interface.
            </summary>
        </member>
        <member name="P:LinqToDB.Configuration.ILinqToDBSettings.DataProviders">
            <summary>
            Gets list of data provider settings.
            </summary>
        </member>
        <member name="P:LinqToDB.Configuration.ILinqToDBSettings.DefaultConfiguration">
            <summary>
            Gets name of default connection configuration.
            </summary>
        </member>
        <member name="P:LinqToDB.Configuration.ILinqToDBSettings.DefaultDataProvider">
            <summary>
            Gets name of default data provider configuration.
            </summary>
        </member>
        <member name="P:LinqToDB.Configuration.ILinqToDBSettings.ConnectionStrings">
            <summary>
            Gets list of connection configurations.
            </summary>
        </member>
        <member name="T:LinqToDB.Configuration.IProxy`1">
            <summary>
            Proxy object interface.
            </summary>
            <typeparam name="T">Proxyfied type.</typeparam>
        </member>
        <member name="P:LinqToDB.Configuration.IProxy`1.UnderlyingObject">
            <summary>
            Proxified object.
            </summary>
        </member>
        <member name="T:LinqToDB.Configuration.Proxy">
            <summary>
            Proxy helpers.
            </summary>
        </member>
        <member name="M:LinqToDB.Configuration.Proxy.GetUnderlyingObject``1(``0)">
            <summary>
            Unwraps all proxies, applied to passed object and returns unproxyfied value.
            </summary>
            <typeparam name="T">Type of proxified object.</typeparam>
            <param name="obj">Object, that must be stripped of proxies.</param>
            <returns>Unproxified object.</returns>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptions.#ctor">
            <summary>
            constructor for unit tests
            </summary>
        </member>
        <member name="P:LinqToDB.Configuration.LinqToDBConnectionOptions.MappingSchema">
            <summary>
            Gets <see cref="P:LinqToDB.Configuration.LinqToDBConnectionOptions.MappingSchema"/> instance to use with <see cref="T:LinqToDB.Data.DataConnection"/> instance.
            </summary>
        </member>
        <member name="P:LinqToDB.Configuration.LinqToDBConnectionOptions.DataProvider">
            <summary>
            Gets <see cref="T:LinqToDB.DataProvider.IDataProvider"/> instance to use with <see cref="T:LinqToDB.Data.DataConnection"/> instance.
            </summary>
        </member>
        <member name="P:LinqToDB.Configuration.LinqToDBConnectionOptions.DbConnection">
            <summary>
            Gets <see cref="T:System.Data.Common.DbConnection"/> instance to use with <see cref="T:LinqToDB.Data.DataConnection"/> instance.
            </summary>
        </member>
        <member name="P:LinqToDB.Configuration.LinqToDBConnectionOptions.DisposeConnection">
            <summary>
            Gets <see cref="P:LinqToDB.Configuration.LinqToDBConnectionOptions.DbConnection"/> ownership status for <see cref="T:LinqToDB.Data.DataConnection"/> instance.
            If <c>true</c>, <see cref="T:LinqToDB.Data.DataConnection"/> will dispose provided connection on own dispose.
            </summary>
        </member>
        <member name="P:LinqToDB.Configuration.LinqToDBConnectionOptions.ConfigurationString">
            <summary>
            Gets configuration string name to use with <see cref="T:LinqToDB.Data.DataConnection"/> instance.
            </summary>
        </member>
        <member name="P:LinqToDB.Configuration.LinqToDBConnectionOptions.ProviderName">
            <summary>
            Gets provider name to use with <see cref="T:LinqToDB.Data.DataConnection"/> instance.
            </summary>
        </member>
        <member name="P:LinqToDB.Configuration.LinqToDBConnectionOptions.ConnectionString">
            <summary>
            Gets connection string to use with <see cref="T:LinqToDB.Data.DataConnection"/> instance.
            </summary>
        </member>
        <member name="P:LinqToDB.Configuration.LinqToDBConnectionOptions.ConnectionFactory">
            <summary>
            Gets connection factory to use with <see cref="T:LinqToDB.Data.DataConnection"/> instance.
            </summary>
        </member>
        <member name="P:LinqToDB.Configuration.LinqToDBConnectionOptions.DbTransaction">
            <summary>
            Gets <see cref="P:LinqToDB.Configuration.LinqToDBConnectionOptions.DbTransaction"/> instance to use with <see cref="T:LinqToDB.Data.DataConnection"/> instance.
            </summary>
        </member>
        <member name="P:LinqToDB.Configuration.LinqToDBConnectionOptions.OnTrace">
            <summary>
            Gets custom trace method to use with <see cref="T:LinqToDB.Data.DataConnection"/> instance.
            </summary>
        </member>
        <member name="P:LinqToDB.Configuration.LinqToDBConnectionOptions.TraceLevel">
            <summary>
            Gets custom trace level to use with <see cref="T:LinqToDB.Data.DataConnection"/> instance.
            </summary>
        </member>
        <member name="P:LinqToDB.Configuration.LinqToDBConnectionOptions.WriteTrace">
            <summary>
            Gets custom trace writer to use with <see cref="T:LinqToDB.Data.DataConnection"/> instance.
            </summary>
        </member>
        <member name="P:LinqToDB.Configuration.LinqToDBConnectionOptions.Interceptors">
            <summary>
            Gets list of interceptors to use with <see cref="T:LinqToDB.Data.DataConnection"/> instance.
            </summary>
        </member>
        <member name="T:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder">
            <summary>
            Used to build <see cref="T:LinqToDB.Configuration.LinqToDBConnectionOptions"/>
            which is used by <see cref="T:LinqToDB.Data.DataConnection"/>
            to determine connection settings.
            </summary>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder.Build``1">
            <summary>
            Build the immutable options used by the database.
            </summary>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder.Build">
            <summary>
            Build the immutable options used by the database.
            </summary>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder.UseConnectionString(System.String,System.String)">
            <summary>
            Configure the database to use the specified provider and connection string.
            </summary>
            <param name="providerName">See <see cref="T:LinqToDB.ProviderName"/> for Default providers.</param>
            <param name="connectionString">Database specific connections string.</param>
            <returns>The builder instance so calls can be chained.</returns>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder.UseConnectionString(LinqToDB.DataProvider.IDataProvider,System.String)">
            <summary>
            Configure the database to use the specified provider and connection string.
            </summary>
            <param name="dataProvider">Used by the connection to determine functionality when executing commands/queries.</param>
            <param name="connectionString">Database specific connections string.</param>
            <returns>The builder instance so calls can be chained.</returns>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder.UseConfigurationString(System.String)">
            <summary>
            Configure the database to use the specified configuration string, Configurations can be added by calling <see cref="M:LinqToDB.Data.DataConnection.AddConfiguration(System.String,System.String,LinqToDB.DataProvider.IDataProvider)"/>
            </summary>
            <param name="configurationString">Used used to lookup configuration, must be specified before the Database is created.</param>
            <returns>The builder instance so calls can be chained.</returns>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder.UseConnectionFactory(LinqToDB.DataProvider.IDataProvider,System.Func{System.Data.Common.DbConnection})">
            <summary>
            Configure the database to use the specified provider and callback as an <see cref="P:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder.DbConnection"/> factory.
            </summary>
            <param name="dataProvider">Used by the connection to determine functionality when executing commands/queries.</param>
            <param name="connectionFactory">Factory function used to obtain the connection.</param>
            <returns>The builder instance so calls can be chained.</returns>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder.UseConnection(LinqToDB.DataProvider.IDataProvider,System.Data.Common.DbConnection,System.Boolean)">
            <summary>
            Configure the database to use the specified provider and an existing <see cref="P:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder.DbConnection"/>.
            </summary>
            <param name="dataProvider">Used by the connection to determine functionality when executing commands/queries.</param>
            <param name="connection">Existing connection, can be open or closed, will be opened automatically if closed.</param>
            <param name="disposeConnection">Indicates if the connection should be disposed when the context is disposed.</param>
            <returns>The builder instance so calls can be chained.</returns>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder.UseTransaction(LinqToDB.DataProvider.IDataProvider,System.Data.Common.DbTransaction)">
            <summary>
            Configure the database to use the specified provider and an existing <see cref="T:System.Data.Common.DbTransaction"/>.
            </summary>
            <param name="dataProvider">Used by the connection to determine functionality when executing commands/queries.</param>
            <param name="transaction">Existing transaction.</param>
            <returns>The builder instance so calls can be chained.</returns>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder.UseMappingSchema(LinqToDB.Mapping.MappingSchema)">
            <summary>
            Configure the database to use the specified mapping schema.
            </summary>
            <param name="mappingSchema">Used to define the mapping between sql and classes.</param>
            <returns>The builder instance so calls can be chained.</returns>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder.UseDataProvider(LinqToDB.DataProvider.IDataProvider)">
            <summary>
            Configure the database to use the specified provider, can override providers previously specified.
            </summary>
            <param name="dataProvider">Used by the connection to determine functionality when executing commands/queries.</param>
            <returns>The builder instance so calls can be chained.</returns>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder.WithTraceLevel(System.Diagnostics.TraceLevel)">
            <summary>
            Configure the database to use specified trace level.
            </summary>
            <returns>The builder instance so calls can be chained.</returns>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder.WithTracing(System.Action{LinqToDB.Data.TraceInfo})">
            <summary>
            Configure the database to use the specified callback for logging or tracing.
            </summary>
            <param name="onTrace">Callback, may not be called depending on the trace level.</param>
            <returns>The builder instance so calls can be chained.</returns>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder.WithTracing(System.Diagnostics.TraceLevel,System.Action{LinqToDB.Data.TraceInfo})">
            <summary>
            Configure the database to use the specified trace level and callback for logging or tracing.
            </summary>
            <param name="traceLevel">Trace level to use.</param>
            <param name="onTrace">Callback, may not be called depending on the trace level.</param>
            <returns>The builder instance so calls can be chained.</returns>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder.WriteTraceWith(System.Action{System.String,System.String,System.Diagnostics.TraceLevel})">
            <summary>
            Configure the database to use the specified a string trace callback.
            </summary>
            <param name="write">Callback, may not be called depending on the trace level.</param>
            <returns>The builder instance so calls can be chained.</returns>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder.Reset">
            <summary>
            Reset the builder back to default configuration undoing all previous configured values
            </summary>
            <returns>The builder instance so calls can be chained.</returns>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder.Clone">
            <summary>
            Clone builder without interceptors.
            </summary>
        </member>
        <member name="T:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilderExtensions">
            <summary>
            Set of provider-specific extensions for <see cref="T:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder"/>.
            </summary>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilderExtensions.UseSqlServer(LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder,System.String)">
            <summary>
            Configure connection to use SQL Server default provider, dialect and connection string.
            </summary>
            <param name="builder">Instance of <see cref="T:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder"/>.</param>
            <param name="connectionString">SQL Server connection string.</param>
            <returns>The builder instance so calls can be chained.</returns>
            <remarks>
            <para>
            Default provider configured using <see cref="F:LinqToDB.DataProvider.SqlServer.SqlServerTools.Provider"/> option and set to <see cref="F:LinqToDB.DataProvider.SqlServer.SqlServerProvider.SystemDataSqlClient"/> by default.
            </para>
            <para>
            SQL Server dialect will be choosen automatically:
            <list type="bullet">
            <item>if <see cref="P:LinqToDB.DataProvider.SqlServer.SqlServerTools.AutoDetectProvider"/> (default: <c>true</c>) enabled, Linq To DB will query server for version</item>
            <item>otherwise <see cref="F:LinqToDB.DataProvider.SqlServer.SqlServerVersion.v2008"/> will be used as default dialect.</item>
            </list>
            </para>
            For more fine-grained configuration see <see cref="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilderExtensions.UseSqlServer(LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder,System.String,LinqToDB.DataProvider.SqlServer.SqlServerProvider,LinqToDB.DataProvider.SqlServer.SqlServerVersion)"/> overload.
            </remarks>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilderExtensions.UseSqlServer(LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder,System.String,LinqToDB.DataProvider.SqlServer.SqlServerProvider,LinqToDB.DataProvider.SqlServer.SqlServerVersion)">
            <summary>
            Configure connection to use specific SQL Server provider, dialect and connection string.
            </summary>
            <param name="builder">Instance of <see cref="T:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder"/>.</param>
            <param name="connectionString">SQL Server connection string.</param>
            <param name="provider">SQL Server provider to use.</param>
            <param name="dialect">SQL Server dialect support level.</param>
            <returns>The builder instance so calls can be chained.</returns>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilderExtensions.UseOracle(LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder,System.String)">
            <summary>
            Configure connection to use Oracle default provider, dialect and connection string.
            </summary>
            <param name="builder">Instance of <see cref="T:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder"/>.</param>
            <param name="connectionString">Oracle connection string.</param>
            <returns>The builder instance so calls can be chained.</returns>
            <remarks>
            <para>
            By default Linq To DB tries to load managed version of Oracle provider.
            </para>
            <para>
            Oracle dialect will be choosen automatically:
            <list type="bullet">
            <item>if <see cref="P:LinqToDB.DataProvider.Oracle.OracleTools.AutoDetectProvider"/> (default: <c>true</c>) enabled, Linq To DB will query server for version</item>
            <item>otherwise <see cref="F:LinqToDB.DataProvider.Oracle.OracleTools.DefaultVersion"/> (default: <see cref="F:LinqToDB.DataProvider.Oracle.OracleVersion.v12"/>) will be used as default dialect.</item>
            </list>
            </para>
            For more fine-grained configuration see <see cref="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilderExtensions.UseOracle(LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder,System.String,LinqToDB.DataProvider.Oracle.OracleVersion,LinqToDB.DataProvider.Oracle.OracleProvider)"/> overload.
            </remarks>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilderExtensions.UseOracle(LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder,System.String,LinqToDB.DataProvider.Oracle.OracleVersion)">
            <summary>
            Configure connection to use Oracle default provider, specific dialect and connection string.
            </summary>
            <param name="builder">Instance of <see cref="T:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder"/>.</param>
            <param name="connectionString">Oracle connection string.</param>
            <param name="dialect">Oracle dialect support level.</param>
            <returns>The builder instance so calls can be chained.</returns>
            <remarks>
            <para>
            By default Linq To DB tries to load managed version of Oracle provider.
            </para>
            </remarks>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilderExtensions.UseOracle(LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder,System.String,LinqToDB.DataProvider.Oracle.OracleVersion,LinqToDB.DataProvider.Oracle.OracleProvider)">
            <summary>
            Configure connection to use specific Oracle provider, dialect and connection string.
            </summary>
            <param name="builder">Instance of <see cref="T:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder"/>.</param>
            <param name="connectionString">Oracle connection string.</param>
            <param name="dialect">Oracle dialect support level.</param>
            <param name="provider">ADO.NET provider to use.</param>
            <returns>The builder instance so calls can be chained.</returns>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilderExtensions.UsePostgreSQL(LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder,System.String)">
            <summary>
            Configure connection to use PostgreSQL Npgsql provider, default dialect and connection string.
            </summary>
            <param name="builder">Instance of <see cref="T:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder"/>.</param>
            <param name="connectionString">PostgreSQL connection string.</param>
            <returns>The builder instance so calls can be chained.</returns>
            <remarks>
            <para>
            PostgreSQL dialect will be choosen automatically:
            <list type="bullet">
            <item>if <see cref="P:LinqToDB.DataProvider.PostgreSQL.PostgreSQLTools.AutoDetectProvider"/> (default: <c>true</c>) enabled, Linq To DB will query server for version</item>
            <item>otherwise <see cref="F:LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion.v92"/> will be used as default dialect.</item>
            </list>
            </para>
            For more fine-grained configuration see <see cref="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilderExtensions.UsePostgreSQL(LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder,System.String,LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion)"/> overload.
            </remarks>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilderExtensions.UsePostgreSQL(LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder,System.String,LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion)">
            <summary>
            Configure connection to use PostgreSQL Npgsql provider, specific dialect and connection string.
            </summary>
            <param name="builder">Instance of <see cref="T:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder"/>.</param>
            <param name="connectionString">PostgreSQL connection string.</param>
            <param name="dialect">POstgreSQL dialect support level.</param>
            <returns>The builder instance so calls can be chained.</returns>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilderExtensions.UseMySql(LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder,System.String)">
            <summary>
            Configure connection to use MySql default provider and connection string.
            </summary>
            <param name="builder">Instance of <see cref="T:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder"/>.</param>
            <param name="connectionString">MySql connection string.</param>
            <returns>The builder instance so calls can be chained.</returns>
            <remarks>
            <para>
            Default provider will be choosen by probing current folder for provider assembly and if it is not found, default to <c>MySql.Data</c> provider.
            </para>
            For more fine-grained configuration see <see cref="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilderExtensions.UseMySqlData(LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder,System.String)"/> and <see cref="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilderExtensions.UseMySqlConnector(LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder,System.String)"/> methods.
            </remarks>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilderExtensions.UseMySqlData(LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder,System.String)">
            <summary>
            Configure connection to use <c>MySql.Data</c> MySql provider and connection string.
            </summary>
            <param name="builder">Instance of <see cref="T:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder"/>.</param>
            <param name="connectionString">MySql connection string.</param>
            <returns>The builder instance so calls can be chained.</returns>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilderExtensions.UseMySqlConnector(LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder,System.String)">
            <summary>
            Configure connection to use <c>MySqlConnector</c> MySql provider and connection string.
            </summary>
            <param name="builder">Instance of <see cref="T:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder"/>.</param>
            <param name="connectionString">MySql connection string.</param>
            <returns>The builder instance so calls can be chained.</returns>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilderExtensions.UseSQLite(LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder,System.String)">
            <summary>
            Configure connection to use SQLite default provider and connection string.
            </summary>
            <param name="builder">Instance of <see cref="T:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder"/>.</param>
            <param name="connectionString">SQLite connection string.</param>
            <returns>The builder instance so calls can be chained.</returns>
            <remarks>
            <para>
            Default provider will be choosen by probing current folder for provider assembly and if it is not found, default to <c>System.Data.Sqlite</c> provider.
            </para>
            For more fine-grained configuration see <see cref="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilderExtensions.UseSQLiteOfficial(LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder,System.String)"/> and <see cref="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilderExtensions.UseSQLiteMicrosoft(LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder,System.String)"/> methods.
            </remarks>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilderExtensions.UseSQLiteOfficial(LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder,System.String)">
            <summary>
            Configure connection to use <c>System.Data.Sqlite</c> SQLite provider and connection string.
            </summary>
            <param name="builder">Instance of <see cref="T:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder"/>.</param>
            <param name="connectionString">SQLite connection string.</param>
            <returns>The builder instance so calls can be chained.</returns>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilderExtensions.UseSQLiteMicrosoft(LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder,System.String)">
            <summary>
            Configure connection to use <c>Microsoft.Data.Sqlite</c> SQLite provider and connection string.
            </summary>
            <param name="builder">Instance of <see cref="T:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder"/>.</param>
            <param name="connectionString">SQLite connection string.</param>
            <returns>The builder instance so calls can be chained.</returns>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilderExtensions.UseAccess(LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder,System.String)">
            <summary>
            Configure connection to use Access default provider and connection string.
            </summary>
            <param name="builder">Instance of <see cref="T:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder"/>.</param>
            <param name="connectionString">Access connection string.</param>
            <returns>The builder instance so calls can be chained.</returns>
            <remarks>
            <para>
            Default provider determined by inspecting connection string for OleDb or ODBC-specific markers and otherwise defaults to OleDb provider.
            </para>
            For more fine-grained configuration see <see cref="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilderExtensions.UseAccessOleDb(LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder,System.String)"/> and <see cref="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilderExtensions.UseAccessODBC(LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder,System.String)"/> methods.
            </remarks>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilderExtensions.UseAccessOleDb(LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder,System.String)">
            <summary>
            Configure connection to use Access OleDb provider and connection string.
            </summary>
            <param name="builder">Instance of <see cref="T:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder"/>.</param>
            <param name="connectionString">Access connection string.</param>
            <returns>The builder instance so calls can be chained.</returns>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilderExtensions.UseAccessODBC(LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder,System.String)">
            <summary>
            Configure connection to use Access ODBC provider and connection string.
            </summary>
            <param name="builder">Instance of <see cref="T:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder"/>.</param>
            <param name="connectionString">Access connection string.</param>
            <returns>The builder instance so calls can be chained.</returns>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilderExtensions.UseDB2(LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder,System.String)">
            <summary>
            Configure connection to use DB2 default provider and connection string.
            </summary>
            <param name="builder">Instance of <see cref="T:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder"/>.</param>
            <param name="connectionString">DB2 connection string.</param>
            <returns>The builder instance so calls can be chained.</returns>
            <remarks>
            <para>
            DB2 provider will be choosen automatically:
            <list type="bullet">
            <item>if <see cref="P:LinqToDB.DataProvider.DB2.DB2Tools.AutoDetectProvider"/> (default: <c>true</c>) enabled, Linq To DB will query server for version</item>
            <item>otherwise <c>DB2 LUW</c> provider will be choosen.</item>
            </list>
            </para>
            For more fine-grained configuration see <see cref="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilderExtensions.UseDB2(LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder,System.String,LinqToDB.DataProvider.DB2.DB2Version)"/> overload.
            </remarks>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilderExtensions.UseDB2(LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder,System.String,LinqToDB.DataProvider.DB2.DB2Version)">
            <summary>
            Configure connection to use specific DB2 provider and connection string.
            </summary>
            <param name="builder">Instance of <see cref="T:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder"/>.</param>
            <param name="connectionString">DB2 connection string.</param>
            <param name="version">DB2 server version.</param>
            <returns>The builder instance so calls can be chained.</returns>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilderExtensions.UseFirebird(LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder,System.String)">
            <summary>
            Configure connection to use Firebird provider and connection string.
            </summary>
            <param name="builder">Instance of <see cref="T:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder"/>.</param>
            <param name="connectionString">Firebird connection string.</param>
            <returns>The builder instance so calls can be chained.</returns>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilderExtensions.UseInformix(LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder,System.String)">
            <summary>
            Configure connection to use Informix default provider and connection string.
            </summary>
            <param name="builder">Instance of <see cref="T:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder"/>.</param>
            <param name="connectionString">Informix connection string.</param>
            <returns>The builder instance so calls can be chained.</returns>
            <remarks>
            <para>
            Default provider will be choosen by probing current folder for provider assembly and if it is not found, default to <c>IBM.Data.DB2</c> provider.
            This is not applicable to .NET Core applications as they always use <c>IBM.Data.DB2</c> provider.
            </para>
            </remarks>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilderExtensions.UseSapHana(LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder,System.String)">
            <summary>
            Configure connection to use SAP HANA default provider and connection string.
            </summary>
            <param name="builder">Instance of <see cref="T:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder"/>.</param>
            <param name="connectionString">SAP HANA connection string.</param>
            <returns>The builder instance so calls can be chained.</returns>
            <remarks>
            <para>
            Default provider will be <c>Sap.Data.Hana</c> native provider for .NET Framework and .NET Core applications and ODBC provider for .NET STANDARD builds.
            </para>
            </remarks>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilderExtensions.UseSapHanaNative(LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder,System.String)">
            <summary>
            Configure connection to use native SAP HANA provider and connection string.
            </summary>
            <param name="builder">Instance of <see cref="T:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder"/>.</param>
            <param name="connectionString">SAP HANA connection string.</param>
            <returns>The builder instance so calls can be chained.</returns>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilderExtensions.UseSapHanaODBC(LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder,System.String)">
            <summary>
            Configure connection to use SAP HANA ODBC provider and connection string.
            </summary>
            <param name="builder">Instance of <see cref="T:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder"/>.</param>
            <param name="connectionString">SAP HANA connection string.</param>
            <returns>The builder instance so calls can be chained.</returns>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilderExtensions.UseSqlCe(LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder,System.String)">
            <summary>
            Configure connection to use SQL CE provider and connection string.
            </summary>
            <param name="builder">Instance of <see cref="T:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder"/>.</param>
            <param name="connectionString">SQL CE connection string.</param>
            <returns>The builder instance so calls can be chained.</returns>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilderExtensions.UseAse(LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder,System.String)">
            <summary>
            Configure connection to use SAP/Sybase ASE default provider and connection string.
            </summary>
            <param name="builder">Instance of <see cref="T:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder"/>.</param>
            <param name="connectionString">SAP/Sybase ASE connection string.</param>
            <returns>The builder instance so calls can be chained.</returns>
            <remarks>
            <para>
            Provider selection available only for .NET Framework applications.
            </para>
            <para>
            Default provider will be choosen by probing current folder for provider assembly and if it is not found, default to official <c>Sybase.AdoNet45.AseClient</c> provider.
            </para>
            </remarks>
        </member>
        <member name="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilderExtensions.UseClickHouse(LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder,LinqToDB.DataProvider.ClickHouse.ClickHouseProvider,System.String)">
            <summary>
            Configure connection to use UseClickHouse provider and connection string.
            </summary>
            <param name="builder">Instance of <see cref="T:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder"/>.</param>
            <param name="provider">ClickHouse provider.</param>
            <param name="connectionString">ClickHouse connection string.</param>
            <returns>The builder instance so calls can be chained.</returns>
        </member>
        <member name="T:LinqToDB.Configuration.LinqToDBSettings">
            <summary>
            Provides explicitly-defined <see cref="T:LinqToDB.Configuration.ILinqToDBSettings"/> implementation.
            </summary>
        </member>
        <member name="T:LinqToDB.Configuration.NamedValue">
            <summary>
            Name-value pair.
            </summary>
        </member>
        <member name="P:LinqToDB.Configuration.NamedValue.Name">
            <summary>
            Gets or sets name for value.
            </summary>
        </member>
        <member name="P:LinqToDB.Configuration.NamedValue.Value">
            <summary>
            Gets ot sets value.
            </summary>
        </member>
        <member name="T:LinqToDB.DataContext">
            <summary>
            Implements abstraction over non-persistent database connection that could be released after query or transaction execution.
            </summary>
        </member>
        <member name="M:LinqToDB.DataContext.#ctor">
            <summary>
            Creates data context using default database configuration.
            <see cref="P:LinqToDB.Data.DataConnection.DefaultConfiguration"/> for more details.
            </summary>
        </member>
        <member name="M:LinqToDB.DataContext.#ctor(System.String)">
            <summary>
            Creates data context using specific database configuration.
            </summary>
            <param name="configurationString">Connection configuration name.
            In case of <c>null</c> value, context will use default configuration.
            <see cref="P:LinqToDB.Data.DataConnection.DefaultConfiguration"/> for more details.
            </param>
        </member>
        <member name="M:LinqToDB.DataContext.#ctor(LinqToDB.DataProvider.IDataProvider,System.String)">
            <summary>
            Creates data context using specific data provider implementation and connection string.
            </summary>
            <param name="dataProvider">Database provider implementation.</param>
            <param name="connectionString">Database connection string.</param>
        </member>
        <member name="M:LinqToDB.DataContext.#ctor(System.String,System.String)">
            <summary>
            Creates data context using specified database provider and connection string.
            </summary>
            <param name="providerName">Name of database provider to use with this connection. <see cref="T:LinqToDB.ProviderName"/> class for list of providers.</param>
            <param name="connectionString">Database connection string to use for connection with database.</param>
        </member>
        <member name="M:LinqToDB.DataContext.#ctor(LinqToDB.Configuration.LinqToDBConnectionOptions)">
            <summary>
            Creates database context object that uses a <see cref="T:LinqToDB.Configuration.LinqToDBConnectionOptions"/> to configure the connection.
            </summary>
            <param name="options">Options, setup ahead of time.</param>
        </member>
        <member name="P:LinqToDB.DataContext.ConfigurationString">
            <summary>
            Gets initial value for database connection configuration name.
            </summary>
        </member>
        <member name="P:LinqToDB.DataContext.ConnectionString">
            <summary>
            Gets initial value for database connection string.
            </summary>
        </member>
        <member name="P:LinqToDB.DataContext.DataProvider">
            <summary>
            Gets database provider implementation.
            </summary>
        </member>
        <member name="P:LinqToDB.DataContext.ContextName">
            <summary>
            Gets or sets context identifier. Uses provider's name by default.
            </summary>
        </member>
        <member name="P:LinqToDB.DataContext.MappingSchema">
            <summary>
            Gets or sets mapping schema. Uses provider's mapping schema by default.
            </summary>
        </member>
        <member name="P:LinqToDB.DataContext.InlineParameters">
            <summary>
            Gets or sets option to force inline parameter values as literals into command text. If parameter inlining not supported
            for specific value type, it will be used as parameter.
            </summary>
        </member>
        <member name="P:LinqToDB.DataContext.LastQuery">
            <summary>
            Contains text of last command, sent to database using current context.
            </summary>
        </member>
        <member name="P:LinqToDB.DataContext.OnTraceConnection">
            <summary>
            Gets or sets trace handler, used for data connection instance.
            </summary>
        </member>
        <member name="P:LinqToDB.DataContext.KeepConnectionAlive">
            <summary>
            Gets or sets option to dispose underlying connection after use.
            Default value: <c>false</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.DataContext.IsMarsEnabled">
            <summary>
            Gets or sets status of Multiple Active Result Sets (MARS) feature. This feature available only for
            SQL Azure and SQL Server 2005+.
            </summary>
        </member>
        <member name="P:LinqToDB.DataContext.QueryHints">
            <summary>
            Gets list of query hints (writable collection), that will be used for all queries, executed through current context.
            </summary>
        </member>
        <member name="P:LinqToDB.DataContext.NextQueryHints">
            <summary>
            Gets list of query hints (writable collection), that will be used only for next query, executed through current context.
            </summary>
        </member>
        <member name="P:LinqToDB.DataContext.CloseAfterUse">
            <summary>
            Gets or sets flag to close context after query execution or leave it open.
            </summary>
        </member>
        <member name="F:LinqToDB.DataContext.LockDbManagerCounter">
            <summary>
            Counts number of locks, put on underlying connection. Connection will not be released while counter is not zero.
            </summary>
        </member>
        <member name="P:LinqToDB.DataContext.CommandTimeout">
            <summary>
            Gets or sets command execution timeout in seconds.
            Negative timeout value means that default timeout will be used.
            0 timeout value corresponds to infinite timeout.
            By default timeout is not set and default value for current provider used.
            </summary>
        </member>
        <member name="F:LinqToDB.DataContext._dataConnection">
            <summary>
            Underlying active database connection.
            </summary>
        </member>
        <member name="M:LinqToDB.DataContext.CreateDataConnection(LinqToDB.Configuration.LinqToDBConnectionOptions)">
            <summary>
            Creates instance of <see cref="T:LinqToDB.Data.DataConnection"/> class, used by context internally.
            </summary>
            <returns>New <see cref="T:LinqToDB.Data.DataConnection"/> instance.</returns>
        </member>
        <member name="M:LinqToDB.DataContext.GetDataConnection">
            <summary>
            Returns associated database connection <see cref="T:LinqToDB.Data.DataConnection"/> or create new connection, if connection
            doesn't exists.
            </summary>
            <returns>Data connection.</returns>
        </member>
        <member name="M:LinqToDB.DataContext.ReleaseQuery">
            <summary>
            For active underlying connection, updates information about last executed query <see cref="P:LinqToDB.DataContext.LastQuery"/> and
            releases connection, if it is not locked (<see cref="F:LinqToDB.DataContext.LockDbManagerCounter"/>)
            and <see cref="P:LinqToDB.DataContext.KeepConnectionAlive"/> is <c>false</c>.
            </summary>
        </member>
        <member name="M:LinqToDB.DataContext.ReleaseQueryAsync">
            <summary>
            For active underlying connection, updates information about last executed query <see cref="P:LinqToDB.DataContext.LastQuery"/> and
            releases connection, if it is not locked (<see cref="F:LinqToDB.DataContext.LockDbManagerCounter"/>)
            and <see cref="P:LinqToDB.DataContext.KeepConnectionAlive"/> is <c>false</c>.
            </summary>
        </member>
        <member name="M:LinqToDB.DataContext.CloneDataConnection(LinqToDB.Data.DataConnection,LinqToDB.Configuration.LinqToDBConnectionOptions)">
            <summary>
            Creates instance of <see cref="T:LinqToDB.Data.DataConnection"/> class, attached to same database connection/transaction passed in options.
            Used by <see cref="M:LinqToDB.IDataContext.Clone(System.Boolean)"/> API only if <see cref="P:LinqToDB.Data.DataConnection.IsMarsEnabled"/>
            is <c>true</c> and there is an active connection associated with current context.
            <param name="currentConnection"><see cref="T:LinqToDB.Data.DataConnection"/> instance, used by current context instance.</param>
            <param name="options">Connection options, will have <see cref="P:LinqToDB.Configuration.LinqToDBConnectionOptions.DbConnection"/> or <see cref="P:LinqToDB.Configuration.LinqToDBConnectionOptions.DbTransaction"/> set.</param>
            <returns>New <see cref="T:LinqToDB.Data.DataConnection"/> instance.</returns>
            </summary>
        </member>
        <member name="M:LinqToDB.DataContext.Dispose(System.Boolean)">
            <summary>
            Closes underlying connection.
            </summary>
        </member>
        <member name="M:LinqToDB.DataContext.DisposeAsync(System.Boolean)">
            <summary>
            Closes underlying connection.
            </summary>
        </member>
        <member name="M:LinqToDB.DataContext.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Starts new transaction for current context with specified isolation level.
            If connection already has transaction, it will be rolled back.
            </summary>
            <param name="level">Transaction isolation level.</param>
            <returns>Database transaction object.</returns>
        </member>
        <member name="M:LinqToDB.DataContext.BeginTransaction">
            <summary>
            Starts new transaction for current context with default isolation level.
            If connection already has transaction, it will be rolled back.
            </summary>
            <returns>Database transaction object.</returns>
        </member>
        <member name="M:LinqToDB.DataContext.BeginTransactionAsync(System.Data.IsolationLevel,System.Threading.CancellationToken)">
            <summary>
            Starts new transaction asynchronously for current context with specified isolation level.
            If connection already has transaction, it will be rolled back.
            </summary>
            <param name="level">Transaction isolation level.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Database transaction object.</returns>
        </member>
        <member name="M:LinqToDB.DataContext.BeginTransactionAsync(System.Threading.CancellationToken)">
            <summary>
            Starts new transaction asynchronously for current context with default isolation level.
            If connection already has transaction, it will be rolled back.
            </summary>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Database transaction object.</returns>
        </member>
        <member name="M:LinqToDB.DataContext.AddInterceptor(LinqToDB.Interceptors.IInterceptor)">
            <inheritdoc cref="M:LinqToDB.IDataContext.AddInterceptor(LinqToDB.Interceptors.IInterceptor)"/>
        </member>
        <member name="T:LinqToDB.DataContextTransaction">
            <summary>
            Explicit data context <see cref="P:LinqToDB.DataContextTransaction.DataContext"/> transaction wrapper.
            </summary>
        </member>
        <member name="M:LinqToDB.DataContextTransaction.#ctor(LinqToDB.DataContext)">
            <summary>
            Creates new transaction wrapper.
            </summary>
            <param name="dataContext">Data context.</param>
        </member>
        <member name="P:LinqToDB.DataContextTransaction.DataContext">
            <summary>
            Gets or sets transaction's data context.
            </summary>
        </member>
        <member name="M:LinqToDB.DataContextTransaction.BeginTransaction">
            <summary>
            Start new transaction with default isolation level.
            If underlying connection already has transaction, it will be rolled back.
            </summary>
        </member>
        <member name="M:LinqToDB.DataContextTransaction.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Start new transaction with specified isolation level.
            If underlying connection already has transaction, it will be rolled back.
            </summary>
            <param name="level">Transaction isolation level.</param>
        </member>
        <member name="M:LinqToDB.DataContextTransaction.BeginTransactionAsync(System.Threading.CancellationToken)">
            <summary>
            Start new transaction asynchronously with default isolation level.
            If underlying connection already has transaction, it will be rolled back.
            </summary>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
        </member>
        <member name="M:LinqToDB.DataContextTransaction.BeginTransactionAsync(System.Data.IsolationLevel,System.Threading.CancellationToken)">
            <summary>
            Start new transaction asynchronously with specified isolation level.
            If underlying connection already has transaction, it will be rolled back.
            </summary>
            <param name="level">Transaction isolation level.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
        </member>
        <member name="M:LinqToDB.DataContextTransaction.CommitTransaction">
            <summary>
            Commits started transaction.
            </summary>
        </member>
        <member name="M:LinqToDB.DataContextTransaction.RollbackTransaction">
            <summary>
            Rollbacks started transaction.
            </summary>
        </member>
        <member name="M:LinqToDB.DataContextTransaction.CommitTransactionAsync(System.Threading.CancellationToken)">
            <summary>
            Commits started transaction.
            If underlying provider doesn't support asynchronous commit, it will be performed synchronously.
            </summary>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Asynchronous operation completion task.</returns>
        </member>
        <member name="M:LinqToDB.DataContextTransaction.RollbackTransactionAsync(System.Threading.CancellationToken)">
            <summary>
            Rollbacks started transaction asynchronously.
            If underlying provider doesn't support asynchronous rollback, it will be performed synchronously.
            </summary>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Asynchronous operation completion task.</returns>
        </member>
        <member name="M:LinqToDB.DataContextTransaction.Dispose">
            <summary>
            Rollbacks started transaction (if any).
            </summary>
        </member>
        <member name="T:LinqToDB.DataExtensions">
            <summary>
            Data context extension methods.
            </summary>
        </member>
        <member name="M:LinqToDB.DataExtensions.GetTable``1(LinqToDB.IDataContext)">
            <summary>
            Returns queryable source for specified mapping class for current connection, mapped to database table or view.
            </summary>
            <typeparam name="T">Mapping class type.</typeparam>
            <param name="dataContext">Data connection context.</param>
            <returns>Queryable source.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.GetTable``1(LinqToDB.IDataContext,System.Object,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Returns queryable source for specified mapping class for current connection, mapped to table expression or function.
            It could be used e.g. for queries to table-valued functions or to decorate queried table with hints.
            </summary>
            <typeparam name="T">Mapping class type.</typeparam>
            <param name="dataContext">Data connection context.</param>
            <param name="instance">Instance object for <paramref name="methodInfo"/> method or null for static method.</param>
            <param name="methodInfo">Method, decorated with expression attribute, based on <see cref="T:LinqToDB.Sql.TableFunctionAttribute"/>.</param>
            <param name="parameters">Parameters for <paramref name="methodInfo"/> method.</param>
            <returns>Queryable source.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.Compile``2(LinqToDB.IDataContext,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Compiles the query.
            </summary>
            <returns>
            A generic delegate that represents the compiled query.
            </returns>
            <param name="dataContext">Data connection context.</param>
            <param name="query">The query expression to be compiled.</param>
            <typeparam name="TDc">Type of data context parameter, passed to compiled query.</typeparam>
            <typeparam name="TResult">Query result type.</typeparam>
        </member>
        <member name="M:LinqToDB.DataExtensions.Compile``3(LinqToDB.IDataContext,System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
            Compiles the query with parameter.
            </summary>
            <returns>
            A generic delegate that represents the compiled query.
            </returns>
            <param name="dataContext">Data connection context.</param>
            <param name="query">The query expression to be compiled.</param>
            <typeparam name="TDc">Type of data context parameter, passed to compiled query.</typeparam>
            <typeparam name="TArg1">Type of parameter for compiled query.</typeparam>
            <typeparam name="TResult">Query result type.</typeparam>
        </member>
        <member name="M:LinqToDB.DataExtensions.Compile``4(LinqToDB.IDataContext,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
            <summary>
            Compiles the query with two parameters.
            </summary>
            <returns>
            A generic delegate that represents the compiled query.
            </returns>
            <param name="dataContext">Data connection context.</param>
            <param name="query">The query expression to be compiled.</param>
            <typeparam name="TDc">Type of data context parameter, passed to compiled query.</typeparam>
            <typeparam name="TArg1">Type of first parameter for compiled query.</typeparam>
            <typeparam name="TArg2">Type of second parameter for compiled query.</typeparam>
            <typeparam name="TResult">Query result type.</typeparam>
        </member>
        <member name="M:LinqToDB.DataExtensions.Compile``5(LinqToDB.IDataContext,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
            <summary>
            Compiles the query with three parameters.
            </summary>
            <returns>
            A generic delegate that represents the compiled query.
            </returns>
            <param name="dataContext">Data connection context.</param>
            <param name="query">The query expression to be compiled.</param>
            <typeparam name="TDc">Type of data context parameter, passed to compiled query.</typeparam>
            <typeparam name="TArg1">Type of first parameter for compiled query.</typeparam>
            <typeparam name="TArg2">Type of second parameter for compiled query.</typeparam>
            <typeparam name="TArg3">Type of third parameter for compiled query.</typeparam>
            <typeparam name="TResult">Query result type.</typeparam>
        </member>
        <member name="M:LinqToDB.DataExtensions.Insert``1(LinqToDB.IDataContext,``0,System.String,System.String,System.String,System.String,LinqToDB.TableOptions)">
            <summary>
            Inserts record into table, identified by <typeparamref name="T"/> mapping class, using values from <paramref name="obj"/> parameter.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data to insert.</param>
            <param name="tableName">Optional table name to override default table name, extracted from <typeparamref name="T"/> mapping.</param>
            <param name="databaseName">Optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="schemaName">Optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="serverName">Optional linked server name. See <see cref="M:LinqToDB.LinqExtensions.ServerName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.Insert``1(LinqToDB.IDataContext,``0,LinqToDB.InsertColumnFilter{``0},System.String,System.String,System.String,System.String,LinqToDB.TableOptions)">
            <summary>
            Inserts record into table, identified by <typeparamref name="T"/> mapping class, using values from <paramref name="obj"/> parameter.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data to insert.</param>
            <param name="columnFilter">Filter columns to insert.</param>
            <param name="tableName">Optional table name to override default table name, extracted from <typeparamref name="T"/> mapping.</param>
            <param name="databaseName">Optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="schemaName">Optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="serverName">Optional linked server name. See <see cref="M:LinqToDB.LinqExtensions.ServerName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.InsertAsync``1(LinqToDB.IDataContext,``0,System.String,System.String,System.String,System.String,LinqToDB.TableOptions,System.Threading.CancellationToken)">
            <summary>
            Inserts record asynchronously into table, identified by <typeparamref name="T"/> mapping class, using values from <paramref name="obj"/> parameter.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data to insert.</param>
            <param name="tableName">Optional table name to override default table name, extracted from <typeparamref name="T"/> mapping.</param>
            <param name="databaseName">Optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="schemaName">Optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="serverName">Optional linked server name. See <see cref="M:LinqToDB.LinqExtensions.ServerName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.InsertAsync``1(LinqToDB.IDataContext,``0,LinqToDB.InsertColumnFilter{``0},System.String,System.String,System.String,System.String,LinqToDB.TableOptions,System.Threading.CancellationToken)">
            <summary>
            Inserts record asynchronously into table, identified by <typeparamref name="T"/> mapping class, using values from <paramref name="obj"/> parameter.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data to insert.</param>
            <param name="columnFilter">Filter columns to insert.</param>
            <param name="tableName">Optional table name to override default table name, extracted from <typeparamref name="T"/> mapping.</param>
            <param name="databaseName">Optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="schemaName">Optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="serverName">Optional linked server name. See <see cref="M:LinqToDB.LinqExtensions.ServerName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.InsertOrReplace``1(LinqToDB.IDataContext,``0,System.String,System.String,System.String,System.String,LinqToDB.TableOptions)">
            <summary>
            Inserts new record into table, identified by <typeparamref name="T"/> mapping class, using values from <paramref name="obj"/> parameter
            or update existing record, identified by match on primary key value.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data to insert or update.</param>
            <param name="tableName">Optional table name to override default table name, extracted from <typeparamref name="T"/> mapping.</param>
            <param name="databaseName">Optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="schemaName">Optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="serverName">Optional linked server name. See <see cref="M:LinqToDB.LinqExtensions.ServerName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.InsertOrReplace``1(LinqToDB.IDataContext,``0,LinqToDB.InsertOrUpdateColumnFilter{``0},System.String,System.String,System.String,System.String,LinqToDB.TableOptions)">
            <summary>
            Inserts new record into table, identified by <typeparamref name="T"/> mapping class, using values from <paramref name="obj"/> parameter
            or update existing record, identified by match on primary key value.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data to insert or update.</param>
            <param name="columnFilter">Filter columns to insert and update. Parameters: entity, column descriptor and operation (<c>true</c> for insert )</param>
            <param name="tableName">Optional table name to override default table name, extracted from <typeparamref name="T"/> mapping.</param>
            <param name="databaseName">Optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="schemaName">Optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="serverName">Optional linked server name. See <see cref="M:LinqToDB.LinqExtensions.ServerName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.InsertOrReplaceAsync``1(LinqToDB.IDataContext,``0,System.String,System.String,System.String,System.String,LinqToDB.TableOptions,System.Threading.CancellationToken)">
            <summary>
            Asynchronously inserts new record into table, identified by <typeparamref name="T"/> mapping class, using values from <paramref name="obj"/> parameter
            or update existing record, identified by match on primary key value.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data to insert or update.</param>
            <param name="tableName">Optional table name to override default table name, extracted from <typeparamref name="T"/> mapping.</param>
            <param name="databaseName">Optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="schemaName">Optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="serverName">Optional linked server name. See <see cref="M:LinqToDB.LinqExtensions.ServerName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.InsertOrReplaceAsync``1(LinqToDB.IDataContext,``0,LinqToDB.InsertOrUpdateColumnFilter{``0},System.String,System.String,System.String,System.String,LinqToDB.TableOptions,System.Threading.CancellationToken)">
            <summary>
            Asynchronously inserts new record into table, identified by <typeparamref name="T"/> mapping class, using values from <paramref name="obj"/> parameter
            or update existing record, identified by match on primary key value.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="columnFilter">Filter columns to insert and update.</param>
            <param name="obj">Object with data to insert or update.</param>
            <param name="tableName">Optional table name to override default table name, extracted from <typeparamref name="T"/> mapping.</param>
            <param name="databaseName">Optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="schemaName">Optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="serverName">Optional linked server name. See <see cref="M:LinqToDB.LinqExtensions.ServerName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.InsertWithIdentity``1(LinqToDB.IDataContext,``0,System.String,System.String,System.String,System.String,LinqToDB.TableOptions)">
            <summary>
            Inserts record into table, identified by <typeparamref name="T"/> mapping class, using values from <paramref name="obj"/> parameter.
            Returns identity value for inserted record.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data to insert.</param>
            <param name="tableName">Optional table name to override default table name, extracted from <typeparamref name="T"/> mapping.</param>
            <param name="databaseName">Optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="schemaName">Optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="serverName">Optional linked server name. See <see cref="M:LinqToDB.LinqExtensions.ServerName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.InsertWithIdentity``1(LinqToDB.IDataContext,``0,LinqToDB.InsertColumnFilter{``0},System.String,System.String,System.String,System.String,LinqToDB.TableOptions)">
            <summary>
            Inserts record into table, identified by <typeparamref name="T"/> mapping class, using values from <paramref name="obj"/> parameter.
            Returns identity value for inserted record.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data to insert.</param>
            <param name="columnFilter">Filter columns to insert.</param>
            <param name="tableName">Optional table name to override default table name, extracted from <typeparamref name="T"/> mapping.</param>
            <param name="databaseName">Optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="schemaName">Optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="serverName">Optional linked server name. See <see cref="M:LinqToDB.LinqExtensions.ServerName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.InsertWithInt32Identity``1(LinqToDB.IDataContext,``0,System.String,System.String,System.String,System.String,LinqToDB.TableOptions)">
            <summary>
            Inserts record into table, identified by <typeparamref name="T"/> mapping class, using values from <paramref name="obj"/> parameter.
            Returns identity value for inserted record as <see cref="T:System.Int32"/> value.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data to insert.</param>
            <param name="tableName">Optional table name to override default table name, extracted from <typeparamref name="T"/> mapping.</param>
            <param name="databaseName">Optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="schemaName">Optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="serverName">Optional linked server name. See <see cref="M:LinqToDB.LinqExtensions.ServerName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.InsertWithInt32Identity``1(LinqToDB.IDataContext,``0,LinqToDB.InsertColumnFilter{``0},System.String,System.String,System.String,System.String,LinqToDB.TableOptions)">
            <summary>
            Inserts record into table, identified by <typeparamref name="T"/> mapping class, using values from <paramref name="obj"/> parameter.
            Returns identity value for inserted record as <see cref="T:System.Int32"/> value.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data to insert.</param>
            <param name="columnFilter">Filter columns to insert.</param>
            <param name="tableName">Optional table name to override default table name, extracted from <typeparamref name="T"/> mapping.</param>
            <param name="databaseName">Optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="schemaName">Optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="serverName">Optional linked server name. See <see cref="M:LinqToDB.LinqExtensions.ServerName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.InsertWithInt64Identity``1(LinqToDB.IDataContext,``0,System.String,System.String,System.String,System.String,LinqToDB.TableOptions)">
            <summary>
            Inserts record into table, identified by <typeparamref name="T"/> mapping class, using values from <paramref name="obj"/> parameter.
            Returns identity value for inserted record as <see cref="T:System.Int64"/> value.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data to insert.</param>
            <param name="tableName">Optional table name to override default table name, extracted from <typeparamref name="T"/> mapping.</param>
            <param name="databaseName">Optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="schemaName">Optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="serverName">Optional linked server name. See <see cref="M:LinqToDB.LinqExtensions.ServerName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.InsertWithInt64Identity``1(LinqToDB.IDataContext,``0,LinqToDB.InsertColumnFilter{``0},System.String,System.String,System.String,System.String,LinqToDB.TableOptions)">
            <summary>
            Inserts record into table, identified by <typeparamref name="T"/> mapping class, using values from <paramref name="obj"/> parameter.
            Returns identity value for inserted record as <see cref="T:System.Int64"/> value.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data to insert.</param>
            <param name="columnFilter">Filter columns to insert.</param>
            <param name="tableName">Optional table name to override default table name, extracted from <typeparamref name="T"/> mapping.</param>
            <param name="databaseName">Optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="schemaName">Optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="serverName">Optional linked server name. See <see cref="M:LinqToDB.LinqExtensions.ServerName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.InsertWithDecimalIdentity``1(LinqToDB.IDataContext,``0,System.String,System.String,System.String,System.String,LinqToDB.TableOptions)">
            <summary>
            Inserts record into table, identified by <typeparamref name="T"/> mapping class, using values from <paramref name="obj"/> parameter.
            Returns identity value for inserted record as <see cref="T:System.Decimal"/> value.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data to insert.</param>
            <param name="tableName">Optional table name to override default table name, extracted from <typeparamref name="T"/> mapping.</param>
            <param name="databaseName">Optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="schemaName">Optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="serverName">Optional linked server name. See <see cref="M:LinqToDB.LinqExtensions.ServerName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.InsertWithDecimalIdentity``1(LinqToDB.IDataContext,``0,LinqToDB.InsertColumnFilter{``0},System.String,System.String,System.String,System.String,LinqToDB.TableOptions)">
            <summary>
            Inserts record into table, identified by <typeparamref name="T"/> mapping class, using values from <paramref name="obj"/> parameter.
            Returns identity value for inserted record as <see cref="T:System.Decimal"/> value.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data to insert.</param>
            <param name="columnFilter">Filter columns to insert.</param>
            <param name="tableName">Optional table name to override default table name, extracted from <typeparamref name="T"/> mapping.</param>
            <param name="databaseName">Optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="schemaName">Optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="serverName">Optional linked server name. See <see cref="M:LinqToDB.LinqExtensions.ServerName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.InsertWithIdentityAsync``1(LinqToDB.IDataContext,``0,System.String,System.String,System.String,System.String,LinqToDB.TableOptions,System.Threading.CancellationToken)">
            <summary>
            Asynchronously inserts record into table, identified by <typeparamref name="T"/> mapping class, using values from <paramref name="obj"/> parameter.
            Returns identity value for inserted record.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data to insert.</param>
            <param name="tableName">Optional table name to override default table name, extracted from <typeparamref name="T"/> mapping.</param>
            <param name="databaseName">Optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="schemaName">Optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="serverName">Optional linked server name. See <see cref="M:LinqToDB.LinqExtensions.ServerName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.InsertWithIdentityAsync``1(LinqToDB.IDataContext,``0,LinqToDB.InsertColumnFilter{``0},System.String,System.String,System.String,System.String,LinqToDB.TableOptions,System.Threading.CancellationToken)">
            <summary>
            Asynchronously inserts record into table, identified by <typeparamref name="T"/> mapping class, using values from <paramref name="obj"/> parameter.
            Returns identity value for inserted record.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data to insert.</param>
            <param name="columnFilter">Filter columns to insert.</param>
            <param name="tableName">Optional table name to override default table name, extracted from <typeparamref name="T"/> mapping.</param>
            <param name="databaseName">Optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="schemaName">Optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="serverName">Optional linked server name. See <see cref="M:LinqToDB.LinqExtensions.ServerName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.InsertWithInt32IdentityAsync``1(LinqToDB.IDataContext,``0,System.String,System.String,System.String,System.String,LinqToDB.TableOptions,System.Threading.CancellationToken)">
            <summary>
            Asynchronously inserts record into table, identified by <typeparamref name="T"/> mapping class, using values from <paramref name="obj"/> parameter.
            Returns identity value for inserted record as <see cref="T:System.Int32"/> value.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data to insert.</param>
            <param name="tableName">Optional table name to override default table name, extracted from <typeparamref name="T"/> mapping.</param>
            <param name="databaseName">Optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="schemaName">Optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="serverName">Optional linked server name. See <see cref="M:LinqToDB.LinqExtensions.ServerName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.InsertWithInt32IdentityAsync``1(LinqToDB.IDataContext,``0,LinqToDB.InsertColumnFilter{``0},System.String,System.String,System.String,System.String,LinqToDB.TableOptions,System.Threading.CancellationToken)">
            <summary>
            Asynchronously inserts record into table, identified by <typeparamref name="T"/> mapping class, using values from <paramref name="obj"/> parameter.
            Returns identity value for inserted record as <see cref="T:System.Int32"/> value.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data to insert.</param>
            <param name="columnFilter">Filter columns to insert.</param>
            <param name="tableName">Optional table name to override default table name, extracted from <typeparamref name="T"/> mapping.</param>
            <param name="databaseName">Optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="schemaName">Optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="serverName">Optional linked server name. See <see cref="M:LinqToDB.LinqExtensions.ServerName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.InsertWithInt64IdentityAsync``1(LinqToDB.IDataContext,``0,System.String,System.String,System.String,System.String,LinqToDB.TableOptions,System.Threading.CancellationToken)">
            <summary>
            Asynchronously inserts record into table, identified by <typeparamref name="T"/> mapping class, using values from <paramref name="obj"/> parameter.
            Returns identity value for inserted record as <see cref="T:System.Int64"/> value.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data to insert.</param>
            <param name="tableName">Optional table name to override default table name, extracted from <typeparamref name="T"/> mapping.</param>
            <param name="databaseName">Optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="schemaName">Optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="serverName">Optional linked server name. See <see cref="M:LinqToDB.LinqExtensions.ServerName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.InsertWithInt64IdentityAsync``1(LinqToDB.IDataContext,``0,LinqToDB.InsertColumnFilter{``0},System.String,System.String,System.String,System.String,LinqToDB.TableOptions,System.Threading.CancellationToken)">
            <summary>
            Asynchronously inserts record into table, identified by <typeparamref name="T"/> mapping class, using values from <paramref name="obj"/> parameter.
            Returns identity value for inserted record as <see cref="T:System.Int64"/> value.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data to insert.</param>
            <param name="columnFilter">Filter columns to insert.</param>
            <param name="tableName">Optional table name to override default table name, extracted from <typeparamref name="T"/> mapping.</param>
            <param name="databaseName">Optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="schemaName">Optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="serverName">Optional linked server name. See <see cref="M:LinqToDB.LinqExtensions.ServerName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.InsertWithDecimalIdentityAsync``1(LinqToDB.IDataContext,``0,System.String,System.String,System.String,System.String,LinqToDB.TableOptions,System.Threading.CancellationToken)">
            <summary>
            Asynchronously inserts record into table, identified by <typeparamref name="T"/> mapping class, using values from <paramref name="obj"/> parameter.
            Returns identity value for inserted record as <see cref="T:System.Decimal"/> value.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data to insert.</param>
            <param name="tableName">Optional table name to override default table name, extracted from <typeparamref name="T"/> mapping.</param>
            <param name="databaseName">Optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="schemaName">Optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="serverName">Optional linked server name. See <see cref="M:LinqToDB.LinqExtensions.ServerName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.InsertWithDecimalIdentityAsync``1(LinqToDB.IDataContext,``0,LinqToDB.InsertColumnFilter{``0},System.String,System.String,System.String,System.String,LinqToDB.TableOptions,System.Threading.CancellationToken)">
            <summary>
            Asynchronously inserts record into table, identified by <typeparamref name="T"/> mapping class, using values from <paramref name="obj"/> parameter.
            Returns identity value for inserted record as <see cref="T:System.Decimal"/> value.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data to insert.</param>
            <param name="columnFilter">Filter columns to insert.</param>
            <param name="tableName">Optional table name to override default table name, extracted from <typeparamref name="T"/> mapping.</param>
            <param name="databaseName">Optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="schemaName">Optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="serverName">Optional linked server name. See <see cref="M:LinqToDB.LinqExtensions.ServerName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.Update``1(LinqToDB.IDataContext,``0,System.String,System.String,System.String,System.String,LinqToDB.TableOptions)">
            <summary>
            Updates record in table, identified by <typeparamref name="T"/> mapping class, using values from <paramref name="obj"/> parameter.
            Record to update identified by match on primary key value from <paramref name="obj"/> value.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data to update.</param>
            <param name="tableName">Optional table name to override default table name, extracted from <typeparamref name="T"/> mapping.</param>
            <param name="databaseName">Optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="schemaName">Optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="serverName">Optional linked server name. See <see cref="M:LinqToDB.LinqExtensions.ServerName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.Update``1(LinqToDB.IDataContext,``0,LinqToDB.UpdateColumnFilter{``0},System.String,System.String,System.String,System.String,LinqToDB.TableOptions)">
            <summary>
            Updates record in table, identified by <typeparamref name="T"/> mapping class, using values from <paramref name="obj"/> parameter.
            Record to update identified by match on primary key value from <paramref name="obj"/> value.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data to update.</param>
            <param name="columnFilter">Filter columns to update.</param>
            <param name="tableName">Optional table name to override default table name, extracted from <typeparamref name="T"/> mapping.</param>
            <param name="databaseName">Optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="schemaName">Optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="serverName">Optional linked server name. See <see cref="M:LinqToDB.LinqExtensions.ServerName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.UpdateAsync``1(LinqToDB.IDataContext,``0,System.String,System.String,System.String,System.String,LinqToDB.TableOptions,System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates record in table, identified by <typeparamref name="T"/> mapping class, using values from <paramref name="obj"/> parameter.
            Record to update identified by match on primary key value from <paramref name="obj"/> value.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data to update.</param>
            <param name="tableName">Name of the table</param>
            <param name="databaseName">Name of the database</param>
            <param name="schemaName">Name of the schema</param>
            <param name="serverName">Optional linked server name. See <see cref="M:LinqToDB.LinqExtensions.ServerName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.UpdateAsync``1(LinqToDB.IDataContext,``0,LinqToDB.UpdateColumnFilter{``0},System.String,System.String,System.String,System.String,LinqToDB.TableOptions,System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates record in table, identified by <typeparamref name="T"/> mapping class, using values from <paramref name="obj"/> parameter.
            Record to update identified by match on primary key value from <paramref name="obj"/> value.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data to update.</param>
            <param name="columnFilter">Filter columns to update.</param>
            <param name="tableName">Name of the table</param>
            <param name="databaseName">Name of the database</param>
            <param name="schemaName">Name of the schema</param>
            <param name="serverName">Optional linked server name. See <see cref="M:LinqToDB.LinqExtensions.ServerName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.Delete``1(LinqToDB.IDataContext,``0,System.String,System.String,System.String,System.String,LinqToDB.TableOptions)">
            <summary>
            Deletes record in table, identified by <typeparamref name="T"/> mapping class.
            Record to delete identified by match on primary key value from <paramref name="obj"/> value.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data for delete operation.</param>
            <param name="tableName">Optional table name to override default table name, extracted from <typeparamref name="T"/> mapping.</param>
            <param name="databaseName">Optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="schemaName">Optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="serverName">Optional linked server name. See <see cref="M:LinqToDB.LinqExtensions.ServerName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.DeleteAsync``1(LinqToDB.IDataContext,``0,System.String,System.String,System.String,System.String,LinqToDB.TableOptions,System.Threading.CancellationToken)">
            <summary>
            Asynchronously deletes record in table, identified by <typeparamref name="T"/> mapping class.
            Record to delete identified by match on primary key value from <paramref name="obj"/> value.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data for delete operation.</param>
            <param name="tableName">Optional table name to override default table name, extracted from <typeparamref name="T"/> mapping.</param>
            <param name="databaseName">Optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="schemaName">Optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="serverName">Optional linked server name. See <see cref="M:LinqToDB.LinqExtensions.ServerName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.CreateTable``1(LinqToDB.IDataContext,System.String,System.String,System.String,System.String,System.String,LinqToDB.SqlQuery.DefaultNullable,System.String,LinqToDB.TableOptions)">
            <summary>
            Creates new table in database for mapping class <typeparamref name="T"/>.
            Information about table name, columns names and types is taken from mapping class.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="tableName">Optional table name to override default table name, extracted from <typeparamref name="T"/> mapping.</param>
            <param name="databaseName">Optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="schemaName">Optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="statementHeader">Optional replacement for <c>"CREATE TABLE table_name"</c> header. Header is a template with <c>{0}</c> parameter for table name.</param>
            <param name="statementFooter">Optional SQL, appended to generated create table statement.</param>
            <param name="defaultNullable">Defines how columns nullability flag should be generated:
            <para> - <see cref="F:LinqToDB.SqlQuery.DefaultNullable.Null"/> - generate only <c>NOT NULL</c> for non-nullable fields. Missing nullability information treated as <c>NULL</c> by database.</para>
            <para> - <see cref="F:LinqToDB.SqlQuery.DefaultNullable.NotNull"/> - generate only <c>NULL</c> for nullable fields. Missing nullability information treated as <c>NOT NULL</c> by database.</para>
            <para> - <see cref="F:LinqToDB.SqlQuery.DefaultNullable.None"/> - explicitly generate <c>NULL</c> and <c>NOT NULL</c> for all columns.</para>
            Default value: <see cref="F:LinqToDB.SqlQuery.DefaultNullable.None"/>.
            </param>
            <param name="serverName">Optional linked server name. See <see cref="M:LinqToDB.LinqExtensions.ServerName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <returns>Created table as queryable source.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.CreateTableAsync``1(LinqToDB.IDataContext,System.String,System.String,System.String,System.String,System.String,LinqToDB.SqlQuery.DefaultNullable,System.String,LinqToDB.TableOptions,System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates new table in database for mapping class <typeparamref name="T"/>.
            Information about table name, columns names and types is taken from mapping class.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="tableName">Optional table name to override default table name, extracted from <typeparamref name="T"/> mapping.</param>
            <param name="databaseName">Optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="schemaName">Optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="statementHeader">Optional replacement for <c>"CREATE TABLE table_name"</c> header. Header is a template with <c>{0}</c> parameter for table name.</param>
            <param name="statementFooter">Optional SQL, appended to generated create table statement.</param>
            <param name="defaultNullable">Defines how columns nullability flag should be generated:
            <para> - <see cref="F:LinqToDB.SqlQuery.DefaultNullable.Null"/> - generate only <c>NOT NULL</c> for non-nullable fields. Missing nullability information treated as <c>NULL</c> by database.</para>
            <para> - <see cref="F:LinqToDB.SqlQuery.DefaultNullable.NotNull"/> - generate only <c>NULL</c> for nullable fields. Missing nullability information treated as <c>NOT NULL</c> by database.</para>
            <para> - <see cref="F:LinqToDB.SqlQuery.DefaultNullable.None"/> - explicitly generate <c>NULL</c> and <c>NOT NULL</c> for all columns.</para>
            Default value: <see cref="F:LinqToDB.SqlQuery.DefaultNullable.None"/>.
            </param>
            <param name="serverName">Optional linked server name. See <see cref="M:LinqToDB.LinqExtensions.ServerName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Created table as queryable source.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.DropTable``1(LinqToDB.IDataContext,System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,LinqToDB.TableOptions)">
            <summary>
            Drops table identified by mapping class <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="tableName">Optional table name to override default table name, extracted from <typeparamref name="T"/> mapping.</param>
            <param name="databaseName">Optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="schemaName">Optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="throwExceptionIfNotExists">If <c>false</c>, any exception during drop operation will be silently caught and <c>0</c> returned.
            This behavior is not correct and will be fixed in future to mask only missing table exceptions.
            Tracked by <a href="https://github.com/linq2db/linq2db/issues/798">issue</a>.
            Default value: <c>true</c>.</param>
            <param name="serverName">Optional linked server name. See <see cref="M:LinqToDB.LinqExtensions.ServerName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
        </member>
        <member name="M:LinqToDB.DataExtensions.DropTable``1(LinqToDB.ITable{``0},System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,LinqToDB.TableOptions)">
            <summary>
            Drops table identified by <paramref name="table"/> parameter.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="table">Dropped table.</param>
            <param name="tableName">Optional table name to override default table name, extracted from <typeparamref name="T"/> mapping.</param>
            <param name="databaseName">Optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="schemaName">Optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="throwExceptionIfNotExists">If <c>false</c>, any exception during drop operation will be silently caught and <c>0</c> returned.
            This behavior is not correct and will be fixed in future to mask only missing table exceptions.
            Tracked by <a href="https://github.com/linq2db/linq2db/issues/798">issue</a>.
            Default value: <c>true</c>.</param>
            <param name="serverName">Optional linked server name. See <see cref="M:LinqToDB.LinqExtensions.ServerName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
        </member>
        <member name="M:LinqToDB.DataExtensions.DropTableAsync``1(LinqToDB.IDataContext,System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,LinqToDB.TableOptions,System.Threading.CancellationToken)">
            <summary>
            Asynchronously drops table identified by mapping class <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="tableName">Optional table name to override default table name, extracted from <typeparamref name="T"/> mapping.</param>
            <param name="databaseName">Optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="schemaName">Optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="throwExceptionIfNotExists">If <c>false</c>, any exception during drop operation will be silently caught and <c>0</c> returned.
            This behavior is not correct and will be fixed in future to mask only missing table exceptions.
            Tracked by <a href="https://github.com/linq2db/linq2db/issues/798">issue</a>.
            Default value: <c>true</c>.</param>
            <param name="serverName">Optional linked server name. See <see cref="M:LinqToDB.LinqExtensions.ServerName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Asynchronous operation completion task.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.DropTableAsync``1(LinqToDB.ITable{``0},System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,LinqToDB.TableOptions,System.Threading.CancellationToken)">
            <summary>
            Asynchronously drops table identified by <paramref name="table"/> parameter.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="table">Dropped table.</param>
            <param name="tableName">Optional table name to override default table name, extracted from <typeparamref name="T"/> mapping.</param>
            <param name="databaseName">Optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="schemaName">Optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="throwExceptionIfNotExists">If <c>false</c>, any exception during drop operation will be silently caught and <c>0</c> returned.
            This behavior is not correct and will be fixed in future to mask only missing table exceptions.
            Tracked by <a href="https://github.com/linq2db/linq2db/issues/798">issue</a>.
            Default value: <c>true</c>.</param>
            <param name="serverName">Optional linked server name. See <see cref="M:LinqToDB.LinqExtensions.ServerName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Asynchronous operation completion task.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.GetCte``1(LinqToDB.IDataContext,System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``0}},System.String)">
            <summary>
            Helps to define a recursive CTE.
            </summary>
            <typeparam name="T">Source query record type.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="cteBody">Recursive query body.</param>
            <param name="cteTableName">Common table expression name.</param>
            <returns>Common table expression.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.GetCte``1(LinqToDB.IDataContext,System.String,System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``0}})">
            <summary>
            Helps to define a recursive CTE.
            </summary>
            <typeparam name="T">Source query record type.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="cteBody">Recursive query body.</param>
            <param name="cteTableName">Common table expression name.</param>
            <returns>Common table expression.</returns>
        </member>
        <member name="T:LinqToDB.DataExtensions.SqlFormattableComparerAttribute">
            <summary>
            Compares two FormattableString parameters
            </summary>
        </member>
        <member name="M:LinqToDB.DataExtensions.FromSql``1(LinqToDB.IDataContext,System.FormattableString)">
            <summary>
                <para>
                    Creates a LINQ query based on an interpolated string representing a SQL query.
                </para>
                <para>
                    If the database provider supports composing on the supplied SQL, you can compose on top of the raw SQL query using
                    LINQ operators - <code>context.FromSql&lt;Blogs&gt;("SELECT * FROM dbo.Blogs").OrderBy(b =&gt; b.Name);</code>
                </para>
                <para>
                    As with any API that accepts SQL it is important to parameterize any user input to protect against a SQL injection
                    attack. You can include interpolated parameter place holders in the SQL query string. Any interpolated parameter values
                    you supply will automatically be converted to a DbParameter -
                    <code>context.FromSql&lt;Blogs&gt;($"SELECT * FROM [dbo].[SearchBlogs]({userSuppliedSearchTerm})");</code>
                </para>
            </summary>
            <typeparam name="TEntity">Source query record type.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="sql"> The interpolated string representing a SQL query. </param>
            <remarks>Additional parentheses will be added to the query if first word in raw query is 'SELECT', otherwise users are responsible to add them themselves.</remarks>
            <returns> An <see cref="T:System.Linq.IQueryable`1" /> representing the raw SQL query. </returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.FromSqlScalar``1(LinqToDB.IDataContext,System.FormattableString)">
            <summary>
                <para>
                    Creates a LINQ query based on an interpolated string representing a SQL query.
                </para>
                <para>
                    If the database provider supports composing on the supplied SQL, you can compose on top of the raw SQL query using
                    LINQ operators - <code>context.FromSql&lt;Blogs&gt;("SELECT * FROM dbo.Blogs").OrderBy(b =&gt; b.Name);</code>
                </para>
                <para>
                    As with any API that accepts SQL it is important to parameterize any user input to protect against a SQL injection
                    attack. You can include interpolated parameter place holders in the SQL query string. Any interpolated parameter values
                    you supply will automatically be converted to a DbParameter -
                    <code>context.FromSqlScalar&lt;Blogs&gt;($"UNNEST({array})");</code>
                </para>
            </summary>
            <typeparam name="TEntity">Source query record type.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="sql"> The interpolated string representing a SQL query. </param>
            <remarks>Additional parentheses will be added to the query if first word in raw query is 'SELECT', otherwise users are responsible to add them themselves.</remarks>
            <returns> An <see cref="T:System.Linq.IQueryable`1" /> representing the raw SQL query. </returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.FromSql``1(LinqToDB.IDataContext,LinqToDB.Common.RawSqlString,System.Object[])">
            <summary>
                <para>
                    Creates a LINQ query based on a raw SQL query.
                </para>
                <para>
                    If the database provider supports composing on the supplied SQL, you can compose on top of the raw SQL query using
                    LINQ operators - <code>context.FromSql&lt;Blogs&gt;("SELECT * FROM dbo.Blogs").OrderBy(b => b.Name);</code>
                </para>
                <para>
                    As with any API that accepts SQL it is important to parameterize any user input to protect against a SQL injection
                    attack. You can include parameter place holders in the SQL query string and then supply parameter values as additional
                    arguments. Any parameter values you supply will automatically be converted to a DbParameter -
                    <code>context.FromSql&lt;Blogs&gt;("SELECT * FROM [dbo].[SearchBlogs]({0})", userSuppliedSearchTerm);</code>
                </para>
                <para>
                    This overload also accepts DbParameter instances as parameter values.
                    <code>context.FromSql&lt;Blogs&gt;("SELECT * FROM [dbo].[SearchBlogs]({0})", new DataParameter("@searchTerm", userSuppliedSearchTerm, DataType.Int64));</code>
                </para>
            </summary>
            <typeparam name="TEntity">Source query record type.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="sql">The raw SQL query</param>
            <param name="parameters"> The values to be assigned to parameters. </param>
            <remarks>Additional parentheses will be added to the query if first word in raw query is 'SELECT', otherwise users are responsible to add them themselves.</remarks>
            <returns> An <see cref="T:System.Linq.IQueryable`1" /> representing the raw SQL query. </returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.SelectQuery``1(LinqToDB.IDataContext,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                <para>
                    Creates a LINQ query based on expression. Returned <see cref="T:System.Linq.IQueryable`1" /> represents single record.<para />
                    Could be useful for function calls, querying of database variables, properties or sub-queries.
                </para>
            </summary>
            <typeparam name="TEntity">Type of result.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="selector">Value selection expression.</param>
            <returns> An <see cref="T:System.Linq.IQueryable`1" /> representing single record. </returns>
            <remarks>
                Method works for most supported database engines, except databases which do not support <code>SELECT Value</code> without FROM statement.<para />
                For Oracle it will be translated to <code>SELECT Value FROM SYS.DUAL</code>
            </remarks>
            <example>
            Complex record:
            <code>
            db.SelectQuery(() => new { Version = 1, CurrentTimeStamp = Sql.CurrentTimeStamp });
            </code>
            Scalar value:
            <code>
            db.SelectQuery(() => Sql.CurrentTimeStamp);
            </code>
            </example>
        </member>
        <member name="M:LinqToDB.DataExtensions.CreateTempTable``1(LinqToDB.IDataContext,System.String,System.String,System.String,System.String,LinqToDB.TableOptions)">
            <summary>
            Creates new temporary table.
            </summary>
            <typeparam name="T">Table record mapping class.</typeparam>
            <param name="db">Database connection instance.</param>
            <param name="tableName">Optional name of temporary table. If not specified, value from mapping will be used.</param>
            <param name="databaseName">Optional name of table's database. If not specified, value from mapping will be used.</param>
            <param name="schemaName">Optional name of table schema/owner. If not specified, value from mapping will be used.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Optional Table options. Default is <see cref="F:LinqToDB.TableOptions.IsTemporary"/>.</param>
            <returns>Returns temporary table instance.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.CreateTempTable``1(LinqToDB.IDataContext,System.Collections.Generic.IEnumerable{``0},LinqToDB.Data.BulkCopyOptions,System.String,System.String,System.String,System.String,LinqToDB.TableOptions)">
            <summary>
            Creates new temporary table and populate it using BulkCopy.
            </summary>
            <typeparam name="T">Table record mapping class.</typeparam>
            <param name="db">Database connection instance.</param>
            <param name="items">Initial records to insert into created table.</param>
            <param name="options">Optional BulkCopy options.</param>
            <param name="tableName">Optional name of temporary table. If not specified, value from mapping will be used.</param>
            <param name="databaseName">Optional name of table's database. If not specified, value from mapping will be used.</param>
            <param name="schemaName">Optional name of table schema/owner. If not specified, value from mapping will be used.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Optional Table options. Default is <see cref="F:LinqToDB.TableOptions.IsTemporary"/>.</param>
            <returns>Returns temporary table instance.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.CreateTempTable``1(LinqToDB.IDataContext,System.String,System.Collections.Generic.IEnumerable{``0},LinqToDB.Data.BulkCopyOptions,System.String,System.String,System.String,LinqToDB.TableOptions)">
            <summary>
            Creates new temporary table and populate it using BulkCopy.
            </summary>
            <typeparam name="T">Table record mapping class.</typeparam>
            <param name="db">Database connection instance.</param>
            <param name="tableName">Optional name of temporary table. If not specified, value from mapping will be used.</param>
            <param name="items">Initial records to insert into created table.</param>
            <param name="options">Optional BulkCopy options.</param>
            <param name="databaseName">Optional name of table's database. If not specified, value from mapping will be used.</param>
            <param name="schemaName">Optional name of table schema/owner. If not specified, value from mapping will be used.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Optional Table options. Default is <see cref="F:LinqToDB.TableOptions.IsTemporary"/>.</param>
            <returns>Returns temporary table instance.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.CreateTempTable``1(LinqToDB.IDataContext,System.Linq.IQueryable{``0},System.String,System.String,System.String,System.Action{LinqToDB.ITable{``0}},System.String,LinqToDB.TableOptions)">
            <summary>
            Creates new temporary table and populate it using data from provided query.
            </summary>
            <typeparam name="T">Table record mapping class.</typeparam>
            <param name="db">Database connection instance.</param>
            <param name="items">Query to get records to populate created table with initial data.</param>
            <param name="tableName">Optional name of temporary table. If not specified, value from mapping will be used.</param>
            <param name="databaseName">Optional name of table's database. If not specified, value from mapping will be used.</param>
            <param name="schemaName">Optional name of table schema/owner. If not specified, value from mapping will be used.</param>
            <param name="action">Optional action that will be executed after table creation but before it populated with data from <paramref name="items"/>.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Optional Table options. Default is <see cref="F:LinqToDB.TableOptions.IsTemporary"/>.</param>
            <returns>Returns temporary table instance.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.CreateTempTable``1(LinqToDB.IDataContext,System.Linq.IQueryable{``0},System.Action{LinqToDB.Mapping.EntityMappingBuilder{``0}},System.String,System.String,System.String,System.Action{LinqToDB.ITable{``0}},System.String,LinqToDB.TableOptions)">
            <summary>
            Creates new temporary table and populate it using data from provided query. Table mapping could be changed
            using fluent mapper.
            </summary>
            <typeparam name="T">Table record mapping class.</typeparam>
            <param name="db">Database connection instance.</param>
            <param name="items">Query to get records to populate created table with initial data.</param>
            <param name="setTable">Action to modify <typeparamref name="T"/> entity's mapping using fluent mapping.</param>
            <param name="tableName">Optional name of temporary table. If not specified, value from mapping will be used.</param>
            <param name="databaseName">Optional name of table's database. If not specified, value from mapping will be used.</param>
            <param name="schemaName">Optional name of table schema/owner. If not specified, value from mapping will be used.</param>
            <param name="action">Optional action that will be executed after table creation but before it populated with data from <paramref name="items"/>.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Optional Table options. Default is <see cref="F:LinqToDB.TableOptions.IsTemporary"/>.</param>
            <returns>Returns temporary table instance.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.CreateTempTable``1(LinqToDB.IDataContext,System.String,System.Linq.IQueryable{``0},System.String,System.String,System.Action{LinqToDB.ITable{``0}},System.String,LinqToDB.TableOptions)">
            <summary>
            Creates new temporary table and populate it using data from provided query.
            </summary>
            <typeparam name="T">Table record mapping class.</typeparam>
            <param name="db">Database connection instance.</param>
            <param name="tableName">Optional name of temporary table. If not specified, value from mapping will be used.</param>
            <param name="items">Query to get records to populate created table with initial data.</param>
            <param name="databaseName">Optional name of table's database. If not specified, value from mapping will be used.</param>
            <param name="schemaName">Optional name of table schema/owner. If not specified, value from mapping will be used.</param>
            <param name="action">Optional action that will be executed after table creation but before it populated with data from <paramref name="items"/>.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Optional Table options. Default is <see cref="F:LinqToDB.TableOptions.IsTemporary"/>.</param>
            <returns>Returns temporary table instance.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.CreateTempTable``1(LinqToDB.IDataContext,System.String,System.Linq.IQueryable{``0},System.Action{LinqToDB.Mapping.EntityMappingBuilder{``0}},System.String,System.String,System.Action{LinqToDB.ITable{``0}},System.String,LinqToDB.TableOptions)">
            <summary>
            Creates new temporary table and populate it using data from provided query. Table mapping could be changed
            using fluent mapper.
            </summary>
            <typeparam name="T">Table record mapping class.</typeparam>
            <param name="db">Database connection instance.</param>
            <param name="tableName">Optional name of temporary table. If not specified, value from mapping will be used.</param>
            <param name="items">Query to get records to populate created table with initial data.</param>
            <param name="setTable">Action to modify <typeparamref name="T"/> entity's mapping using fluent mapping.</param>
            <param name="databaseName">Optional name of table's database. If not specified, value from mapping will be used.</param>
            <param name="schemaName">Optional name of table schema/owner. If not specified, value from mapping will be used.</param>
            <param name="action">Optional action that will be executed after table creation but before it populated with data from <paramref name="items"/>.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Optional Table options. Default is <see cref="F:LinqToDB.TableOptions.IsTemporary"/>.</param>
            <returns>Returns temporary table instance.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.CreateTempTableAsync``1(LinqToDB.IDataContext,System.String,System.String,System.String,System.String,LinqToDB.TableOptions,System.Threading.CancellationToken)">
            <summary>
            Creates new temporary table.
            </summary>
            <typeparam name="T">Table record mapping class.</typeparam>
            <param name="db">Database connection instance.</param>
            <param name="tableName">Optional name of temporary table. If not specified, value from mapping will be used.</param>
            <param name="databaseName">Optional name of table's database. If not specified, value from mapping will be used.</param>
            <param name="schemaName">Optional name of table schema/owner. If not specified, value from mapping will be used.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Optional Table options. Default is <see cref="F:LinqToDB.TableOptions.IsTemporary"/>.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Returns temporary table instance.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.CreateTempTableAsync``1(LinqToDB.IDataContext,System.Collections.Generic.IEnumerable{``0},LinqToDB.Data.BulkCopyOptions,System.String,System.String,System.String,System.String,LinqToDB.TableOptions,System.Threading.CancellationToken)">
            <summary>
            Creates new temporary table and populate it using BulkCopy.
            </summary>
            <typeparam name="T">Table record mapping class.</typeparam>
            <param name="db">Database connection instance.</param>
            <param name="items">Initial records to insert into created table.</param>
            <param name="options">Optional BulkCopy options.</param>
            <param name="tableName">Optional name of temporary table. If not specified, value from mapping will be used.</param>
            <param name="databaseName">Optional name of table's database. If not specified, value from mapping will be used.</param>
            <param name="schemaName">Optional name of table schema/owner. If not specified, value from mapping will be used.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Optional Table options. Default is <see cref="F:LinqToDB.TableOptions.IsTemporary"/>.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Returns temporary table instance.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.CreateTempTableAsync``1(LinqToDB.IDataContext,System.String,System.Collections.Generic.IEnumerable{``0},LinqToDB.Data.BulkCopyOptions,System.String,System.String,System.String,LinqToDB.TableOptions,System.Threading.CancellationToken)">
            <summary>
            Creates new temporary table and populate it using BulkCopy.
            </summary>
            <typeparam name="T">Table record mapping class.</typeparam>
            <param name="db">Database connection instance.</param>
            <param name="tableName">Optional name of temporary table. If not specified, value from mapping will be used.</param>
            <param name="items">Initial records to insert into created table.</param>
            <param name="options">Optional BulkCopy options.</param>
            <param name="databaseName">Optional name of table's database. If not specified, value from mapping will be used.</param>
            <param name="schemaName">Optional name of table schema/owner. If not specified, value from mapping will be used.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Optional Table options. Default is <see cref="F:LinqToDB.TableOptions.IsTemporary"/>.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Returns temporary table instance.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.CreateTempTableAsync``1(LinqToDB.IDataContext,System.Linq.IQueryable{``0},System.String,System.String,System.String,System.Func{LinqToDB.ITable{``0},System.Threading.Tasks.Task},System.String,LinqToDB.TableOptions,System.Threading.CancellationToken)">
            <summary>
            Creates new temporary table and populate it using data from provided query.
            </summary>
            <typeparam name="T">Table record mapping class.</typeparam>
            <param name="db">Database connection instance.</param>
            <param name="items">Query to get records to populate created table with initial data.</param>
            <param name="tableName">Optional name of temporary table. If not specified, value from mapping will be used.</param>
            <param name="databaseName">Optional name of table's database. If not specified, value from mapping will be used.</param>
            <param name="schemaName">Optional name of table schema/owner. If not specified, value from mapping will be used.</param>
            <param name="action">Optional asynchronous action that will be executed after table creation but before it populated with data from <paramref name="items"/>.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Optional Table options. Default is <see cref="F:LinqToDB.TableOptions.IsTemporary"/>.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Returns temporary table instance.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.CreateTempTableAsync``1(LinqToDB.IDataContext,System.Linq.IQueryable{``0},System.Action{LinqToDB.Mapping.EntityMappingBuilder{``0}},System.String,System.String,System.String,System.Func{LinqToDB.ITable{``0},System.Threading.Tasks.Task},System.String,LinqToDB.TableOptions,System.Threading.CancellationToken)">
            <summary>
            Creates new temporary table and populate it using data from provided query. Table mapping could be changed
            using fluent mapper.
            </summary>
            <typeparam name="T">Table record mapping class.</typeparam>
            <param name="db">Database connection instance.</param>
            <param name="items">Query to get records to populate created table with initial data.</param>
            <param name="setTable">Action to modify <typeparamref name="T"/> entity's mapping using fluent mapping.</param>
            <param name="tableName">Optional name of temporary table. If not specified, value from mapping will be used.</param>
            <param name="databaseName">Optional name of table's database. If not specified, value from mapping will be used.</param>
            <param name="schemaName">Optional name of table schema/owner. If not specified, value from mapping will be used.</param>
            <param name="action">Optional asynchronous action that will be executed after table creation but before it populated with data from <paramref name="items"/>.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Optional Table options. Default is <see cref="F:LinqToDB.TableOptions.IsTemporary"/>.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Returns temporary table instance.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.CreateTempTableAsync``1(LinqToDB.IDataContext,System.String,System.Linq.IQueryable{``0},System.String,System.String,System.Func{LinqToDB.ITable{``0},System.Threading.Tasks.Task},System.String,LinqToDB.TableOptions,System.Threading.CancellationToken)">
            <summary>
            Creates new temporary table and populate it using data from provided query.
            </summary>
            <typeparam name="T">Table record mapping class.</typeparam>
            <param name="db">Database connection instance.</param>
            <param name="tableName">Optional name of temporary table. If not specified, value from mapping will be used.</param>
            <param name="items">Query to get records to populate created table with initial data.</param>
            <param name="databaseName">Optional name of table's database. If not specified, value from mapping will be used.</param>
            <param name="schemaName">Optional name of table schema/owner. If not specified, value from mapping will be used.</param>
            <param name="action">Optional asynchronous action that will be executed after table creation but before it populated with data from <paramref name="items"/>.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Optional Table options. Default is <see cref="F:LinqToDB.TableOptions.IsTemporary"/>.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Returns temporary table instance.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.CreateTempTableAsync``1(LinqToDB.IDataContext,System.String,System.Linq.IQueryable{``0},System.Action{LinqToDB.Mapping.EntityMappingBuilder{``0}},System.String,System.String,System.Func{LinqToDB.ITable{``0},System.Threading.Tasks.Task},System.String,LinqToDB.TableOptions,System.Threading.CancellationToken)">
            <summary>
            Creates new temporary table and populate it using data from provided query. Table mapping could be changed
            using fluent mapper.
            </summary>
            <typeparam name="T">Table record mapping class.</typeparam>
            <param name="db">Database connection instance.</param>
            <param name="tableName">Optional name of temporary table. If not specified, value from mapping will be used.</param>
            <param name="items">Query to get records to populate created table with initial data.</param>
            <param name="setTable">Action to modify <typeparamref name="T"/> entity's mapping using fluent mapping.</param>
            <param name="databaseName">Optional name of table's database. If not specified, value from mapping will be used.</param>
            <param name="schemaName">Optional name of table schema/owner. If not specified, value from mapping will be used.</param>
            <param name="action">Optional asynchronous action that will be executed after table creation but before it populated with data from <paramref name="items"/>.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Optional Table options. Default is <see cref="F:LinqToDB.TableOptions.IsTemporary"/>.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Returns temporary table instance.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.IntoTempTable``1(System.Collections.Generic.IEnumerable{``0},LinqToDB.IDataContext,System.String,System.String,System.String,System.String,LinqToDB.TableOptions,LinqToDB.Data.BulkCopyOptions)">
            <summary>
            Creates new temporary table and populate it using BulkCopy.
            </summary>
            <typeparam name="T">Table record mapping class.</typeparam>
            <param name="db">Database connection instance.</param>
            <param name="items">Initial records to insert into created table.</param>
            <param name="options">Optional BulkCopy options.</param>
            <param name="tableName">Optional name of temporary table. If not specified, value from mapping will be used.</param>
            <param name="databaseName">Optional name of table's database. If not specified, value from mapping will be used.</param>
            <param name="schemaName">Optional name of table schema/owner. If not specified, value from mapping will be used.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Optional Table options. Default is <see cref="F:LinqToDB.TableOptions.IsTemporary"/>.</param>
            <returns>Returns temporary table instance.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.IntoTempTable``1(System.Linq.IQueryable{``0},System.String,System.String,System.String,System.String,LinqToDB.TableOptions,System.Action{LinqToDB.ITable{``0}},System.Action{LinqToDB.Mapping.EntityMappingBuilder{``0}})">
            <summary>
            Creates new temporary table and populate it using data from provided query.
            </summary>
            <typeparam name="T">Table record mapping class.</typeparam>
            <param name="items">Query to get records to populate created table with initial data.</param>
            <param name="tableName">Optional name of temporary table. If not specified, value from mapping will be used.</param>
            <param name="databaseName">Optional name of table's database. If not specified, value from mapping will be used.</param>
            <param name="schemaName">Optional name of table schema/owner. If not specified, value from mapping will be used.</param>
            <param name="action">Optional action that will be executed after table creation, but before it populated with data from <paramref name="items"/>.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Optional Table options. Default is <see cref="F:LinqToDB.TableOptions.IsTemporary"/>.</param>
            <param name="setTable">Action to modify <typeparamref name="T"/> entity's mapping using fluent mapping.</param>
            <returns>Returns temporary table instance.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.IntoTempTableAsync``1(System.Collections.Generic.IEnumerable{``0},LinqToDB.IDataContext,System.String,System.String,System.String,System.String,LinqToDB.TableOptions,LinqToDB.Data.BulkCopyOptions,System.Threading.CancellationToken)">
            <summary>
            Creates new temporary table and populate it using BulkCopy.
            </summary>
            <typeparam name="T">Table record mapping class.</typeparam>
            <param name="db">Database connection instance.</param>
            <param name="items">Initial records to insert into created table.</param>
            <param name="options">Optional BulkCopy options.</param>
            <param name="tableName">Optional name of temporary table. If not specified, value from mapping will be used.</param>
            <param name="databaseName">Optional name of table's database. If not specified, value from mapping will be used.</param>
            <param name="schemaName">Optional name of table schema/owner. If not specified, value from mapping will be used.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Optional Table options. Default is <see cref="F:LinqToDB.TableOptions.IsTemporary"/>.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Returns temporary table instance.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.IntoTempTableAsync``1(System.Linq.IQueryable{``0},System.String,System.String,System.String,System.String,LinqToDB.TableOptions,System.Func{LinqToDB.ITable{``0},System.Threading.Tasks.Task},System.Action{LinqToDB.Mapping.EntityMappingBuilder{``0}},System.Threading.CancellationToken)">
            <summary>
            Creates new temporary table and populate it using data from provided query. Table mapping could be changed
            using fluent mapper.
            </summary>
            <typeparam name="T">Table record mapping class.</typeparam>
            <param name="items">Query to get records to populate created table with initial data.</param>
            <param name="setTable">Action to modify <typeparamref name="T"/> entity's mapping using fluent mapping.</param>
            <param name="tableName">Optional name of temporary table. If not specified, value from mapping will be used.</param>
            <param name="databaseName">Optional name of table's database. If not specified, value from mapping will be used.</param>
            <param name="schemaName">Optional name of table schema/owner. If not specified, value from mapping will be used.</param>
            <param name="action">Optional asynchronous action that will be executed after table creation but before it populated with data from <paramref name="items"/>.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Optional Table options. Default is <see cref="F:LinqToDB.TableOptions.IsTemporary"/>.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Returns temporary table instance.</returns>
        </member>
        <member name="P:LinqToDB.DataProvider.Access.AccessBulkCopy.MaxParameters">
            <remarks>
            Settings based on https://www.jooq.org/doc/3.12/manual/sql-building/dsl-context/custom-settings/settings-inline-threshold/
            We subtract 1 here to be safe since some ADO providers use parameter for command itself.
            </remarks>
        </member>
        <member name="P:LinqToDB.DataProvider.Access.AccessBulkCopy.MaxSqlLength">
            <remarks>
            This max is based on https://support.microsoft.com/en-us/office/access-specifications-0cf3c66f-9cf2-4e32-9568-98c1025bb47c
            </remarks>
        </member>
        <member name="M:LinqToDB.DataProvider.Access.AccessHints.SubQueryHint``1(LinqToDB.DataProvider.Access.IAccessSpecificQueryable{``0},System.String)">
            <summary>
            Adds a query hint to a generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <returns>Query source with join hints.</returns>
        </member>
        <member name="T:LinqToDB.DataProvider.Access.AccessTools">
            <summary>
            Contains Access provider management tools.
            </summary>
        </member>
        <member name="M:LinqToDB.DataProvider.Access.AccessTools.GetDataProvider(System.String)">
            <summary>
            Returns instance of Access database provider.
            </summary>
            <returns><see cref="T:LinqToDB.DataProvider.Access.AccessOleDbDataProvider"/> or <see cref="T:LinqToDB.DataProvider.Access.AccessODBCDataProvider"/> instance.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.Access.AccessTools.CreateDataConnection(System.String,System.String)">
            <summary>
            Creates <see cref="T:LinqToDB.Data.DataConnection"/> object using provided Access connection string.
            </summary>
            <param name="connectionString">Connection string.</param>
            <param name="providerName">Provider name.</param>
            <returns><see cref="T:LinqToDB.Data.DataConnection"/> instance.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.Access.AccessTools.CreateDataConnection(System.Data.Common.DbConnection,System.String)">
            <summary>
            Creates <see cref="T:LinqToDB.Data.DataConnection"/> object using provided connection object.
            </summary>
            <param name="connection">Connection instance.</param>
            <param name="providerName">Provider name.</param>
            <returns><see cref="T:LinqToDB.Data.DataConnection"/> instance.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.Access.AccessTools.CreateDataConnection(System.Data.Common.DbTransaction,System.String)">
            <summary>
            Creates <see cref="T:LinqToDB.Data.DataConnection"/> object using provided transaction object.
            </summary>
            <param name="transaction">Transaction instance.</param>
            <param name="providerName">Provider name.</param>
            <returns><see cref="T:LinqToDB.Data.DataConnection"/> instance.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.Access.AccessTools.CreateDatabase(System.String,System.Boolean,System.String)">
            <summary>
            Creates new Access database file. Requires Access OLE DB provider (JET or ACE) and ADOX.
            </summary>
            <param name="databaseName">Name of database to create.</param>
            <param name="deleteIfExists">If <c>true</c>, existing database will be removed before create.</param>
            <param name="provider">Name of OleDb provider to use to create database. Default value: "Microsoft.Jet.OLEDB.4.0".</param>
            <remarks>
            Provider value examples: Microsoft.Jet.OLEDB.4.0 (for JET database), Microsoft.ACE.OLEDB.12.0, Microsoft.ACE.OLEDB.15.0 (for ACE database).
            </remarks>
        </member>
        <member name="M:LinqToDB.DataProvider.Access.AccessTools.DropDatabase(System.String)">
            <summary>
            Removes database file by database name.
            </summary>
            <param name="databaseName">Name of database to remove.</param>
        </member>
        <member name="P:LinqToDB.DataProvider.Access.AccessTools.DefaultBulkCopyType">
            <summary>
            Default bulk copy mode, used for Access by <see cref="M:LinqToDB.Data.DataConnectionExtensions.BulkCopy``1(LinqToDB.Data.DataConnection,System.Collections.Generic.IEnumerable{``0})"/>
            methods, if mode is not specified explicitly.
            Default value: <see cref="F:LinqToDB.Data.BulkCopyType.MultipleRows"/>.
            </summary>
        </member>
        <member name="P:LinqToDB.DataProvider.ClickHouse.ClickHouseConfiguration.UseStandardCompatibleAggregates">
            <summary>
            Enables -OrNull combinator for Min, Max, Sum and Avg aggregation functions to support SQL standard-compatible behavior.
            Default value: <c>false</c>.
            </summary>
        </member>
        <member name="T:LinqToDB.DataProvider.ClickHouse.ClickHouseProvider">
            <summary>
            Defines supported ClickHouse ADO.NET provider implementation libraries.
            </summary>
        </member>
        <member name="F:LinqToDB.DataProvider.ClickHouse.ClickHouseProvider.Octonica">
            <summary>
            Octonica ClickHouse provider: https://github.com/Octonica/ClickHouseClient.
            </summary>
        </member>
        <member name="F:LinqToDB.DataProvider.ClickHouse.ClickHouseProvider.ClickHouseClient">
            <summary>
             DarkWanderer ClickHouse provider: https://github.com/DarkWanderer/ClickHouse.Client.
            </summary>
        </member>
        <member name="F:LinqToDB.DataProvider.ClickHouse.ClickHouseProvider.MySqlConnector">
            <summary>
            MySqlConnector provider: https://mysqlconnector.net/.
            </summary>
        </member>
        <member name="T:LinqToDB.DataProvider.ClickHouse.ClickHouseProviderAdapter.ClientWrappers">
            <summary>
            ClickHouse.Client wrappers.
            </summary>
        </member>
        <member name="T:LinqToDB.DataProvider.ClickHouse.ClickHouseProviderAdapter.OctonicaWrappers">
            <summary>
            Octonica.ClicHouseClient wappers.
            </summary>
        </member>
        <member name="T:LinqToDB.DataProvider.ClickHouse.ClickHouseRetryPolicy">
            <summary>
            Retry policy handles only following exceptions:
            <list type="bullet">
            <item>Octonica client ClickHouseException with codes ClickHouseErrorCodes.InvalidConnectionState, ClickHouseErrorCodes.ConnectionClosed, ClickHouseErrorCodes.NetworkError</item>
            <item>MySqlConnector <c>MySqlException.IsTransient == true</c> (requires .NET 6+ and MySqlConnector 1.3.0 or greater)</item>
            </list>
            </summary>
        </member>
        <member name="M:LinqToDB.DataProvider.ClickHouse.ClickHouseRetryPolicy.#ctor">
            <summary>
            Creates a new instance of <see cref="T:LinqToDB.DataProvider.ClickHouse.ClickHouseRetryPolicy" />.
            </summary>
        </member>
        <member name="M:LinqToDB.DataProvider.ClickHouse.ClickHouseRetryPolicy.#ctor(System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:LinqToDB.DataProvider.ClickHouse.ClickHouseRetryPolicy" />.
            </summary>
            <param name="maxRetryCount"> The maximum number of retry attempts. </param>
        </member>
        <member name="M:LinqToDB.DataProvider.ClickHouse.ClickHouseRetryPolicy.#ctor(System.Int32,System.TimeSpan,System.Collections.Generic.ICollection{System.Int32})">
            <summary>
                Creates a new instance of <see cref="T:LinqToDB.DataProvider.ClickHouse.ClickHouseRetryPolicy" />.
            </summary>
            <param name="maxRetryCount">The maximum number of retry attempts.</param>
            <param name="maxRetryDelay">The maximum delay in milliseconds between retries.</param>
            <param name="errorNumbersToAdd">Additional SQL error numbers that should be considered transient.</param>
        </member>
        <member name="P:LinqToDB.DataProvider.ClickHouse.ClickHouseTools.DefaultBulkCopyType">
            <summary>
            Default bulk copy mode.
            Default value: <c>BulkCopyType.ProviderSpecific</c>.
            </summary>
        </member>
        <member name="T:LinqToDB.DataProvider.ClickHouse.ClickHouseTransientExceptionDetector">
            <summary>
            Detects the exceptions caused by transient failures.
            Currently handles only:
            <list type="bullet">
            <item>Octonica client ClickHouseException with codes ClickHouseErrorCodes.InvalidConnectionState, ClickHouseErrorCodes.ConnectionClosed, ClickHouseErrorCodes.NetworkError</item>
            </list>
            </summary>
        </member>
        <member name="M:LinqToDB.DataProvider.DataProviderBase.ExecuteScope(LinqToDB.Data.DataConnection)">
            <summary>
            Creates disposable object, which should be disposed by caller after database query execution completed.
            Could be used to execute provider's method with scope-specific settings, e.g. with Invariant culture to
            workaround incorrect culture handling in provider.
            </summary>
            <param name="dataConnection">Current data connection object.</param>
            <returns>Scoped execution disposable object or <c>null</c> if provider doesn't need scoped configuration.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.DataTools.EscapeUnterminatedBracket(System.String)">
            <summary>
            Improved version of <c>Replace("[", "[[]")</c> code, used before.
            </summary>
        </member>
        <member name="P:LinqToDB.DataProvider.DB2.DB2BulkCopy.MaxParameters">
            <remarks>
            Settings based on https://www.ibm.com/docs/en/i/7.3?topic=reference-sql-limits
            We subtract 1 here to be safe since some ADO providers use parameter for command itself.
            </remarks>
        </member>
        <member name="P:LinqToDB.DataProvider.DB2.DB2BulkCopy.MaxSqlLength">
            <remarks>
            Setting based on https://www.ibm.com/docs/en/i/7.3?topic=reference-sql-limits
            Max is actually 2MIB, but we keep a lower number here to avoid the cost of huge statements.
            </remarks>
        </member>
        <member name="M:LinqToDB.DataProvider.DB2.DB2Tools.CreateDataConnection(System.String,LinqToDB.DataProvider.DB2.DB2Version)">
            <summary>
            Creates <see cref="T:LinqToDB.Data.DataConnection"/> object using provided DB2 connection string.
            </summary>
            <param name="connectionString">Connection string.</param>
            <param name="version">DB2 version.</param>
            <returns><see cref="T:LinqToDB.Data.DataConnection"/> instance.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.DB2.DB2Tools.CreateDataConnection(System.Data.Common.DbConnection,LinqToDB.DataProvider.DB2.DB2Version)">
            <summary>
            Creates <see cref="T:LinqToDB.Data.DataConnection"/> object using provided connection object.
            </summary>
            <param name="connection">Connection instance.</param>
            <param name="version">DB2 version.</param>
            <returns><see cref="T:LinqToDB.Data.DataConnection"/> instance.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.DB2.DB2Tools.CreateDataConnection(System.Data.Common.DbTransaction,LinqToDB.DataProvider.DB2.DB2Version)">
            <summary>
            Creates <see cref="T:LinqToDB.Data.DataConnection"/> object using provided transaction object.
            </summary>
            <param name="transaction">Transaction instance.</param>
            <param name="version">DB2 version.</param>
            <returns><see cref="T:LinqToDB.Data.DataConnection"/> instance.</returns>
        </member>
        <member name="P:LinqToDB.DataProvider.DB2.DB2Tools.DefaultBulkCopyType">
            <summary>
            Default bulk copy mode, used for DB2 by <see cref="M:LinqToDB.Data.DataConnectionExtensions.BulkCopy``1(LinqToDB.Data.DataConnection,System.Collections.Generic.IEnumerable{``0})"/>
            methods, if mode is not specified explicitly.
            Default value: <see cref="F:LinqToDB.Data.BulkCopyType.MultipleRows"/>.
            </summary>
        </member>
        <member name="P:LinqToDB.DataProvider.Firebird.FirebirdBulkCopy.MaxSqlLength">
            <remarks>
            Number based on http://www.firebirdfaq.org/faq197/
            TODO: Add Compat Switch. Firebird 2.5 has 64k limit, Firebird 3.0+ 10MB.
            </remarks>
        </member>
        <member name="P:LinqToDB.DataProvider.Firebird.FirebirdBulkCopy.MaxParameters">
            <remarks>
            Based on https://github.com/FirebirdSQL/firebird/blob/799bca3ca5f9eb604433addc0f2b7cb3b6c07275/src/dsql/DsqlCompilerScratch.cpp#L528
            Max is 65536/2. We subtract one from that in case ADO provider uses parameter for statemnt.
            </remarks>
        </member>
        <member name="P:LinqToDB.DataProvider.Firebird.FirebirdConfiguration.IdentifierQuoteMode">
            <summary>
            Specifies how identifiers like table and field names should be quoted.
            </summary>
            <remarks>
            Default value: <see cref="F:LinqToDB.DataProvider.Firebird.FirebirdIdentifierQuoteMode.Auto"/>.
            </remarks>
        </member>
        <member name="F:LinqToDB.DataProvider.Firebird.FirebirdConfiguration.IsLiteralEncodingSupported">
            <summary>
            Specifies that Firebird supports literal encoding. Availiable from version 2.5.
            </summary>
        </member>
        <member name="T:LinqToDB.DataProvider.Firebird.FirebirdIdentifierQuoteMode">
            <summary>
            Possible modes for Firebird identifier quotes. This enumeration covers only identifier quotation logic
            and don't handle identifier length limits.
            </summary>
        </member>
        <member name="F:LinqToDB.DataProvider.Firebird.FirebirdIdentifierQuoteMode.None">
            <summary>
            Do not quote identifiers.
            LINQ To DB will not check identifiers for validity (spaces, reserved words) is this mode.
            This mode should be used only for SQL Dialect &lt; 3 and it is developer's responsibility to
            ensure that there is no identifiers in use that require quotation.
            </summary>
        </member>
        <member name="F:LinqToDB.DataProvider.Firebird.FirebirdIdentifierQuoteMode.Quote">
            <summary>
            Always quote identifiers.
            LINQ To DB will quote all identifiers, even if it is not required.
            Select this mode, if you need to preserve identifiers casing.
            Quoted identifiers not supported by SQL Dialect &lt; 3.
            </summary>
        </member>
        <member name="F:LinqToDB.DataProvider.Firebird.FirebirdIdentifierQuoteMode.Auto">
            <summary>
            Quote identifiers if needed.
            LINQ To DB will quote identifiers, if they are not valid without quotation.
            This includes:
            - use of reserved words;
            - use of any characters except latin letters, digits, _ and $;
            - use digit, _ or $ as first character.
            This is default mode.
            Note that if you need to preserve casing of identifiers, you should use <see cref="F:LinqToDB.DataProvider.Firebird.FirebirdIdentifierQuoteMode.Quote"/> mode.
            Quoted identifiers not supported by SQL Dialect &lt; 3.
            </summary>
        </member>
        <member name="P:LinqToDB.DataProvider.Firebird.FirebirdProviderAdapter.FbDecFloatType">
            <summary>
            FB client 7.10.0+.
            </summary>
        </member>
        <member name="M:LinqToDB.DataProvider.Firebird.FirebirdSchemaProvider.BuildTableFunctionLoadTableSchemaCommand(LinqToDB.SchemaProvider.ProcedureSchema,System.String)">
            <summary>
            Builds table function call command.
            </summary>
        </member>
        <member name="M:LinqToDB.DataProvider.Firebird.FirebirdSqlBuilder.IsValidIdentifier(System.String)">
            <summary>
            Check if identifier is valid without quotation. Expects non-zero length string as input.
            </summary>
        </member>
        <member name="M:LinqToDB.DataProvider.IDataProvider.InitCommand(LinqToDB.Data.DataConnection,System.Data.Common.DbCommand,System.Data.CommandType,System.String,LinqToDB.Data.DataParameter[],System.Boolean)">
            <summary>
            Initializes <see cref="T:LinqToDB.Data.DataConnection"/> command object.
            </summary>
            <param name="dataConnection">Data connection instance to initialize with new command.</param>
            <param name="command">Command instance to initialize.</param>
            <param name="commandType">Type of command.</param>
            <param name="commandText">Command SQL.</param>
            <param name="parameters">Optional list of parameters to add to initialized command.</param>
            <param name="withParameters">Flag to indicate that command has parameters. Used to configure parameters support when method called without parameters and parameters added later to command.</param>
            <returns>Initialized command instance.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.IDataProvider.ExecuteScope(LinqToDB.Data.DataConnection)">
            <summary>
            Returns scoped context object to wrap calls of Execute* methods.
            Using this, provider could e.g. change thread culture during Execute* calls.
            Following calls wrapped right now:
            DataConnection.ExecuteNonQuery
            DataConnection.ExecuteReader.
            </summary>
            <param name="dataConnection">Data connection instance used with scope.</param>
            <returns>Returns disposable scope object. Can be <c>null</c>.</returns>
        </member>
        <member name="T:LinqToDB.DataProvider.IDynamicProviderAdapter">
            <summary>
            Contains base information about ADO.NET provider.
            Could be extended by specific implementation to expose additional provider-specific services.
            </summary>
        </member>
        <member name="P:LinqToDB.DataProvider.IDynamicProviderAdapter.ConnectionType">
            <summary>
            Gets type, that implements <see cref="T:System.Data.Common.DbConnection"/> for current ADO.NET provider.
            </summary>
        </member>
        <member name="P:LinqToDB.DataProvider.IDynamicProviderAdapter.DataReaderType">
            <summary>
            Gets type, that implements <see cref="T:System.Data.Common.DbDataReader"/> for current ADO.NET provider.
            </summary>
        </member>
        <member name="P:LinqToDB.DataProvider.IDynamicProviderAdapter.ParameterType">
            <summary>
            Gets type, that implements <see cref="T:System.Data.Common.DbParameter"/> for current ADO.NET provider.
            </summary>
        </member>
        <member name="P:LinqToDB.DataProvider.IDynamicProviderAdapter.CommandType">
            <summary>
            Gets type, that implements <see cref="T:System.Data.Common.DbCommand"/> for current ADO.NET provider.
            </summary>
        </member>
        <member name="P:LinqToDB.DataProvider.IDynamicProviderAdapter.TransactionType">
            <summary>
            Gets type, that implements <see cref="T:System.Data.Common.DbTransaction"/> for current ADO.NET provider.
            For providers/databases without transaction support contains <c>null</c>.
            </summary>
        </member>
        <member name="F:LinqToDB.DataProvider.Informix.InformixConfiguration.ExplicitFractionalSecondsSeparator">
            <summary>
            Enables use of explicit fractional seconds separator in datetime values. Must be enabled for Informix starting from v11.70.xC8 and v12.10.xC2.
            More details at: https://www.ibm.com/support/knowledgecenter/SSGU8G_12.1.0/com.ibm.po.doc/new_features_ce.htm#newxc2__xc2_datetime
            </summary>
        </member>
        <member name="P:LinqToDB.DataProvider.Informix.InformixProviderAdapter.IsIDSProvider">
            <summary>
            IDS or SQLI provider.
            </summary>
        </member>
        <member name="M:LinqToDB.DataProvider.Informix.InformixSqlBuilder.IsValidIdentifier(System.String)">
            <summary>
            Check if identifier is valid without quotation. Expects non-zero length string as input.
            </summary>
        </member>
        <member name="P:LinqToDB.DataProvider.MySql.MySqlBulkCopy.MaxParameters">
            <summary>
            Settings based on https://www.jooq.org/doc/3.12/manual/sql-building/dsl-context/custom-settings/settings-inline-threshold/
            MySQL supports more but realistically this might be too much already for practical cases.
            </summary>
        </member>
        <member name="P:LinqToDB.DataProvider.MySql.MySqlBulkCopy.MaxSqlLength">
            <summary>
            MySQL can support much larger sizes, based on
            https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_allowed_packet
            But we keep a smaller number here to avoid choking the network.
            </summary>
        </member>
        <member name="T:LinqToDB.DataProvider.MySql.MySqlExtensions.MatchModifier">
            <summary>
            Search modifier for MATCH AGAINST full-text search predicate.
            </summary>
        </member>
        <member name="F:LinqToDB.DataProvider.MySql.MySqlExtensions.MatchModifier.NaturalLanguage">
            <summary>
            Applies 'IN NATURAL LANGUAGE MODE' (default value) search modifier.
            </summary>
        </member>
        <member name="F:LinqToDB.DataProvider.MySql.MySqlExtensions.MatchModifier.Boolean">
            <summary>
            Applies 'IN BOOLEAN MODE' (default value) search modifier.
            </summary>
        </member>
        <member name="F:LinqToDB.DataProvider.MySql.MySqlExtensions.MatchModifier.WithQueryExpansion">
            <summary>
            Applies 'IN NATURAL LANGUAGE MODE WITH QUERY EXPANSION'/'WITH QUERY EXPANSION' search modifier.
            </summary>
        </member>
        <member name="M:LinqToDB.DataProvider.MySql.MySqlExtensions.Match(LinqToDB.DataProvider.MySql.IMySqlExtensions,System.String,System.Object[])">
            <summary>
            Applies full-text search condition using MATCH AGAINST predicate against specified full-text columns using default mode (IN NATURAL LANGUAGE MODE).
            Example: MATCH(col1, col2) AGAINST('search query').
            </summary>
            <param name="ext">Extension point.</param>
            <param name="search">Full-text search condition.</param>
            <param name="columns">Full-text columns that should be queried.</param>
            <returns>Returns <c>true</c> if full-text search found matching records.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.MySql.MySqlExtensions.MatchRelevance(LinqToDB.DataProvider.MySql.IMySqlExtensions,System.String,System.Object[])">
            <summary>
            Calculates relevance of full-text search for current record using MATCH AGAINST predicate against specified full-text columns using default mode (IN NATURAL LANGUAGE MODE).
            Example: MATCH(col1, col2) AGAINST('search query').
            </summary>
            <param name="ext">Extension point.</param>
            <param name="search">Full-text search condition.</param>
            <param name="columns">Full-text columns that should be queried.</param>
            <returns>Returns full-text search relevance value for current record.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.MySql.MySqlExtensions.Match(LinqToDB.DataProvider.MySql.IMySqlExtensions,LinqToDB.DataProvider.MySql.MySqlExtensions.MatchModifier,System.String,System.Object[])">
            <summary>
            Applies full-text search condition using MATCH AGAINST predicate against specified full-text columns using specified search modifier.
            Example: MATCH(col1, col2) AGAINST('search query' MODIFIER).
            </summary>
            <param name="ext">Extension point.</param>
            <param name="modifier">Search modifier.</param>
            <param name="search">Full-text search condition.</param>
            <param name="columns">Full-text columns that should be queried.</param>
            <returns>Returns <c>true</c> if full-text search found matching records.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.MySql.MySqlExtensions.MatchRelevance(LinqToDB.DataProvider.MySql.IMySqlExtensions,LinqToDB.DataProvider.MySql.MySqlExtensions.MatchModifier,System.String,System.Object[])">
            <summary>
            Calculates relevance of full-text search for current record using MATCH AGAINST predicate against specified full-text columns using specified search modifier.
            Example: MATCH(col1, col2) AGAINST('search query' MODIFIER).
            </summary>
            <param name="ext">Extension point.</param>
            <param name="modifier">Search modifier.</param>
            <param name="search">Full-text search condition.</param>
            <param name="columns">Full-text columns that should be queried.</param>
            <returns>Returns full-text search relevance value for current record.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.MySql.MySqlHints.QueryBlockHint``2(LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable{``0},System.String,``1[])">
            <summary>
            Adds a query hint to the generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <typeparam name="TParam">Table hint parameter type.</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added to join in generated query.</param>
            <param name="hintParameters">Table hint parameters.</param>
            <returns>Table-like query source with table hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.MySql.MySqlHints.TableHint``1(LinqToDB.DataProvider.MySql.IMySqlSpecificTable{``0},System.String)">
            <summary>
            Adds a table hint to a table in generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <param name="table">Table-like query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <returns>Table-like query source with table hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.MySql.MySqlHints.TableHint``2(LinqToDB.DataProvider.MySql.IMySqlSpecificTable{``0},System.String,``1)">
            <summary>
            Adds a table hint to a table in generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <typeparam name="TParam">Table hint parameter type.</typeparam>
            <param name="table">Table-like query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <param name="hintParameter">Table hint parameter.</param>
            <returns>Table-like query source with table hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.MySql.MySqlHints.TableHint``2(LinqToDB.DataProvider.MySql.IMySqlSpecificTable{``0},System.String,``1[])">
            <summary>
            Adds a table hint to a table in generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <typeparam name="TParam">Table hint parameter type.</typeparam>
            <param name="table">Table-like query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <param name="hintParameters">Table hint parameters.</param>
            <returns>Table-like query source with table hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.MySql.MySqlHints.TablesInScopeHint``1(LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable{``0},System.String)">
            <summary>
            Adds a table hint to all the tables in the method scope.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <returns>Query source with table hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.MySql.MySqlHints.TablesInScopeHint``2(LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable{``0},System.String,``1)">
            <summary>
            Adds a table hint to all the tables in the method scope.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <typeparam name="TParam">Table hint parameter type.</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <param name="hintParameter">Table hint parameter.</param>
            <returns>Query source with table hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.MySql.MySqlHints.TablesInScopeHint``1(LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable{``0},System.String,System.Object[])">
            <summary>
            Adds a table hint to all the tables in the method scope.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <param name="hintParameters">Table hint parameters.</param>
            <returns>Query source with table hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.MySql.MySqlHints.TableIndexHint``1(LinqToDB.DataProvider.MySql.IMySqlSpecificTable{``0},System.String)">
            <summary>
            Adds an index hint to a table in generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <param name="table">Table-like query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <returns>Table-like query source with index hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.MySql.MySqlHints.TableIndexHint``2(LinqToDB.DataProvider.MySql.IMySqlSpecificTable{``0},System.String,``1)">
            <summary>
            Adds an index hint to a table in generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <typeparam name="TParam">Table hint parameter type.</typeparam>
            <param name="table">Table-like query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <param name="hintParameter">Table hint parameter.</param>
            <returns>Table-like query source with index hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.MySql.MySqlHints.TableIndexHint``2(LinqToDB.DataProvider.MySql.IMySqlSpecificTable{``0},System.String,``1[])">
            <summary>
            Adds an index hint to a table in generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <typeparam name="TParam">Table hint parameter type.</typeparam>
            <param name="table">Table-like query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <param name="hintParameters">Table hint parameters.</param>
            <returns>Table-like query source with index hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.MySql.MySqlHints.SubQueryHint``1(LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable{``0},System.String)">
            <summary>
            Adds a query hint to a generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <returns>Query source with hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.MySql.MySqlHints.SubQueryHint``2(LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable{``0},System.String,``1)">
            <summary>
            Adds a query hint to the generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <typeparam name="TParam">Hint parameter type</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <param name="hintParameter">Hint parameter.</param>
            <returns>Query source with hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.MySql.MySqlHints.SubQueryHint``2(LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable{``0},System.String,``1[])">
            <summary>
            Adds a query hint to the generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <typeparam name="TParam">Table hint parameter type.</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <param name="hintParameters">Table hint parameters.</param>
            <returns>Table-like query source with hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.MySql.MySqlHints.QueryHint``1(LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable{``0},System.String)">
            <summary>
            Adds a query hint to a generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <returns>Query source with hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.MySql.MySqlHints.QueryHint``2(LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable{``0},System.String,``1)">
            <summary>
            Adds a query hint to the generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <typeparam name="TParam">Hint parameter type</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <param name="hintParameter">Hint parameter.</param>
            <returns>Query source with hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.MySql.MySqlHints.QueryHint``2(LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable{``0},System.String,``1[])">
            <summary>
            Adds a query hint to the generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <typeparam name="TParam">Table hint parameter type.</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <param name="hintParameters">Table hint parameters.</param>
            <returns>Table-like query source with hints.</returns>
        </member>
        <member name="P:LinqToDB.DataProvider.MySql.MySqlProviderAdapter.MySqlDecimalType">
            <summary>
            Not supported by MySqlConnector prior to 2.1.0.
            </summary>
        </member>
        <member name="P:LinqToDB.DataProvider.MySql.MySqlProviderAdapter.MySqlDecimalGetter">
            <summary>
            Not needed for MySqlConnector as it supports MySqlDecimal parameters.
            </summary>
        </member>
        <member name="P:LinqToDB.DataProvider.MySql.MySqlProviderAdapter.GetMySqlDecimalMethodName">
            <summary>
            Not supported by MySqlConnector prior to 2.1.0.
            </summary>
        </member>
        <member name="P:LinqToDB.DataProvider.MySql.MySqlProviderAdapter.GetDateTimeOffsetMethodName">
            <summary>
            MySqlConnector-only.
            </summary>
        </member>
        <member name="P:LinqToDB.DataProvider.MySql.MySqlProviderAdapter.GetDbType">
            <summary>
            Returns object, because both providers use different enums and we anyway don't need typed value.
            </summary>
        </member>
        <member name="T:LinqToDB.DataProvider.OleDbProviderAdapter.ColumnFlags">
            <summary>
            DBCOLUMNFLAGS OLE DB enumeration.
            https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ms722704(v=vs.85).
            </summary>
        </member>
        <member name="T:LinqToDB.DataProvider.Oracle.AlternativeBulkCopy">
            <summary>
            Defines type of multi-row INSERT operation to generate for <see cref="F:LinqToDB.Data.BulkCopyType.RowByRow"/> bulk copy mode.
            </summary>
        </member>
        <member name="F:LinqToDB.DataProvider.Oracle.AlternativeBulkCopy.InsertAll">
            <summary>
            This mode generates INSERT ALL statement.
            Note that INSERT ALL doesn't support sequences and will use single generated value for all rows.
            <code>
            INSERT ALL
                INTO target_table VALUES(/*row data*/)
                ...
                INTO target_table VALUES(/*row data*/)
            </code>
            </summary>
        </member>
        <member name="F:LinqToDB.DataProvider.Oracle.AlternativeBulkCopy.InsertInto">
            <summary>
            This mode performs regular INSERT INTO query with array of values for each column.
            <code>
            INSERT INTO target_table(/*columns*/)
                VALUES(:column1ArrayParameter, ..., :columnXArrayParameter)
            </code>
            </summary>
        </member>
        <member name="F:LinqToDB.DataProvider.Oracle.AlternativeBulkCopy.InsertDual">
            <summary>
            This mode generates INSERT ... SELECT statement.
            <code>
            INSERT INTO target_table(/*columns*/)
                SELECT /*row data*/ FROM DUAL
                UNION ALL
                ...
                UNION ALL
                SELECT /*row data*/ FROM DUAL
            </code>
            </summary>
        </member>
        <member name="M:LinqToDB.DataProvider.Oracle.Oracle11SqlOptimizer.ReplaceTakeSkipWithRowNum(LinqToDB.SqlQuery.SqlStatement,System.Boolean)">
            <summary>
            Replaces Take/Skip by ROWNUM usage.
            See <a href="https://blogs.oracle.com/oraclemagazine/on-rownum-and-limiting-results">'Pagination with ROWNUM'</a> for more information.
            </summary>
            <param name="statement">Statement which may contain take/skip modifiers.</param>
            <param name="onlySubqueries">Indicates when transformation needed only for subqueries.</param>
            <returns>The same <paramref name="statement"/> or modified statement when optimization has been performed.</returns>
        </member>
        <member name="F:LinqToDB.DataProvider.Oracle.OracleBulkCopy._maxParameters">
            <remarks>
            Settings based on https://www.jooq.org/doc/3.12/manual/sql-building/dsl-context/custom-settings/settings-inline-threshold/
            We subtract 1 based on possibility of provider using parameter for command.
            </remarks>
        </member>
        <member name="F:LinqToDB.DataProvider.Oracle.OracleBulkCopy._maxSqlLength">
            <summary>
            Setting is conservative, based on https://docs.oracle.com/cd/A58617_01/server.804/a58242/ch5.htm
            Max is actually more arbitrary in later versions than Oracle 8.
            </summary>
        </member>
        <member name="M:LinqToDB.DataProvider.Oracle.OracleHints.TableHint``1(LinqToDB.DataProvider.Oracle.IOracleSpecificTable{``0},System.String)">
            <summary>
            Adds a table hint to a table in generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <param name="table">Table-like query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <returns>Table-like query source with table hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.Oracle.OracleHints.TableHint``2(LinqToDB.DataProvider.Oracle.IOracleSpecificTable{``0},System.String,``1)">
            <summary>
            Adds a table hint to a table in generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <typeparam name="TParam">Table hint parameter type.</typeparam>
            <param name="table">Table-like query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <param name="hintParameter">Table hint parameter.</param>
            <returns>Table-like query source with table hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.Oracle.OracleHints.TableHint``2(LinqToDB.DataProvider.Oracle.IOracleSpecificTable{``0},System.String,``1[])">
            <summary>
            Adds a table hint to a table in generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <typeparam name="TParam">Table hint parameter type.</typeparam>
            <param name="table">Table-like query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <param name="hintParameters">Table hint parameters.</param>
            <returns>Table-like query source with table hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.Oracle.OracleHints.TablesInScopeHint``1(LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable{``0},System.String)">
            <summary>
            Adds a table hint to all the tables in the method scope.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <returns>Query source with join hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.Oracle.OracleHints.TablesInScopeHint``2(LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable{``0},System.String,``1)">
            <summary>
            Adds a table hint to all the tables in the method scope.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <typeparam name="TParam">Table hint parameter type.</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <param name="hintParameter">Table hint parameter.</param>
            <returns>Query source with join hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.Oracle.OracleHints.TablesInScopeHint``1(LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable{``0},System.String,System.Object[])">
            <summary>
            Adds a table hint to all the tables in the method scope.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <param name="hintParameters">Table hint parameters.</param>
            <returns>Query source with join hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.Oracle.OracleHints.QueryHint``1(LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable{``0},System.String)">
            <summary>
            Adds a query hint to a generated query.
            <code>
            // will produce following SQL code in generated query: INNER LOOP JOIN
            var tableWithHint = db.Table.JoinHint("LOOP");
            </code>
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <returns>Query source with join hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.Oracle.OracleHints.QueryHint``2(LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable{``0},System.String,``1)">
            <summary>
            Adds a query hint to the generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <typeparam name="TParam">Hint parameter type</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <param name="hintParameter">Hint parameter.</param>
            <returns>Query source with join hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.Oracle.OracleHints.QueryHint``2(LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable{``0},System.String,``1[])">
            <summary>
            Adds a query hint to the generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <typeparam name="TParam">Table hint parameter type.</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <param name="hintParameters">Table hint parameters.</param>
            <returns>Table-like query source with table hints.</returns>
        </member>
        <member name="T:LinqToDB.DataProvider.Oracle.OracleProvider">
            <summary>
            Lists supported Oracle ADO.NET providers.
            </summary>
        </member>
        <member name="F:LinqToDB.DataProvider.Oracle.OracleProvider.Managed">
            <summary>
            Oracle.ManagedDataAccess and Oracle.ManagedDataAccess.Core providers.
            </summary>
        </member>
        <member name="F:LinqToDB.DataProvider.Oracle.OracleProvider.Native">
            <summary>
            Oracle.DataAccess legacy native provider for .NET Framework (ODP.NET).
            </summary>
        </member>
        <member name="F:LinqToDB.DataProvider.Oracle.OracleProvider.Devart">
            <summary>
            Devart.Data.Oracle provider.
            </summary>
        </member>
        <member name="T:LinqToDB.DataProvider.Oracle.OracleProviderAdapter.OracleDbType">
            <summary>
            Intermediate enum to expose from adapter instead of two incompatible provider-specific enums.
            </summary>
        </member>
        <member name="T:LinqToDB.DataProvider.Oracle.OracleProviderAdapter.BulkCopyOptions">
            <summary>
            Intermediate enum to expose from adapter instead of two incompatible provider-specific enums.
            </summary>
        </member>
        <member name="F:LinqToDB.DataProvider.Oracle.OracleTools.UseAlternativeBulkCopy">
            <summary>
            Specifies type of multi-row INSERT operation to generate for <see cref="F:LinqToDB.Data.BulkCopyType.RowByRow"/> bulk copy mode.
            Default value: <see cref="F:LinqToDB.DataProvider.Oracle.AlternativeBulkCopy.InsertAll"/>.
            </summary>
        </member>
        <member name="P:LinqToDB.DataProvider.Oracle.OracleTools.DontEscapeLowercaseIdentifiers">
            <summary>
            Gets or sets flag to tell LinqToDB to quote identifiers, if they contain lowercase letters.
            Default value: <c>false</c>.
            This flag is added for backward compatibility and not recommended for use with new applications.
            </summary>
        </member>
        <member name="M:LinqToDB.DataProvider.Oracle.OracleSqlBuilderBase.IsValidIdentifier(System.String)">
            <summary>
            Check if identifier is valid without quotation. Expects non-zero length string as input.
            </summary>
        </member>
        <member name="F:LinqToDB.DataProvider.Oracle.OracleVersion.v11">
            <summary>
            Oracle 11g dialect.
            </summary>
        </member>
        <member name="F:LinqToDB.DataProvider.Oracle.OracleVersion.v12">
            <summary>
            Oracle 12c+ dialect.
            </summary>
        </member>
        <member name="F:LinqToDB.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Citext">
            <summary>
            Npgsql 3.0.?.
            </summary>
        </member>
        <member name="F:LinqToDB.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Geography">
            <summary>
            Npgsql 4.0.0+.
            </summary>
        </member>
        <member name="F:LinqToDB.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Geometry">
            <summary>
            Npgsql 3.1.0+.
            </summary>
        </member>
        <member name="F:LinqToDB.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Int2Vector">
            <summary>
            Npgsql 3.1.0+.
            </summary>
        </member>
        <member name="F:LinqToDB.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.MacAddr8">
            <summary>
            Npgsql 3.2.7+.
            </summary>
        </member>
        <member name="F:LinqToDB.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Regconfig">
            <summary>
            Npgsql 4.0.3+.
            </summary>
        </member>
        <member name="F:LinqToDB.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Regtype">
            <summary>
            Npgsql 3.0.2.
            </summary>
        </member>
        <member name="F:LinqToDB.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Tid">
            <summary>
            Npgsql 3.1.0+.
            </summary>
        </member>
        <member name="F:LinqToDB.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.TimestampTz">
            <summary>
            Added as alias to <see cref="F:LinqToDB.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.TimestampTZ"/> in npgsql 4.0.0.
            Don't use it, as it will not work with 3.x.
            </summary>
        </member>
        <member name="F:LinqToDB.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.TimeTz">
            <summary>
            Added as alias to <see cref="F:LinqToDB.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.TimeTZ"/> in npgsql 4.0.0.
            Don't use it, as it will not work with 3.x.
            </summary>
        </member>
        <member name="M:LinqToDB.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlBinaryImporter.Cancel">
            <summary>
            Npgsql 3.x provides Cancel method.
            Npgsql 4.x uses Complete method.
            https://github.com/npgsql/npgsql/issues/1646.
            </summary>
        </member>
        <member name="P:LinqToDB.DataProvider.PostgreSQL.PostgreSQLBulkCopy.MaxParameters">
            <remarks>
            Settings based on https://www.jooq.org/doc/3.12/manual/sql-building/dsl-context/custom-settings/settings-inline-threshold/
            We subtract 1 based on possibility of provider using parameter for command.
            </remarks>
        </member>
        <member name="P:LinqToDB.DataProvider.PostgreSQL.PostgreSQLBulkCopy.MaxSqlLength">
            <summary>
            Setting based on https://stackoverflow.com/a/4937695/2937845
            Max is actually 2GiB, but we keep a lower number here to avoid the cost of huge statements.
            </summary>
        </member>
        <member name="F:LinqToDB.DataProvider.PostgreSQL.PostgreSQLDataProvider._npgsqlTypeMap">
            <summary>
            Map of canonical PostgreSQL type name to NpgsqlDbType enumeration value.
            This map shouldn't be used directly, you should resolve PostgreSQL types using
            <see cref="M:LinqToDB.DataProvider.PostgreSQL.PostgreSQLDataProvider.GetNativeType(System.String,System.Boolean)"/> method, which takes into account different type aliases.
            </summary>
        </member>
        <member name="M:LinqToDB.DataProvider.PostgreSQL.PostgreSQLDataProvider.GetNativeType(System.String,System.Boolean)">
            <summary>
            Returns <see cref="T:LinqToDB.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType"/> enumeration value for requested postgresql type or null if type cannot be resolved.
            This method expects correct PostgreSQL type as input.
            Custom types not supported. Also could fail on some types as PostgreSQL have a lot of ways to write same
            type.
            </summary>
            <remarks>
            Returned value could be invalid for <see cref="T:LinqToDB.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType"/> type, if range/array flags
            were applied. Don't try to use results of this function for anything except passing it directly to npgsql.
            </remarks>
        </member>
        <member name="M:LinqToDB.DataProvider.PostgreSQL.PostgreSQLHints.SubQueryTableHint``1(LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable{``0},System.String,LinqToDB.Sql.SqlID[])">
            <summary>
            Adds join hint to a generated query.
            <code>
            // will produce following SQL code in generated query: INNER LOOP JOIN
            var tableWithHint = db.Table.JoinHint("LOOP");
            </code>
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added to join in generated query.</param>
            <param name="tableIDs">Table IDs.</param>
            <returns>Query source with join hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.PostgreSQL.PostgreSQLHints.SubQueryTableHint``1(LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable{``0},System.String,System.String,LinqToDB.Sql.SqlID[])">
            <summary>
            Adds join hint to a generated query.
            <code>
            // will produce following SQL code in generated query: INNER LOOP JOIN
            var tableWithHint = db.Table.JoinHint("LOOP");
            </code>
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added to join in generated query.</param>
            <param name="hint2">NOWAIT | SKIP LOCKED</param>
            <param name="tableIDs">Table IDs.</param>
            <returns>Query source with join hints.</returns>
        </member>
        <member name="P:LinqToDB.DataProvider.PostgreSQL.PostgreSQLTools.NormalizeTimestampData">
            <summary>
            Enables normalization of <see cref="T:System.DateTime"/> and <see cref="T:System.DateTimeOffset"/> data, passed to query
            as parameter or passed to <see cref="M:LinqToDB.Data.DataConnectionExtensions.BulkCopy``1(LinqToDB.ITable{``0},System.Collections.Generic.IEnumerable{``0})"/> APIs,
            to comform with Npgsql 6 requerements:
            <list type="bullet">
            <item>convert <see cref="T:System.DateTimeOffset"/> value to UTC value with zero <see cref="P:System.DateTimeOffset.Offset"/></item>
            <item>Use <see cref="F:System.DateTimeKind.Utc"/> for <see cref="T:System.DateTime"/> timestamptz values</item>
            <item>Use <see cref="F:System.DateTimeKind.Unspecified"/> for <see cref="T:System.DateTime"/> timestamp values with <see cref="F:System.DateTimeKind.Utc"/> kind</item>
            </list>
            Default value: <c>true</c>.
            </summary>
        </member>
        <member name="T:LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion">
            <summary>
            PostgreSQL language dialect. Version defines minimal PostgreSQL version to use this dialect.
            </summary>
        </member>
        <member name="F:LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion.v92">
            <summary>
            PostgreSQL 9.2+ SQL dialect.
            </summary>
        </member>
        <member name="F:LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion.v93">
            <summary>
            PostgreSQL 9.3+ SQL dialect.
            </summary>
        </member>
        <member name="F:LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion.v95">
            <summary>
            PostgreSQL 9.5+ SQL dialect.
            </summary>
        </member>
        <member name="F:LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion.v15">
            <summary>
            PostgreSQL 15+ SQL dialect.
            </summary>
        </member>
        <member name="F:LinqToDB.DataProvider.SqlCe.SqlCeConfiguration.InlineFunctionParameters">
            <summary>
            Enables force inlining of function parameters to support SQL CE 3.0.
            Default value: <c>false</c>.
            </summary>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlCe.SqlCeHints.TableHint``1(LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable{``0},System.String)">
            <summary>
            Adds a table hint to a table in generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <param name="table">Table-like query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <returns>Table-like query source with table hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlCe.SqlCeHints.TableHint``2(LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable{``0},System.String,``1)">
            <summary>
            Adds a table hint to a table in generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <typeparam name="TParam">Table hint parameter type.</typeparam>
            <param name="table">Table-like query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <param name="hintParameter">Table hint parameter.</param>
            <returns>Table-like query source with table hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlCe.SqlCeHints.TableHint``2(LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable{``0},System.String,``1[])">
            <summary>
            Adds a table hint to a table in generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <typeparam name="TParam">Table hint parameter type.</typeparam>
            <param name="table">Table-like query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <param name="hintParameters">Table hint parameters.</param>
            <returns>Table-like query source with table hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlCe.SqlCeHints.TablesInScopeHint``1(LinqToDB.DataProvider.SqlCe.ISqlCeSpecificQueryable{``0},System.String)">
            <summary>
            Adds a table hint to all the tables in the method scope.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <returns>Query source with join hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlCe.SqlCeHints.TablesInScopeHint``2(LinqToDB.DataProvider.SqlCe.ISqlCeSpecificQueryable{``0},System.String,``1)">
            <summary>
            Adds a table hint to all the tables in the method scope.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <typeparam name="TParam">Table hint parameter type.</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <param name="hintParameter">Table hint parameter.</param>
            <returns>Query source with join hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlCe.SqlCeHints.TablesInScopeHint``1(LinqToDB.DataProvider.SqlCe.ISqlCeSpecificQueryable{``0},System.String,System.Object[])">
            <summary>
            Adds a table hint to all the tables in the method scope.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <param name="hintParameters">Table hint parameters.</param>
            <returns>Query source with join hints.</returns>
        </member>
        <member name="P:LinqToDB.DataProvider.SQLite.SQLiteBulkCopy.MaxParameters">
            <remarks>
            Settings based on https://www.jooq.org/doc/3.12/manual/sql-building/dsl-context/custom-settings/settings-inline-threshold/
            We subtract 1 based on possibility of ADO Provider using parameter for command.
            </remarks>
        </member>
        <member name="P:LinqToDB.DataProvider.SQLite.SQLiteBulkCopy.MaxSqlLength">
            <remarks>
            Based on https://www.sqlite.org/limits.html.
            Since SQLite is parsed locally by the lib, we aren't worried about network congestion and keep the max.
            </remarks>
        </member>
        <member name="M:LinqToDB.DataProvider.SQLite.SQLiteDataProvider.#ctor(System.String)">
            <summary>
            Creates the specified SQLite provider based on the provider name.
            </summary>
            <param name="name">If ProviderName.SQLite is provided,
            the detection mechanism preferring System.Data.SQLite
            to Microsoft.Data.Sqlite will be used.</param>
        </member>
        <member name="M:LinqToDB.DataProvider.SQLite.SQLiteExtensions.Match(LinqToDB.DataProvider.SQLite.ISQLiteExtensions,System.Object,System.String)">
            <summary>
            Applies full-text search condition using MATCH predicate against whole FTS table or specific column.
            Examples: "table MATCH 'search query'"/"table.column MATCH 'search query'".
            </summary>
            <param name="ext">Extension point.</param>
            <param name="entityOrColumn">Table or column to perform full-text search against.</param>
            <param name="match">Full-text search condition.</param>
            <returns>Returns <c>true</c> if full-text search found matching records.</returns>
            <remarks>FTS Support: FTS3/4, FTS5.</remarks>
        </member>
        <member name="M:LinqToDB.DataProvider.SQLite.SQLiteExtensions.MatchTable``1(LinqToDB.DataProvider.SQLite.ISQLiteExtensions,LinqToDB.ITable{``0},System.String)">
            <summary>
            Performs full-text search query against against speficied table and returns search results.
            Example: "table('search query')".
            </summary>
            <typeparam name="TEntity">Queried table mapping class.</typeparam>
            <param name="ext">Extension point.</param>
            <param name="table">Table to perform full-text search against.</param>
            <param name="match">Full-text search condition.</param>
            <returns>Returns table, filtered using specified search condition, applied to whole table.</returns>
            <remarks>FTS Support: FTS5.</remarks>
        </member>
        <member name="M:LinqToDB.DataProvider.SQLite.SQLiteExtensions.RowId``1(LinqToDB.DataProvider.SQLite.ISQLiteExtensions,``0)">
            <summary>
            Provides access to rowid hidden column.
            Example: "table.rowid".
            </summary>
            <typeparam name="TEntity">Type of table mapping class.</typeparam>
            <param name="ext">Extension point.</param>
            <param name="entity">Table record instance.</param>
            <returns>Returns rowid column value.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SQLite.SQLiteExtensions.Rank``1(LinqToDB.DataProvider.SQLite.ISQLiteExtensions,``0)">
            <summary>
            Provides access to FTS5 rank hidden column.
            Example: "table.rank".
            </summary>
            <typeparam name="TEntity">Type of table mapping class.</typeparam>
            <param name="ext">Extension point.</param>
            <param name="entity">Table record instance.</param>
            <returns>Returns rank column value.</returns>
            <remarks>FTS Support: FTS5.</remarks>
        </member>
        <member name="M:LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS3Offsets``1(LinqToDB.DataProvider.SQLite.ISQLiteExtensions,``0)">
            <summary>
            FTS3/4 offsets(fts_table) function.
            Example: "offsets(table)".
            </summary>
            <typeparam name="TEntity">Full-text search table mapping class.</typeparam>
            <param name="ext">Extension point.</param>
            <param name="entity">Full-text search table.</param>
            <returns>Check <a href="https://www.sqlite.org/fts3.html#offsets">documentation of SQLite site</a>.</returns>
            <remarks>FTS Support: FTS3/4.</remarks>
        </member>
        <member name="M:LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS3MatchInfo``1(LinqToDB.DataProvider.SQLite.ISQLiteExtensions,``0)">
            <summary>
            FTS3/4 matchinfo(fts_table) function.
            Example: "matchinfo(table)".
            </summary>
            <typeparam name="TEntity">Full-text search table mapping class.</typeparam>
            <param name="ext">Extension point.</param>
            <param name="entity">Full-text search table.</param>
            <returns>Check <a href="https://www.sqlite.org/fts3.html#matchinfo">documentation of SQLite site</a>.</returns>
            <remarks>FTS Support: FTS3/4.</remarks>
        </member>
        <member name="M:LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS3MatchInfo``1(LinqToDB.DataProvider.SQLite.ISQLiteExtensions,``0,System.String)">
            <summary>
            FTS3/4 matchinfo(fts_table, format) function.
            Example: "matchinfo(table, 'format')".
            </summary>
            <typeparam name="TEntity">Full-text search table mapping class.</typeparam>
            <param name="ext">Extension point.</param>
            <param name="entity">Full-text search table.</param>
            <param name="format">Format string function parameter.</param>
            <returns>Check <a href="https://www.sqlite.org/fts3.html#matchinfo">documentation of SQLite site</a>.</returns>
            <remarks>FTS Support: FTS3/4.</remarks>
        </member>
        <member name="M:LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS3Snippet``1(LinqToDB.DataProvider.SQLite.ISQLiteExtensions,``0)">
            <summary>
            FTS3/4 snippet(fts_table) function.
            Example: "snippet(table)".
            </summary>
            <typeparam name="TEntity">Full-text search table mapping class.</typeparam>
            <param name="ext">Extension point.</param>
            <param name="entity">Full-text search table.</param>
            <returns>Check <a href="https://www.sqlite.org/fts3.html#snippet">documentation of SQLite site</a>.</returns>
            <remarks>FTS Support: FTS3/4.</remarks>
        </member>
        <member name="M:LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS3Snippet``1(LinqToDB.DataProvider.SQLite.ISQLiteExtensions,``0,System.String)">
            <summary>
            FTS3/4 snippet(fts_table, startMatch) function.
            Example: "snippet(table, 'startMatch')".
            </summary>
            <typeparam name="TEntity">Full-text search table mapping class.</typeparam>
            <param name="ext">Extension point.</param>
            <param name="entity">Full-text search table.</param>
            <param name="startMatch">Start match wrap text.</param>
            <returns>Check <a href="https://www.sqlite.org/fts3.html#snippet">documentation of SQLite site</a>.</returns>
            <remarks>FTS Support: FTS3/4.</remarks>
        </member>
        <member name="M:LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS3Snippet``1(LinqToDB.DataProvider.SQLite.ISQLiteExtensions,``0,System.String,System.String)">
            <summary>
            FTS3/4 snippet(fts_table, startMatch, endMatch) function.
            Example: "snippet(table, 'startMatch', 'endMatch')".
            </summary>
            <typeparam name="TEntity">Full-text search table mapping class.</typeparam>
            <param name="ext">Extension point.</param>
            <param name="entity">Full-text search table.</param>
            <param name="startMatch">Start match wrap text.</param>
            <param name="endMatch">End match wrap text.</param>
            <returns>Check <a href="https://www.sqlite.org/fts3.html#snippet">documentation of SQLite site</a>.</returns>
            <remarks>FTS Support: FTS3/4.</remarks>
        </member>
        <member name="M:LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS3Snippet``1(LinqToDB.DataProvider.SQLite.ISQLiteExtensions,``0,System.String,System.String,System.String)">
            <summary>
            FTS3/4 snippet(fts_table, startMatch, endMatch, ellipses) function.
            Example: "snippet(table, 'startMatch', 'endMatch', 'ellipses')".
            </summary>
            <typeparam name="TEntity">Full-text search table mapping class.</typeparam>
            <param name="ext">Extension point.</param>
            <param name="entity">Full-text search table.</param>
            <param name="startMatch">Start match wrap text.</param>
            <param name="endMatch">End match wrap text.</param>
            <param name="ellipses">Ellipses text.</param>
            <returns>Check <a href="https://www.sqlite.org/fts3.html#snippet">documentation of SQLite site</a>.</returns>
            <remarks>FTS Support: FTS3/4.</remarks>
        </member>
        <member name="M:LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS3Snippet``1(LinqToDB.DataProvider.SQLite.ISQLiteExtensions,``0,System.String,System.String,System.String,System.Int32)">
            <summary>
            FTS3/4 snippet(fts_table, startMatch, endMatch, ellipses, columnIndex) function.
            Example: "snippet(table, 'startMatch', 'endMatch', 'ellipses', columnIndex)".
            </summary>
            <typeparam name="TEntity">Full-text search table mapping class.</typeparam>
            <param name="ext">Extension point.</param>
            <param name="entity">Full-text search table.</param>
            <param name="startMatch">Start match wrap text.</param>
            <param name="endMatch">End match wrap text.</param>
            <param name="ellipses">Ellipses text.</param>
            <param name="columnIndex">Index of column to extract snippet from. <c>-1</c> matches all columns.</param>
            <returns>Check <a href="https://www.sqlite.org/fts3.html#snippet">documentation of SQLite site</a>.</returns>
            <remarks>FTS Support: FTS3/4.</remarks>
        </member>
        <member name="M:LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS3Snippet``1(LinqToDB.DataProvider.SQLite.ISQLiteExtensions,``0,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            FTS3/4 snippet(fts_table, startMatch, endMatch, ellipses, columnIndex, tokensNumber) function.
            Example: "snippet(table, 'startMatch', 'endMatch', 'ellipses', columnIndex, tokensNumber)".
            </summary>
            <typeparam name="TEntity">Full-text search table mapping class.</typeparam>
            <param name="ext">Extension point.</param>
            <param name="entity">Full-text search table.</param>
            <param name="startMatch">Start match wrap text.</param>
            <param name="endMatch">End match wrap text.</param>
            <param name="ellipses">Ellipses text.</param>
            <param name="columnIndex">Index of column to extract snippet from. <c>-1</c> matches all columns.</param>
            <param name="tokensNumber">Manages how many tokens should be returned (check function documentation).</param>
            <returns>Check <a href="https://www.sqlite.org/fts3.html#snippet">documentation of SQLite site</a>.</returns>
            <remarks>FTS Support: FTS3/4.</remarks>
        </member>
        <member name="M:LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS5bm25``1(LinqToDB.DataProvider.SQLite.ISQLiteExtensions,``0)">
            <summary>
            FTS5 bm25(fts_table) function.
            Example: "bm25(table)".
            </summary>
            <typeparam name="TEntity">Full-text search table mapping class.</typeparam>
            <param name="ext">Extension point.</param>
            <param name="entity">Full-text search table.</param>
            <returns>Check <a href="https://sqlite.org/fts5.html#the_bm25_function">documentation of SQLite site</a>.</returns>
            <remarks>FTS Support: FTS5.</remarks>
        </member>
        <member name="M:LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS5bm25``1(LinqToDB.DataProvider.SQLite.ISQLiteExtensions,``0,System.Double[])">
            <summary>
            FTS5 bm25(fts_table, ...weights) function.
            Example: "bm25(table, col1_weight, col2_weight)".
            </summary>
            <typeparam name="TEntity">Full-text search table mapping class.</typeparam>
            <param name="ext">Extension point.</param>
            <param name="entity">Full-text search table.</param>
            <param name="weights">Weights for columns (each value appied to corresponding column).</param>
            <returns>Check <a href="https://sqlite.org/fts5.html#the_bm25_function">documentation of SQLite site</a>.</returns>
            <remarks>FTS Support: FTS5.</remarks>
        </member>
        <member name="M:LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS5Highlight``1(LinqToDB.DataProvider.SQLite.ISQLiteExtensions,``0,System.Int32,System.String,System.String)">
            <summary>
            FTS5 highlight(fts_table, columnIndex, startMatch, endMatch) function.
            Example: "highlight(table, columnIndex, 'startMatch', 'endMatch')".
            </summary>
            <typeparam name="TEntity">Full-text search table mapping class.</typeparam>
            <param name="ext">Extension point.</param>
            <param name="entity">Full-text search table.</param>
            <param name="columnIndex">Index of column to extract highlighted text from.</param>
            <param name="startMatch">Start match wrap text.</param>
            <param name="endMatch">End match wrap text.</param>
            <returns>Check <a href="https://sqlite.org/fts5.html#the_highlight_function">documentation of SQLite site</a>.</returns>
            <remarks>FTS Support: FTS5.</remarks>
        </member>
        <member name="M:LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS5Snippet``1(LinqToDB.DataProvider.SQLite.ISQLiteExtensions,``0,System.Int32,System.String,System.String,System.String,System.Int32)">
            <summary>
            FTS5 snippet(fts_table, columnIndex, startMatch, endMatch, ellipses, tokensNumber) function.
            Example: "snippet(table, columnIndex, 'startMatch', 'endMatch', 'ellipses', tokensNumber)".
            </summary>
            <typeparam name="TEntity">Full-text search table mapping class.</typeparam>
            <param name="ext">Extension point.</param>
            <param name="entity">Full-text search table.</param>
            <param name="columnIndex">Index of column to extract snippet from.</param>
            <param name="startMatch">Start match wrap text.</param>
            <param name="endMatch">End match wrap text.</param>
            <param name="ellipses">Ellipses text.</param>
            <param name="tokensNumber">Manages how many tokens should be returned (check function documentation).</param>
            <returns>Check <a href="https://sqlite.org/fts5.html#the_snippet_function">documentation of SQLite site</a>.</returns>
            <remarks>FTS Support: FTS5.</remarks>
        </member>
        <member name="M:LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS3Optimize``1(LinqToDB.Data.DataConnection,LinqToDB.ITable{``0})">
            <summary>
            Executes FTS3/FTS4 'optimize' command for specific table.
            Example: "INSERT INTO table(table) VALUES('optimize')".
            </summary>
            <typeparam name="TEntity">Table mapping class.</typeparam>
            <param name="dc"><see cref="T:LinqToDB.Data.DataConnection"/> instance.</param>
            <param name="table">FTS table.</param>
        </member>
        <member name="M:LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS3Rebuild``1(LinqToDB.Data.DataConnection,LinqToDB.ITable{``0})">
            <summary>
            Executes FTS3/FTS4 'rebuild' command for specific table.
            Example: "INSERT INTO table(table) VALUES('rebuild')".
            </summary>
            <typeparam name="TEntity">Table mapping class.</typeparam>
            <param name="dc"><see cref="T:LinqToDB.Data.DataConnection"/> instance.</param>
            <param name="table">FTS table.</param>
        </member>
        <member name="M:LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS3IntegrityCheck``1(LinqToDB.Data.DataConnection,LinqToDB.ITable{``0})">
            <summary>
            Executes FTS3/FTS4 'integrity-check' command for specific table.
            Example: "INSERT INTO table(table) VALUES('integrity-check')".
            </summary>
            <typeparam name="TEntity">Table mapping class.</typeparam>
            <param name="dc"><see cref="T:LinqToDB.Data.DataConnection"/> instance.</param>
            <param name="table">FTS table.</param>
        </member>
        <member name="M:LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS3Merge``1(LinqToDB.Data.DataConnection,LinqToDB.ITable{``0},System.Int32,System.Int32)">
            <summary>
            Executes FTS3/FTS4 'merge' command for specific table.
            Example: "INSERT INTO table(table) VALUES('merge=blocks,segments')".
            </summary>
            <typeparam name="TEntity">Table mapping class.</typeparam>
            <param name="dc"><see cref="T:LinqToDB.Data.DataConnection"/> instance.</param>
            <param name="table">FTS table.</param>
            <param name="blocks">Blocks command parameter.</param>
            <param name="segments">Segments command parameter.</param>
        </member>
        <member name="M:LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS3AutoMerge``1(LinqToDB.Data.DataConnection,LinqToDB.ITable{``0},System.Int32)">
            <summary>
            Executes FTS3/FTS4 'automerge' command for specific table.
            Example: "INSERT INTO table(table) VALUES('automerge=segments')".
            </summary>
            <typeparam name="TEntity">Table mapping class.</typeparam>
            <param name="dc"><see cref="T:LinqToDB.Data.DataConnection"/> instance.</param>
            <param name="table">FTS table.</param>
            <param name="segments">Segments command parameter.</param>
        </member>
        <member name="M:LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS5AutoMerge``1(LinqToDB.Data.DataConnection,LinqToDB.ITable{``0},System.Int32)">
            <summary>
            Executes FTS5 'automerge' command for specific table.
            Example: "INSERT INTO table(table, rank) VALUES('automerge', value)".
            </summary>
            <typeparam name="TEntity">Table mapping class.</typeparam>
            <param name="dc"><see cref="T:LinqToDB.Data.DataConnection"/> instance.</param>
            <param name="table">FTS table.</param>
            <param name="value">Command parameter.</param>
        </member>
        <member name="M:LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS5CrisisMerge``1(LinqToDB.Data.DataConnection,LinqToDB.ITable{``0},System.Int32)">
            <summary>
            Executes FTS5 'crisismerge' command for specific table.
            Example: "INSERT INTO table(table, rank) VALUES('crisismerge', value)".
            </summary>
            <typeparam name="TEntity">Table mapping class.</typeparam>
            <param name="dc"><see cref="T:LinqToDB.Data.DataConnection"/> instance.</param>
            <param name="table">FTS table.</param>
            <param name="value">Command parameter.</param>
        </member>
        <member name="M:LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS5Delete``1(LinqToDB.Data.DataConnection,LinqToDB.ITable{``0},System.Int32,``0)">
            <summary>
            Executes FTS5 'delete' command for specific table.
            Example: "INSERT INTO table(table, rowid, col1, col2) VALUES('delete', rowid, 'col1_value', 'col2_value')".
            </summary>
            <typeparam name="TEntity">Table mapping class.</typeparam>
            <param name="dc"><see cref="T:LinqToDB.Data.DataConnection"/> instance.</param>
            <param name="table">FTS table.</param>
            <param name="rowid">Record rowid value.</param>
            <param name="record">Current record entity.</param>
        </member>
        <member name="M:LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS5DeleteAll``1(LinqToDB.Data.DataConnection,LinqToDB.ITable{``0})">
            <summary>
            Executes FTS5 'delete-all' command for specific table.
            Example: "INSERT INTO table(table) VALUES('delete-all')".
            </summary>
            <typeparam name="TEntity">Table mapping class.</typeparam>
            <param name="dc"><see cref="T:LinqToDB.Data.DataConnection"/> instance.</param>
            <param name="table">FTS table.</param>
        </member>
        <member name="M:LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS5IntegrityCheck``1(LinqToDB.Data.DataConnection,LinqToDB.ITable{``0})">
            <summary>
            Executes FTS5 'integrity-check' command for specific table.
            Example: "INSERT INTO table(table) VALUES('integrity-check')".
            </summary>
            <typeparam name="TEntity">Table mapping class.</typeparam>
            <param name="dc"><see cref="T:LinqToDB.Data.DataConnection"/> instance.</param>
            <param name="table">FTS table.</param>
        </member>
        <member name="M:LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS5Merge``1(LinqToDB.Data.DataConnection,LinqToDB.ITable{``0},System.Int32)">
            <summary>
            Executes FTS5 'merge' command for specific table.
            Example: "INSERT INTO table(table, rank) VALUES('merge', value)".
            </summary>
            <typeparam name="TEntity">Table mapping class.</typeparam>
            <param name="dc"><see cref="T:LinqToDB.Data.DataConnection"/> instance.</param>
            <param name="table">FTS table.</param>
            <param name="value">Command parameter.</param>
        </member>
        <member name="M:LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS5Optimize``1(LinqToDB.Data.DataConnection,LinqToDB.ITable{``0})">
            <summary>
            Executes FTS5 'optimize' command for specific table.
            Example: "INSERT INTO table(table) VALUES('optimize')".
            </summary>
            <typeparam name="TEntity">Table mapping class.</typeparam>
            <param name="dc"><see cref="T:LinqToDB.Data.DataConnection"/> instance.</param>
            <param name="table">FTS table.</param>
        </member>
        <member name="M:LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS5Pgsz``1(LinqToDB.Data.DataConnection,LinqToDB.ITable{``0},System.Int32)">
            <summary>
            Executes FTS5 'pgsz' command for specific table.
            Example: "INSERT INTO table(table, rank) VALUES('pgsz', value)".
            </summary>
            <typeparam name="TEntity">Table mapping class.</typeparam>
            <param name="dc"><see cref="T:LinqToDB.Data.DataConnection"/> instance.</param>
            <param name="table">FTS table.</param>
            <param name="value">Command parameter.</param>
        </member>
        <member name="M:LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS5Rank``1(LinqToDB.Data.DataConnection,LinqToDB.ITable{``0},System.String)">
            <summary>
            Executes FTS5 'rank' command for specific table.
            Example: "INSERT INTO table(table, rank) VALUES('rank', 'function')".
            </summary>
            <typeparam name="TEntity">Table mapping class.</typeparam>
            <param name="dc"><see cref="T:LinqToDB.Data.DataConnection"/> instance.</param>
            <param name="table">FTS table.</param>
            <param name="function">Rank function.</param>
        </member>
        <member name="M:LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS5Rebuild``1(LinqToDB.Data.DataConnection,LinqToDB.ITable{``0})">
            <summary>
            Executes FTS5 'rebuild' command for specific table.
            Example: "INSERT INTO table(table) VALUES('rebuild')".
            </summary>
            <typeparam name="TEntity">Table mapping class.</typeparam>
            <param name="dc"><see cref="T:LinqToDB.Data.DataConnection"/> instance.</param>
            <param name="table">FTS table.</param>
        </member>
        <member name="M:LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS5UserMerge``1(LinqToDB.Data.DataConnection,LinqToDB.ITable{``0},System.Int32)">
            <summary>
            Executes FTS5 'usermerge' command for specific table.
            Example: "INSERT INTO table(table, rank) VALUES('usermerge', value)".
            </summary>
            <typeparam name="TEntity">Table mapping class.</typeparam>
            <param name="dc"><see cref="T:LinqToDB.Data.DataConnection"/> instance.</param>
            <param name="table">FTS table.</param>
            <param name="value">Command parameter.</param>
        </member>
        <member name="P:LinqToDB.DataProvider.SQLite.SQLiteProviderAdapter.DisposeCommandOnError">
            <summary>
            Enables workaround for https://github.com/aspnet/EntityFrameworkCore/issues/17521
            for Microsoft.Data.Sqlite v3.0.0.
            </summary>
        </member>
        <member name="M:LinqToDB.DataProvider.SQLite.SQLiteTools.ClearAllPools(System.String)">
            <summary>
            Invokes ClearAllPools() method for specified provider.
            </summary>
            <param name="provider">For which provider ClearAllPools should be called:
            <list type="bullet">
            <item><see cref="F:LinqToDB.ProviderName.SQLiteClassic"/>: System.Data.SQLite</item>
            <item><see cref="F:LinqToDB.ProviderName.SQLiteMS"/>: Microsoft.Data.Sqlite</item>
            <item><c>null</c>: both (any)</item>
            </list>
            </param>
        </member>
        <member name="P:LinqToDB.DataProvider.SqlServer.SqlFn.DbTS">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/DBTS-transact-sql">@@DBTS (Transact-SQL)</see></b></para>
            <para>This function returns the value of the current timestamp data type for the current database. The current database will have a guaranteed unique timestamp value.</para>
            </summary>
            <returns>varbinary</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="P:LinqToDB.DataProvider.SqlServer.SqlFn.LangID">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/LANGID-transact-sql">@@LANGID (Transact-SQL)</see></b></para>
            <para>Returns the local language identifier (ID) of the language that is currently being used.</para>
            </summary>
            <returns>smallint</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="P:LinqToDB.DataProvider.SqlServer.SqlFn.Language">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/LANGUAGE-transact-sql">@@LANGUAGE (Transact-SQL)</see></b></para>
            <para>Returns the name of the language currently being used.</para>
            </summary>
            <returns>nvarchar</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="P:LinqToDB.DataProvider.SqlServer.SqlFn.LockTimeout">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/LOCK-TIMEOUT-transact-sql">@@LOCK_TIMEOUT (Transact-SQL)</see></b></para>
            <para>Returns the current lock time-out setting in milliseconds for the current session.</para>
            </summary>
            <returns>integer</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="P:LinqToDB.DataProvider.SqlServer.SqlFn.MaxConnections">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/MAX-CONNECTIONS-transact-sql">@@MAX_CONNECTIONS (Transact-SQL)</see></b></para>
            <para>Returns the maximum number of simultaneous user connections allowed on an instance of SQL Server.
            The number returned is not necessarily the number currently configured.</para>
            </summary>
            <returns>integer</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="P:LinqToDB.DataProvider.SqlServer.SqlFn.MaxPrecision">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/MAX-PRECISION-transact-sql">@@MAX_PRECISION (Transact-SQL)</see></b></para>
            <para>Returns the precision level used by <b>decimal</b> and <b>numeric</b> data types as currently set in the server.</para>
            </summary>
            <returns>tinyint</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="P:LinqToDB.DataProvider.SqlServer.SqlFn.NestLevel">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/NESTLEVEL-transact-sql">@@NESTLEVEL (Transact-SQL)</see></b></para>
            <para>Returns the nesting level of the current stored procedure execution (initially 0) on the local server.</para>
            </summary>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="P:LinqToDB.DataProvider.SqlServer.SqlFn.Options">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/OPTIONS-transact-sql">@@OPTIONS (Transact-SQL)</see></b></para>
            <para>Returns information about the current SET options.</para>
            </summary>
            <returns>integer</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="P:LinqToDB.DataProvider.SqlServer.SqlFn.RemServer">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/REMSERVER-transact-sql">@@REMSERVER (Transact-SQL)</see></b></para>
            <para>Returns the name of the remote SQL Server database server as it appears in the login record.</para>
            </summary>
            <returns>nvarchar(128)</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="P:LinqToDB.DataProvider.SqlServer.SqlFn.ServerName">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/SERVERNAME-transact-sql">@@SERVERNAME (Transact-SQL)</see></b></para>
            <para>Returns the name of the local server that is running SQL Server.</para>
            </summary>
            <returns>nvarchar</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="P:LinqToDB.DataProvider.SqlServer.SqlFn.ServiceName">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/SERVICENAME-transact-sql">@@SERVICENAME (Transact-SQL)</see></b></para>
            <para>Returns the name of the registry key under which SQL Server is running. @@SERVICENAME returns 'MSSQLSERVER'
            if the current instance is the default instance; this function returns the instance name if the current instance is a named instance.</para>
            </summary>
            <returns>nvarchar</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="P:LinqToDB.DataProvider.SqlServer.SqlFn.SpID">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/SPID-transact-sql">@@SPID (Transact-SQL)</see></b></para>
            <para>Returns the session ID of the current user process.</para>
            </summary>
            <returns>smallint</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="P:LinqToDB.DataProvider.SqlServer.SqlFn.TextSize">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/TEXTSIZE-transact-sql">@@TEXTSIZE (Transact-SQL)</see></b></para>
            <para>Returns the current value of the <see href="https://docs.microsoft.com/en-us/sql/t-sql/statements/set-textsize-transact-sql">TEXTSIZE</see> option.</para>
            </summary>
            <returns>integer</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="P:LinqToDB.DataProvider.SqlServer.SqlFn.Version">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/version-transact-sql-configuration-functions">@@VERSION (Transact-SQL)</see></b></para>
            <para>Returns system and build information for the current installation of SQL Server.</para>
            </summary>
            <returns>nvarchar</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Cast``1(System.Object,LinqToDB.DataProvider.SqlServer.SqlType{``0})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/CAST-and-CONVERT-transact-sql">CAST and CONVERT (Transact-SQL)</see></b></para>
            <para>These functions convert an expression of one data type to another.</para>
            </summary>
            <param name="expression">Any valid <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>.</param>
            <param name="data_type">The target data type. This includes <b>xml</b>, <b>bigint</b>, and <b>sql_variant</b>. Alias data types cannot be used.</param>
            <returns>Returns expression, translated to data_type.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Cast``1(System.Object,System.Func{LinqToDB.DataProvider.SqlServer.SqlType{``0}})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/CAST-and-CONVERT-transact-sql">CAST and CONVERT (Transact-SQL)</see></b></para>
            <para>These functions convert an expression of one data type to another.</para>
            </summary>
            <param name="expression">Any valid <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>.</param>
            <param name="data_type">The target data type. This includes <b>xml</b>, <b>bigint</b>, and <b>sql_variant</b>. Alias data types cannot be used.</param>
            <returns>Returns expression, translated to data_type.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Cast``1(System.Object)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/CAST-and-CONVERT-transact-sql">CAST and CONVERT (Transact-SQL)</see></b></para>
            <para>These functions convert an expression of one data type to another.</para>
            </summary>
            <param name="expression">Any valid <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>.</param>
            <returns>Returns expression, translated to data_type.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Convert``1(LinqToDB.DataProvider.SqlServer.SqlType{``0},System.Object)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/CAST-and-CONVERT-transact-sql">CAST and CONVERT (Transact-SQL)</see></b></para>
            <para>These functions convert an expression of one data type to another.</para>
            </summary>
            <param name="expression">Any valid <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>.</param>
            <param name="data_type">The target data type. This includes <b>xml</b>, <b>bigint</b>, and <b>sql_variant</b>. Alias data types cannot be used.</param>
            <returns>Returns expression, translated to data_type.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Convert``1(System.Func{LinqToDB.DataProvider.SqlServer.SqlType{``0}},System.Object)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/CAST-and-CONVERT-transact-sql">CAST and CONVERT (Transact-SQL)</see></b></para>
            <para>These functions convert an expression of one data type to another.</para>
            </summary>
            <param name="expression">Any valid <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>.</param>
            <param name="data_type">The target data type. This includes <b>xml</b>, <b>bigint</b>, and <b>sql_variant</b>. Alias data types cannot be used.</param>
            <returns>Returns expression, translated to data_type.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Convert``1(System.Object)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/CAST-and-CONVERT-transact-sql">CAST and CONVERT (Transact-SQL)</see></b></para>
            <para>These functions convert an expression of one data type to another.</para>
            </summary>
            <param name="expression">Any valid <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>.</param>
            <returns>Returns expression, translated to data_type.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Convert``1(LinqToDB.DataProvider.SqlServer.SqlType{``0},System.Object,System.Int32)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/CAST-and-CONVERT-transact-sql">CAST and CONVERT (Transact-SQL)</see></b></para>
            <para>These functions convert an expression of one data type to another.</para>
            </summary>
            <param name="expression">Any valid <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>.</param>
            <param name="data_type">The target data type. This includes <b>xml</b>, <b>bigint</b>, and <b>sql_variant</b>. Alias data types cannot be used.</param>
            <returns>Returns expression, translated to data_type.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Convert``1(System.Func{LinqToDB.DataProvider.SqlServer.SqlType{``0}},System.Object,System.Int32)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/CAST-and-CONVERT-transact-sql">CAST and CONVERT (Transact-SQL)</see></b></para>
            <para>These functions convert an expression of one data type to another.</para>
            </summary>
            <param name="expression">Any valid <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>.</param>
            <param name="data_type">The target data type. This includes <b>xml</b>, <b>bigint</b>, and <b>sql_variant</b>. Alias data types cannot be used.</param>
            <returns>Returns expression, translated to data_type.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Convert``1(System.Object,System.Int32)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/CAST-and-CONVERT-transact-sql">CAST and CONVERT (Transact-SQL)</see></b></para>
            <para>These functions convert an expression of one data type to another.</para>
            </summary>
            <param name="expression">Any valid <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>.</param>
            <returns>Returns expression, translated to data_type.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Parse``1(System.String,LinqToDB.DataProvider.SqlServer.SqlType{``0})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/PARSE-transact-sql">PARSE (Transact-SQL)</see></b></para>
            <para>Returns the result of an expression, translated to the requested data type in SQL Server.</para>
            </summary>
            <param name="string_value"><b>nvarchar</b>(4000) value representing the formatted value to parse into the specified data type.</param>
            <param name="data_type">Literal value representing the data type requested for the result.</param>
            <returns>Returns the result of the expression, translated to the requested data type.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Parse``1(System.String,System.Func{LinqToDB.DataProvider.SqlServer.SqlType{``0}})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/PARSE-transact-sql">PARSE (Transact-SQL)</see></b></para>
            <para>Returns the result of an expression, translated to the requested data type in SQL Server.</para>
            </summary>
            <param name="string_value"><b>nvarchar</b>(4000) value representing the formatted value to parse into the specified data type.</param>
            <param name="data_type">Literal value representing the data type requested for the result.</param>
            <returns>Returns the result of the expression, translated to the requested data type.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Parse``1(System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/PARSE-transact-sql">PARSE (Transact-SQL)</see></b></para>
            <para>Returns the result of an expression, translated to the requested data type in SQL Server.</para>
            </summary>
            <param name="string_value"><b>nvarchar</b>(4000) value representing the formatted value to parse into the specified data type.</param>
            <returns>Returns the result of the expression, translated to the requested data type.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Parse``1(System.String,LinqToDB.DataProvider.SqlServer.SqlType{``0},System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/PARSE-transact-sql">PARSE (Transact-SQL)</see></b></para>
            <para>Returns the result of an expression, translated to the requested data type in SQL Server.</para>
            </summary>
            <param name="string_value"><b>nvarchar</b>(4000) value representing the formatted value to parse into the specified data type.</param>
            <param name="data_type">Literal value representing the data type requested for the result.</param>
            <param name="culture">Optional string that identifies the culture in which string_value is formatted.</param>
            <returns>Returns the result of the expression, translated to the requested data type.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Parse``1(System.String,System.Func{LinqToDB.DataProvider.SqlServer.SqlType{``0}},System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/PARSE-transact-sql">PARSE (Transact-SQL)</see></b></para>
            <para>Returns the result of an expression, translated to the requested data type in SQL Server.</para>
            </summary>
            <param name="string_value"><b>nvarchar</b>(4000) value representing the formatted value to parse into the specified data type.</param>
            <param name="data_type">Literal value representing the data type requested for the result.</param>
            <param name="culture">Optional string that identifies the culture in which string_value is formatted.</param>
            <returns>Returns the result of the expression, translated to the requested data type.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Parse``1(System.String,System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/PARSE-transact-sql">PARSE (Transact-SQL)</see></b></para>
            <para>Returns the result of an expression, translated to the requested data type in SQL Server.</para>
            </summary>
            <param name="string_value"><b>nvarchar</b>(4000) value representing the formatted value to parse into the specified data type.</param>
            <param name="culture">Optional string that identifies the culture in which string_value is formatted.</param>
            <returns>Returns the result of the expression, translated to the requested data type.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.TryCast``1(System.Object,LinqToDB.DataProvider.SqlServer.SqlType{``0})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/TRY-CAST-transact-sql">TRY_CAST (Transact-SQL)</see></b></para>
            <para>These functions convert an expression of one data type to another.</para>
            </summary>
            <param name="expression">Any valid <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>.</param>
            <param name="data_type">The target data type. This includes <b>xml</b>, <b>bigint</b>, and <b>sql_variant</b>. Alias data types cannot be used.</param>
            <returns>Returns expression, translated to data_type.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.TryCast``1(System.Object,System.Func{LinqToDB.DataProvider.SqlServer.SqlType{``0}})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/TRY-CAST-transact-sql">TRY_CAST (Transact-SQL)</see></b></para>
            <para>These functions convert an expression of one data type to another.</para>
            </summary>
            <param name="expression">Any valid <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>.</param>
            <param name="data_type">The target data type. This includes <b>xml</b>, <b>bigint</b>, and <b>sql_variant</b>. Alias data types cannot be used.</param>
            <returns>Returns expression, translated to data_type.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.TryCast``1(System.Object)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/TRY-CAST-transact-sql">TRY_CAST (Transact-SQL)</see></b></para>
            <para>These functions convert an expression of one data type to another.</para>
            </summary>
            <param name="expression">Any valid <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>.</param>
            <returns>Returns expression, translated to data_type.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.TryConvert``1(LinqToDB.DataProvider.SqlServer.SqlType{``0},System.Object)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/TRY-CONVERT-transact-sql">TRY_CONVERT (Transact-SQL)</see></b></para>
            <para>These functions convert an expression of one data type to another.</para>
            </summary>
            <param name="expression">Any valid <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>.</param>
            <param name="data_type">The target data type. This includes <b>xml</b>, <b>bigint</b>, and <b>sql_variant</b>. Alias data types cannot be used.</param>
            <returns>Returns expression, translated to data_type.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.TryConvert``1(System.Func{LinqToDB.DataProvider.SqlServer.SqlType{``0}},System.Object)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/TRY-CONVERT-transact-sql">TRY_CONVERT (Transact-SQL)</see></b></para>
            <para>These functions convert an expression of one data type to another.</para>
            </summary>
            <param name="expression">Any valid <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>.</param>
            <param name="data_type">The target data type. This includes <b>xml</b>, <b>bigint</b>, and <b>sql_variant</b>. Alias data types cannot be used.</param>
            <returns>Returns expression, translated to data_type.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.TryConvert``1(System.Object)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/TRY-CONVERT-transact-sql">TRY_CONVERT (Transact-SQL)</see></b></para>
            <para>These functions convert an expression of one data type to another.</para>
            </summary>
            <param name="expression">Any valid <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>.</param>
            <returns>Returns expression, translated to data_type.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.TryConvert``1(LinqToDB.DataProvider.SqlServer.SqlType{``0},System.Object,System.Int32)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/TRY-CONVERT-transact-sql">TRY_CONVERT (Transact-SQL)</see></b></para>
            <para>These functions convert an expression of one data type to another.</para>
            </summary>
            <param name="expression">Any valid <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>.</param>
            <param name="data_type">The target data type. This includes <b>xml</b>, <b>bigint</b>, and <b>sql_variant</b>. Alias data types cannot be used.</param>
            <returns>Returns expression, translated to data_type.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.TryConvert``1(System.Func{LinqToDB.DataProvider.SqlServer.SqlType{``0}},System.Object,System.Int32)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/TRY-CONVERT-transact-sql">TRY_CONVERT (Transact-SQL)</see></b></para>
            <para>These functions convert an expression of one data type to another.</para>
            </summary>
            <param name="expression">Any valid <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>.</param>
            <param name="data_type">The target data type. This includes <b>xml</b>, <b>bigint</b>, and <b>sql_variant</b>. Alias data types cannot be used.</param>
            <returns>Returns expression, translated to data_type.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.TryConvert``1(System.Object,System.Int32)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/TRY-CONVERT-transact-sql">TRY_CONVERT (Transact-SQL)</see></b></para>
            <para>These functions convert an expression of one data type to another.</para>
            </summary>
            <param name="expression">Any valid <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>.</param>
            <returns>Returns expression, translated to data_type.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.TryParse``1(System.String,LinqToDB.DataProvider.SqlServer.SqlType{``0})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/TRY-PARSE-transact-sql">TRY_PARSE (Transact-SQL)</see></b></para>
            <para>Returns the result of an expression, translated to the requested data type in SQL Server.</para>
            </summary>
            <param name="string_value"><b>nvarchar</b>(4000) value representing the formatted value to parse into the specified data type.</param>
            <param name="data_type">Literal value representing the data type requested for the result.</param>
            <returns>Returns the result of the expression, translated to the requested data type.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.TryParse``1(System.String,System.Func{LinqToDB.DataProvider.SqlServer.SqlType{``0}})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/TRY-PARSE-transact-sql">TRY_PARSE (Transact-SQL)</see></b></para>
            <para>Returns the result of an expression, translated to the requested data type in SQL Server.</para>
            </summary>
            <param name="string_value"><b>nvarchar</b>(4000) value representing the formatted value to parse into the specified data type.</param>
            <param name="data_type">Literal value representing the data type requested for the result.</param>
            <returns>Returns the result of the expression, translated to the requested data type.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.TryParse``1(System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/TRY-PARSE-transact-sql">TRY_PARSE (Transact-SQL)</see></b></para>
            <para>Returns the result of an expression, translated to the requested data type in SQL Server.</para>
            </summary>
            <param name="string_value"><b>nvarchar</b>(4000) value representing the formatted value to parse into the specified data type.</param>
            <returns>Returns the result of the expression, translated to the requested data type.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.TryParse``1(System.String,LinqToDB.DataProvider.SqlServer.SqlType{``0},System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/TRY-PARSE-transact-sql">TRY_PARSE (Transact-SQL)</see></b></para>
            <para>Returns the result of an expression, translated to the requested data type in SQL Server.</para>
            </summary>
            <param name="string_value"><b>nvarchar</b>(4000) value representing the formatted value to parse into the specified data type.</param>
            <param name="data_type">Literal value representing the data type requested for the result.</param>
            <param name="culture">Optional string that identifies the culture in which string_value is formatted.</param>
            <returns>Returns the result of the expression, translated to the requested data type.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.TryParse``1(System.String,System.Func{LinqToDB.DataProvider.SqlServer.SqlType{``0}},System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/TRY-PARSE-transact-sql">TRY_PARSE (Transact-SQL)</see></b></para>
            <para>Returns the result of an expression, translated to the requested data type in SQL Server.</para>
            </summary>
            <param name="string_value"><b>nvarchar</b>(4000) value representing the formatted value to parse into the specified data type.</param>
            <param name="data_type">Literal value representing the data type requested for the result.</param>
            <param name="culture">Optional string that identifies the culture in which string_value is formatted.</param>
            <returns>Returns the result of the expression, translated to the requested data type.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.TryParse``1(System.String,System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/TRY-PARSE-transact-sql">TRY_PARSE (Transact-SQL)</see></b></para>
            <para>Returns the result of an expression, translated to the requested data type in SQL Server.</para>
            </summary>
            <param name="string_value"><b>nvarchar</b>(4000) value representing the formatted value to parse into the specified data type.</param>
            <param name="culture">Optional string that identifies the culture in which string_value is formatted.</param>
            <returns>Returns the result of the expression, translated to the requested data type.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.DataLength``1(``0)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/datalength-transact-sql">DATALENGTH (Transact-SQL)</see></b></para>
            <para>This function returns the number of bytes used to represent any expression.</para>
            <c>DATALENGTH</c> becomes really helpful when used with data types that can store variable-length data, such as:
            <list type="bullet">
            <item>ntext</item>
            <item>nvarchar</item>
            <item>text</item>
            <item>varbinary</item>
            <item>varchar</item>
            </list>
            <para>
            For a NULL value, <c>DATALENGTH</c> returns NULL.
            </para>
            <remarks type="note">
            Use the <see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/len-transact-sql">LEN</see>
            to return the number of characters encoded into a given string expression,
            and <see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/datalength-transact-sql">DATALENGTH</see> to return the size in bytes
            for a given string expression. These outputs may differ depending on the data type and type of encoding used in the column.
            For more information on storage differences between different encoding types,
            see <see href="https://docs.microsoft.com/en-us/sql/relational-databases/collations/collation-and-unicode-support">Collation and Unicode Support</see>.
            </remarks>
            </summary>
            <typeparam name="T">An <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see> of any data type.</typeparam>
            <param name="expression">An <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see> of any data type.</param>
            <returns><b>bigint</b> if expression has an <b>nvarchar(max)</b>, <b>varbinary(max)</b>, or <b>varchar(max)</b> data type; otherwise <b>int</b>.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.DataLengthBig``1(``0)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/datalength-transact-sql">DATALENGTH (Transact-SQL)</see></b></para>
            <para>This function returns the number of bytes used to represent any expression.</para>
            <c>DATALENGTH</c> becomes really helpful when used with data types that can store variable-length data, such as:
            <list type="bullet">
            <item>ntext</item>
            <item>nvarchar</item>
            <item>text</item>
            <item>varbinary</item>
            <item>varchar</item>
            </list>
            <para>
            For a NULL value, <c>DATALENGTH</c> returns NULL.
            </para>
            <remarks type="note">
            Use the <see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/len-transact-sql">LEN</see>
            to return the number of characters encoded into a given string expression,
            and <see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/datalength-transact-sql">DATALENGTH</see> to return the size in bytes
            for a given string expression. These outputs may differ depending on the data type and type of encoding used in the column.
            For more information on storage differences between different encoding types,
            see <see href="https://docs.microsoft.com/en-us/sql/relational-databases/collations/collation-and-unicode-support">Collation and Unicode Support</see>.
            </remarks>
            </summary>
            <typeparam name="T">An <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see> of any data type.</typeparam>
            <param name="expression">An <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see> of any data type.</param>
            <returns><b>bigint</b> if expression has an <b>nvarchar(max)</b>, <b>varbinary(max)</b>, or <b>varchar(max)</b> data type; otherwise <b>int</b>.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.IdentityCurrent(System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/ident-current-transact-sql">IDENT_CURRENT (Transact-SQL)</see></b></para>
            <para>Returns the last identity value generated for a specified table or view. The last identity value generated can be for any session and any scope.</para>
            </summary>
            <param name="table_or_view">Is the name of the table or view whose identity value is returned. <c>table_or_view</c> is <b>varchar</b>, with no default.</param>
            <returns>numeric(<see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/max-precision-transact-sql">@@MAXPRECISION</see>, 0))</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.IdentityIncrement(System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/ident-incr-transact-sql">IDENT_INCR (Transact-SQL)</see></b></para>
            <para>Returns the increment value specified when creating a table or view's identity column.</para>
            </summary>
            <param name="table_or_view">Is an <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            specifying the table or view to check for a valid identity increment value.
            <c>table_or_view</c> can be a character string constant enclosed in quotation marks. It can also be a variable, a function, or a column name.
            <c>table_or_view</c> is <b>char</b>, <b>nchar</b>, <b>varchar</b>, or <b>nvarchar</b>.</param>
            <returns>numeric(<see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/max-precision-transact-sql">@@MAXPRECISION</see>, 0))</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.IdentitySeed(System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/ident-seed-transact-sql">IDENT_SEED (Transact-SQL)</see></b></para>
            <para>Returns the original seed value specified when creating an identity column in a table or a view.
            Changing the current value of an identity column by using DBCC CHECKIDENT doesn't change the value returned by this function.</para>
            </summary>
            <param name="table_or_view">Is an <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            specifying the table or view to check for a valid identity increment value.
            <c>table_or_view</c> can be a character string constant enclosed in quotation marks. It can also be a variable, a function, or a column name.
            <c>table_or_view</c> is <b>char</b>, <b>nchar</b>, <b>varchar</b>, or <b>nvarchar</b>.</param>
            <returns>numeric(<see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/max-precision-transact-sql">@@MAXPRECISION</see>, 0))</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="P:LinqToDB.DataProvider.SqlServer.SqlFn.DateFirst">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/DATEFIRST-transact-sql">@@DATEFIRST (Transact-SQL)</see></b></para>
            <para>This function returns the current value of <see href="https://docs.microsoft.com/en-us/sql/t-sql/statements/set-datefirst-transact-sql">SET DATEFIRST</see>,
            for a specific session.</para>
            </summary>
            <returns>tinyint</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="P:LinqToDB.DataProvider.SqlServer.SqlFn.CurrentTimestamp">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/CURRENT-TIMESTAMP-transact-sql">CURRENT_TIMESTAMP (Transact-SQL)</see></b></para>
            <para>This function returns the current database system timestamp as a <b>datetime</b> value, without the database time zone offset.
            <c>CURRENT_TIMESTAMP</c> derives this value from the operating system of the computer on which the instance of SQL Server runs.</para>
            </summary>
            <returns>datetime</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.CurrentTimezone">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/CURRENT-TIMEZONE-transact-sql">CURRENT_TIMEZONE (Transact-SQL)</see></b></para>
            <para>This function returns the name of the time zone observed by a server or an instance. For SQL Managed Instance, return value
            is based on the time zone of the instance itself assigned during instance creation, not the time zone of the underlying operating system.</para>
            </summary>
            <returns>varchar</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.CurrentTimezoneID">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/CURRENT-TIMEZONE-ID-transact-sql">CURRENT_TIMEZONE_ID (Transact-SQL)</see></b></para>
            <para>This function returns the ID of the time zone observed by a server or an instance. For Azure SQL Managed Instance, return value
            is based on the time zone of the instance itself assigned during instance creation, not the time zone of the underlying operating system.</para>
            </summary>
            <returns>varchar</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.DateAdd(LinqToDB.DataProvider.SqlServer.SqlFn.DateParts,System.Nullable{System.Int32},System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/DATEADD-transact-sql">DATEADD (Transact-SQL)</see></b></para>
            <para>This function adds a number (a signed integer) to a datepart of an input date, and returns a modified date/time value.</para>
            </summary>
            <param name="datepart">The part of date to which <c>DATEADD</c> adds an <b>integer</b> number. This table lists all valid datepart arguments.</param>
            <param name="number">An expression that can resolve to an int that <c>DATEADD</c> adds to a datepart of date.
            <c>DATEADD</c> accepts user-defined variable values for number.
            <c>DATEADD</c> will truncate a specified number value that has a decimal fraction. It will not round the number value in this situation.</param>
            <returns>varchar</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.DateAdd(LinqToDB.DataProvider.SqlServer.SqlFn.DateParts,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/DATEADD-transact-sql">DATEADD (Transact-SQL)</see></b></para>
            <para>This function adds a number (a signed integer) to a datepart of an input date, and returns a modified date/time value.</para>
            </summary>
            <param name="datepart">The part of date to which <c>DATEADD</c> adds an <b>integer</b> number. This table lists all valid datepart arguments.</param>
            <param name="number">An expression that can resolve to an int that <c>DATEADD</c> adds to a datepart of date.
            <c>DATEADD</c> accepts user-defined variable values for number.
            <c>DATEADD</c> will truncate a specified number value that has a decimal fraction. It will not round the number value in this situation.</param>
            <returns>varchar</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.DateAdd(LinqToDB.DataProvider.SqlServer.SqlFn.DateParts,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/DATEADD-transact-sql">DATEADD (Transact-SQL)</see></b></para>
            <para>This function adds a number (a signed integer) to a datepart of an input date, and returns a modified date/time value.</para>
            </summary>
            <param name="datepart">The part of date to which <c>DATEADD</c> adds an <b>integer</b> number. This table lists all valid datepart arguments.</param>
            <param name="number">An expression that can resolve to an int that <c>DATEADD</c> adds to a datepart of date.
            <c>DATEADD</c> accepts user-defined variable values for number.
            <c>DATEADD</c> will truncate a specified number value that has a decimal fraction. It will not round the number value in this situation.</param>
            <returns>varchar</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.DateAdd(LinqToDB.DataProvider.SqlServer.SqlFn.DateParts,System.Nullable{System.Int32},System.Nullable{System.TimeSpan})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/DATEADD-transact-sql">DATEADD (Transact-SQL)</see></b></para>
            <para>This function adds a number (a signed integer) to a datepart of an input date, and returns a modified date/time value.</para>
            </summary>
            <param name="datepart">The part of date to which <c>DATEADD</c> adds an <b>integer</b> number. This table lists all valid datepart arguments.</param>
            <param name="number">An expression that can resolve to an int that <c>DATEADD</c> adds to a datepart of date.
            <c>DATEADD</c> accepts user-defined variable values for number.
            <c>DATEADD</c> will truncate a specified number value that has a decimal fraction. It will not round the number value in this situation.</param>
            <returns>varchar</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.DateDiff(LinqToDB.DataProvider.SqlServer.SqlFn.DateParts,System.String,System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/DATEDIFF-transact-sql">DATEDIFF (Transact-SQL)</see></b></para>
            <para>This function returns the count (as a signed integer value) of the specified datepart boundaries crossed
            between the specified <c>startdate</c> and <c>enddate</c>.</para>
            </summary>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.DateDiff(LinqToDB.DataProvider.SqlServer.SqlFn.DateParts,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/DATEDIFF-transact-sql">DATEDIFF (Transact-SQL)</see></b></para>
            <para>This function returns the count (as a signed integer value) of the specified datepart boundaries crossed
            between the specified <c>startdate</c> and <c>enddate</c>.</para>
            </summary>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.DateDiff(LinqToDB.DataProvider.SqlServer.SqlFn.DateParts,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/DATEDIFF-transact-sql">DATEDIFF (Transact-SQL)</see></b></para>
            <para>This function returns the count (as a signed integer value) of the specified datepart boundaries crossed
            between the specified <c>startdate</c> and <c>enddate</c>.</para>
            </summary>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.DateDiff(LinqToDB.DataProvider.SqlServer.SqlFn.DateParts,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/DATEDIFF-transact-sql">DATEDIFF (Transact-SQL)</see></b></para>
            <para>This function returns the count (as a signed integer value) of the specified datepart boundaries crossed
            between the specified <c>startdate</c> and <c>enddate</c>.</para>
            </summary>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.DateDiffBig(LinqToDB.DataProvider.SqlServer.SqlFn.DateParts,System.String,System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/DATEDIFF-BIG-transact-sql">DATEDIFF_BIG (Transact-SQL)</see></b></para>
            <para>This function returns the count (as a signed integer value) of the specified datepart boundaries crossed
            between the specified <c>startdate</c> and <c>enddate</c>.</para>
            </summary>
            <returns>bigint</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.DateDiffBig(LinqToDB.DataProvider.SqlServer.SqlFn.DateParts,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/DATEDIFF-BIG-transact-sql">DATEDIFF_BIG (Transact-SQL)</see></b></para>
            <para>This function returns the count (as a signed integer value) of the specified datepart boundaries crossed
            between the specified <c>startdate</c> and <c>enddate</c>.</para>
            </summary>
            <returns>bigint</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.DateDiffBig(LinqToDB.DataProvider.SqlServer.SqlFn.DateParts,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/DATEDIFF-BIG-transact-sql">DATEDIFF_BIG (Transact-SQL)</see></b></para>
            <para>This function returns the count (as a signed integer value) of the specified datepart boundaries crossed
            between the specified <c>startdate</c> and <c>enddate</c>.</para>
            </summary>
            <returns>bigint</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.DateDiffBig(LinqToDB.DataProvider.SqlServer.SqlFn.DateParts,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/DATEDIFF-BIG-transact-sql">DATEDIFF_BIG (Transact-SQL)</see></b></para>
            <para>This function returns the count (as a signed integer value) of the specified datepart boundaries crossed
            between the specified <c>startdate</c> and <c>enddate</c>.</para>
            </summary>
            <returns>bigint</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.TimeFromParts(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/TIMEFROMPARTS-transact-sql">TIMEFROMPARTS (Transact-SQL)</see></b></para>
            <para>This function returns a <b>date</b> value that maps to the specified year, month, and day values.</para>
            </summary>
            <returns>date</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.TimeFromParts(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/TIMEFROMPARTS-transact-sql">TIMEFROMPARTS (Transact-SQL)</see></b></para>
            <para>This function returns a <b>date</b> value that maps to the specified year, month, and day values.</para>
            </summary>
            <returns>date</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.DateFromParts(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/DATEFROMPARTS-transact-sql">DATEFROMPARTS (Transact-SQL)</see></b></para>
            <para>This function returns a <b>date</b> value that maps to the specified year, month, and day values.</para>
            </summary>
            <param name="year">An integer expression that specifies a year.</param>
            <param name="month">An integer expression that specifies a month, from 1 to 12.</param>
            <param name="day">An integer expression that specifies a day.</param>
            <returns>date</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.SmallDateTimeFromParts(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/SMALLDATETIMEFROMPARTS-transact-sql">SMALLDATETIMEFROMPARTS (Transact-SQL)</see></b></para>
            <para>Returns a <b>smalldatetime</b> value for the specified date and time.</para>
            </summary>
            <returns>datetime</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.DateTimeFromParts(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/DATETIMEFROMPARTS-transact-sql">DATETIMEFROMPARTS (Transact-SQL)</see></b></para>
            <para>This function returns a <b>datetime</b> value for the specified date and time arguments.</para>
            </summary>
            <returns>datetime</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.DateTimeFromParts(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/DATETIMEFROMPARTS-transact-sql">DATETIMEFROMPARTS (Transact-SQL)</see></b></para>
            <para>This function returns a <b>datetime</b> value for the specified date and time arguments.</para>
            </summary>
            <returns>datetime</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.DateTimeFromParts(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/DATETIMEFROMPARTS-transact-sql">DATETIMEFROMPARTS (Transact-SQL)</see></b></para>
            <para>This function returns a <b>datetime</b> value for the specified date and time arguments.</para>
            </summary>
            <returns>datetime</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.DateTime2FromParts(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/DATETIME2FROMPARTS-transact-sql">DATETIME2FROMPARTS (Transact-SQL)</see></b></para>
            <para>This function returns a <b>datetime2</b> value for the specified date and time arguments.</para>
            </summary>
            <returns>datetime2</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.DateTime2FromParts(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/DATETIME2FROMPARTS-transact-sql">DATETIME2FROMPARTS (Transact-SQL)</see></b></para>
            <para>This function returns a <b>datetime2</b> value for the specified date and time arguments.</para>
            </summary>
            <returns>datetime2</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.DateTime2FromParts(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/DATETIME2FROMPARTS-transact-sql">DATETIME2FROMPARTS (Transact-SQL)</see></b></para>
            <para>This function returns a <b>datetime2</b> value for the specified date and time arguments.</para>
            </summary>
            <returns>datetime2</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.DateTimeOffsetFromParts(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/DATETIMEOFFSETFROMPARTS-transact-sql">DATETIMEOFFSETFROMPARTS (Transact-SQL)</see></b></para>
            <para>Returns a <b>datetimeoffset</b> value for the specified date and time arguments.
            The returned value has a precision specified by the precision argument, and an offset as specified by the offset arguments.</para>
            </summary>
            <returns>datetimeoffset</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.DateTimeOffsetFromParts(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/DATETIMEOFFSETFROMPARTS-transact-sql">DATETIMEOFFSETFROMPARTS (Transact-SQL)</see></b></para>
            <para>Returns a <b>datetimeoffset</b> value for the specified date and time arguments.
            The returned value has a precision specified by the precision argument, and an offset as specified by the offset arguments.</para>
            </summary>
            <returns>datetimeoffset</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.DateTimeOffsetFromParts(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/DATETIMEOFFSETFROMPARTS-transact-sql">DATETIMEOFFSETFROMPARTS (Transact-SQL)</see></b></para>
            <para>Returns a <b>datetimeoffset</b> value for the specified date and time arguments.
            The returned value has a precision specified by the precision argument, and an offset as specified by the offset arguments.</para>
            </summary>
            <returns>datetimeoffset</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.DateName(LinqToDB.DataProvider.SqlServer.SqlFn.DateParts,System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/DATENAME-transact-sql">DATENAME (Transact-SQL)</see></b></para>
            <para>This function returns a character string representing the specified datepart of the specified <c>date</c>.</para>
            </summary>
            <param name="datepart">The specific part of the date argument that <c>DATENAME</c> will return. This table lists all valid datepart arguments.</param>
            <returns>nvarchar</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.DateName(LinqToDB.DataProvider.SqlServer.SqlFn.DateParts,System.Nullable{System.DateTime})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/DATENAME-transact-sql">DATENAME (Transact-SQL)</see></b></para>
            <para>This function returns a character string representing the specified datepart of the specified <c>date</c>.</para>
            </summary>
            <param name="datepart">The specific part of the date argument that <c>DATENAME</c> will return. This table lists all valid datepart arguments.</param>
            <returns>nvarchar</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.DateName(LinqToDB.DataProvider.SqlServer.SqlFn.DateParts,System.Nullable{System.DateTimeOffset})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/DATENAME-transact-sql">DATENAME (Transact-SQL)</see></b></para>
            <para>This function returns a character string representing the specified datepart of the specified <c>date</c>.</para>
            </summary>
            <param name="datepart">The specific part of the date argument that <c>DATENAME</c> will return. This table lists all valid datepart arguments.</param>
            <returns>nvarchar</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.DateName(LinqToDB.DataProvider.SqlServer.SqlFn.DateParts,System.Nullable{System.TimeSpan})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/DATENAME-transact-sql">DATENAME (Transact-SQL)</see></b></para>
            <para>This function returns a character string representing the specified datepart of the specified <c>date</c>.</para>
            </summary>
            <param name="datepart">The specific part of the date argument that <c>DATENAME</c> will return. This table lists all valid datepart arguments.</param>
            <returns>nvarchar</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.DatePart(LinqToDB.DataProvider.SqlServer.SqlFn.DateParts,System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/DATEPART-transact-sql">DATEPART (Transact-SQL)</see></b></para>
            <para>This function returns an integer representing the specified <c>datepart</c> of the specified <c>date</c>.</para>
            </summary>
            <param name="datepart">The specific part of the date argument for which <c>DATEPART</c> will return an <b>integer</b>. This table lists all valid datepart arguments.</param>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.DatePart(LinqToDB.DataProvider.SqlServer.SqlFn.DateParts,System.Nullable{System.DateTime})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/DATEPART-transact-sql">DATEPART (Transact-SQL)</see></b></para>
            <para>This function returns an integer representing the specified <c>datepart</c> of the specified <c>date</c>.</para>
            </summary>
            <param name="datepart">The specific part of the date argument for which <c>DATEPART</c> will return an <b>integer</b>. This table lists all valid datepart arguments.</param>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.DatePart(LinqToDB.DataProvider.SqlServer.SqlFn.DateParts,System.Nullable{System.DateTimeOffset})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/DATEPART-transact-sql">DATEPART (Transact-SQL)</see></b></para>
            <para>This function returns an integer representing the specified <c>datepart</c> of the specified <c>date</c>.</para>
            </summary>
            <param name="datepart">The specific part of the date argument for which <c>DATEPART</c> will return an <b>integer</b>. This table lists all valid datepart arguments.</param>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.DatePart(LinqToDB.DataProvider.SqlServer.SqlFn.DateParts,System.Nullable{System.TimeSpan})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/DATEPART-transact-sql">DATEPART (Transact-SQL)</see></b></para>
            <para>This function returns an integer representing the specified <c>datepart</c> of the specified <c>date</c>.</para>
            </summary>
            <param name="datepart">The specific part of the date argument for which <c>DATEPART</c> will return an <b>integer</b>. This table lists all valid datepart arguments.</param>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Day(System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/DAY-transact-sql">DAY (Transact-SQL)</see></b></para>
            <para>This function returns an integer that represents the day (day of the month) of the specified <c>date</c>.</para>
            </summary>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Day(System.Nullable{System.DateTime})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/DAY-transact-sql">DAY (Transact-SQL)</see></b></para>
            <para>This function returns an integer that represents the day (day of the month) of the specified <c>date</c>.</para>
            </summary>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Day(System.Nullable{System.DateTimeOffset})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/DAY-transact-sql">DAY (Transact-SQL)</see></b></para>
            <para>This function returns an integer that represents the day (day of the month) of the specified <c>date</c>.</para>
            </summary>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.EndOfMonth(System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/EOMONTH-transact-sql">EOMONTH (Transact-SQL)</see></b></para>
            <para>This function returns the last day of the month containing a specified date, with an optional offset.</para>
            </summary>
            <param name="start_date">A date expression that specifies the date for which to return the last day of the month.</param>
            <returns>date</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.EndOfMonth(System.String,System.Nullable{System.Int32})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/EOMONTH-transact-sql">EOMONTH (Transact-SQL)</see></b></para>
            <para>This function returns the last day of the month containing a specified date, with an optional offset.</para>
            </summary>
            <param name="start_date">A date expression that specifies the date for which to return the last day of the month.</param>
            <param name="month_to_add">An optional integer expression that specifies the number of months to add to <c>start_date</c>.</param>
            <returns>date</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.EndOfMonth(System.Nullable{System.DateTime})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/EOMONTH-transact-sql">EOMONTH (Transact-SQL)</see></b></para>
            <para>This function returns the last day of the month containing a specified date, with an optional offset.</para>
            </summary>
            <param name="start_date">A date expression that specifies the date for which to return the last day of the month.</param>
            <returns>date</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.EndOfMonth(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/EOMONTH-transact-sql">EOMONTH (Transact-SQL)</see></b></para>
            <para>This function returns the last day of the month containing a specified date, with an optional offset.</para>
            </summary>
            <param name="start_date">A date expression that specifies the date for which to return the last day of the month.</param>
            <param name="month_to_add">An optional integer expression that specifies the number of months to add to <c>start_date</c>.</param>
            <returns>date</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.GetDate">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/GETDATE-transact-sql">GETDATE (Transact-SQL)</see></b></para>
            <para>Returns the current database system timestamp as a <b>datetime</b> value without the database time zone offset.</para>
            </summary>
            <returns>datetime</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.GetUtcDate">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/GETUTCDATE-transact-sql">GETUTCDATE (Transact-SQL)</see></b></para>
            <para>Returns the current database system timestamp as a <b>datetime</b> value. The database time zone offset is not included.
            This value represents the current UTC time (Coordinated Universal Time). This value is derived from the operating system of the
            computer on which the instance of SQL Server is running.</para>
            </summary>
            <returns>datetime</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.SysDatetime">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/SYSDATETIME-transact-sql">SYSDATETIME (Transact-SQL)</see></b></para>
            <para>Returns a <b>datetime2(7)</b> value that contains the date and time of the computer on which the instance of SQL Server is running.</para>
            </summary>
            <returns>datetime2(7)</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.SysDatetimeOffset">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/SYSDATETIMEOFFSET-transact-sql">SYSDATETIMEOFFSET (Transact-SQL)</see></b></para>
            <para>Returns a <b>datetimeoffset(7)</b> value that contains the date and time of the computer on which the instance of SQL Server is running.
            The time zone offset is included.</para>
            </summary>
            <returns>datetimeoffset(7)</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.SysUtcDatetime">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/SYSUTCDATETIME-transact-sql">SYSUTCDATETIME (Transact-SQL)</see></b></para>
            <para>Returns a <b>datetime2</b> value that contains the date and time of the computer on which the instance of SQL Server is running.
            The date and time is returned as UTC time (Coordinated Universal Time). The fractional second precision specification has a range from 1 to 7 digits.
            The default precision is 7 digits.</para>
            </summary>
            <returns>datetime2</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.IsDate(System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/ISDATE-transact-sql">ISDATE (Transact-SQL)</see></b></para>
            <para>Returns 1 if the expression is a valid <b>datetime</b> value; otherwise, 0.
            ISDATE returns 0 if the expression is a <b>datetime2</b> value.</para>
            </summary>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Month(System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/MONTH-transact-sql">MONTH (Transact-SQL)</see></b></para>
            <para>Returns an integer that represents the month of the specified date.</para>
            </summary>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Month(System.Nullable{System.DateTime})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/MONTH-transact-sql">MONTH (Transact-SQL)</see></b></para>
            <para>This function returns an integer that represents the day (day of the month) of the specified <c>date</c>.</para>
            </summary>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Month(System.Nullable{System.DateTimeOffset})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/MONTH-transact-sql">MONTH (Transact-SQL)</see></b></para>
            <para>This function returns an integer that represents the day (day of the month) of the specified <c>date</c>.</para>
            </summary>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Year(System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/YEAR-transact-sql">YEAR (Transact-SQL)</see></b></para>
            <para>Returns an integer that represents the year of the specified <c>date</c>.</para>
            </summary>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Year(System.Nullable{System.DateTime})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/YEAR-transact-sql">YEAR (Transact-SQL)</see></b></para>
            <para>This function returns an integer that represents the day (day of the month) of the specified <c>date</c>.</para>
            </summary>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Year(System.Nullable{System.DateTimeOffset})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/YEAR-transact-sql">YEAR (Transact-SQL)</see></b></para>
            <para>This function returns an integer that represents the day (day of the month) of the specified <c>date</c>.</para>
            </summary>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.SwitchOffset(System.Nullable{System.DateTimeOffset},System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/SWITCHOFFSET-transact-sql">SWITCHOFFSET (Transact-SQL)</see></b></para>
            <para>Returns a <b>datetimeoffset</b> value that is changed from the stored time zone offset to a specified new time zone offset.</para>
            </summary>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.ToDatetimeOffset(System.Nullable{System.DateTimeOffset},System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/TODATETIMEOFFSET-transact-sql">TODATETIMEOFFSET (Transact-SQL)</see></b></para>
            <para>Returns a <b>datetimeoffset</b> value that is translated from a <b>datetime2</b> expression.</para>
            </summary>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.IsJson(System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/ISJSON-transact-sql">ISJSON (Transact-SQL)</see></b></para>
            <para>Tests whether a string contains valid JSON.</para>
            </summary>
            <param name="expression">The string to test.</param>
            <returns>Returns 1 if the string contains valid JSON; otherwise, returns 0. Returns null if expression is null.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.JsonValue(System.String,System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/JSON-VALUE-transact-sql">JSON_VALUE (Transact-SQL)</see></b></para>
            <para>Extracts a scalar value from a JSON string.</para>
            </summary>
            <param name="expression">An expression. Typically the name of a variable or a column that contains JSON text.</param>
            <param name="path">A JSON path that specifies the property to extract.</param>
            <returns>Returns a single text value of type nvarchar(4000).
            The collation of the returned value is the same as the collation of the input expression.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.JsonQuery(System.String,System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/JSON-QUERY-transact-sql">JSON_QUERY (Transact-SQL)</see></b></para>
            <para>Extracts an object or an array from a JSON string.</para>
            </summary>
            <param name="expression">An expression. Typically the name of a variable or a column that contains JSON text.</param>
            <param name="path">A JSON path that specifies the property to extract.</param>
            <returns>Returns a JSON fragment of type nvarchar(max).
            The collation of the returned value is the same as the collation of the input expression.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.JsonModify(System.String,System.String,System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/JSON-MODIFY-transact-sql">JSON_MODIFY (Transact-SQL)</see></b></para>
            <para>Updates the value of a property in a JSON string and returns the updated JSON string.</para>
            </summary>
            <param name="expression">An expression. Typically the name of a variable or a column that contains JSON text.</param>
            <param name="path">A JSON path expression that specifies the property to update.</param>
            <param name="newValue">The new value for the property specified by path. The new value must be a [n]varchar or text.</param>
            <returns>Returns the updated value of expression as properly formatted JSON text.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.OpenJson(System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/OPENJSON-transact-sql">OPENJSON (Transact-SQL)</see></b></para>
            <para>A table-valued function that parses JSON text and returns objects and properties from the JSON input as rows and columns.</para>
            </summary>
            <param name="json">An expression. Typically the name of a variable or a column that contains JSON text.</param>
            <returns>Returns a rowset view over the elements of a JSON object or array.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
            <remarks>Only available on SQL Server 2016 or later, and compatibility mode for the database must be set to 130 or higher</remarks>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.OpenJson(System.String,System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/OPENJSON-transact-sql">OPENJSON (Transact-SQL)</see></b></para>
            <para>A table-valued function that parses JSON text and returns objects and properties from the JSON input as rows and columns.</para>
            </summary>
            <param name="json">An expression. Typically the name of a variable or a column that contains JSON text.</param>
            <param name="path">A JSON path expression that specifies the property to query.</param>
            <returns>Returns a rowset view over the elements of a JSON object or array.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
            <remarks>Only available on SQL Server 2016 or later, and compatibility mode for the database must be set to 130 or higher</remarks>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.OpenJson(LinqToDB.IDataContext,System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/OPENJSON-transact-sql">OPENJSON (Transact-SQL)</see></b></para>
            <para>A table-valued function that parses JSON text and returns objects and properties from the JSON input as rows and columns.</para>
            </summary>
            <param name="json">An expression. Typically the name of a variable or a column that contains JSON text.</param>
            <returns>Returns a rowset view over the elements of a JSON object or array.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
            <remarks>Only available on SQL Server 2016 or later, and compatibility mode for the database must be set to 130 or higher</remarks>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.OpenJson(LinqToDB.IDataContext,System.String,System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/OPENJSON-transact-sql">OPENJSON (Transact-SQL)</see></b></para>
            <para>A table-valued function that parses JSON text and returns objects and properties from the JSON input as rows and columns.</para>
            </summary>
            <param name="json">An expression. Typically the name of a variable or a column that contains JSON text.</param>
            <param name="path">A JSON path expression that specifies the property to query.</param>
            <returns>Returns a rowset view over the elements of a JSON object or array.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
            <remarks>Only available on SQL Server 2017 or later, and compatibility mode for the database must be set to 140 or higher</remarks>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Abs``1(``0)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/ABS-transact-sql">ABS (Transact-SQL)</see></b></para>
            <para>A mathematical function that returns the absolute (positive) value of the specified numeric expression.
            (<c>ABS</c> changes negative values to positive values. <c>ABS</c> has no effect on zero or positive values.)</para>
            </summary>
            <param name="numeric_expression">An expression of the exact numeric or approximate numeric data type category.</param>
            <returns>Returns the same type as numeric_expression.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Acos``1(``0)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/ACOS-transact-sql">ACOS (Transact-SQL)</see></b></para>
            <para>A function that returns the angle, in radians, whose cosine is the specified float expression. This is also called arccosine.</para>
            </summary>
            <param name="float_expression">An <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            of either type <b>float</b> or of a type that can implicitly convert to float. Only a value ranging from -1.00 to 1.00 is valid.
            For values outside this range, no value is returned, and ACOS will report a domain error.</param>
            <returns>float</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Asin``1(``0)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/ASIN-transact-sql">ASIN (Transact-SQL)</see></b></para>
            <para>A function that returns the angle, in radians, whose sine is the specified <b>float</b> expression. This is also called <b>arcsine</b>.</para>
            </summary>
            <param name="float_expression">An <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            of either type <b>float</b> or of a type that can implicitly convert to float. Only a value ranging from -1.00 to 1.00 is valid.
            For values outside this range, no value is returned, and ASIN will report a domain error.</param>
            <returns>float</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Atan``1(``0)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/ATAN-transact-sql">ATAN (Transact-SQL)</see></b></para>
            <para>A function that returns the angle, in radians, whose tangent is a specified <b>float</b> expression. This is also called <b>arctangent</b>.</para>
            </summary>
            <param name="float_expression">An <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            of either type <b>float</b> or of a type that implicitly convert to <b>float</b>.</param>
            <returns>float</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Atn2``1(``0,``0)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/ATN2-transact-sql">ATN2 (Transact-SQL)</see></b></para>
            <para>Returns the angle, in radians, between the positive x-axis and the ray from the origin to the point (y, x),
            where x and y are the values of the two specified float expressions.</para>
            </summary>
            <param name="float_expression">An <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            of type <b>float</b>.</param>
            <returns>float</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Ceiling``1(``0)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/CEILING-transact-sql">CEILING (Transact-SQL)</see></b></para>
            <para>This function returns the smallest integer greater than, or equal to, the specified numeric expression.</para>
            </summary>
            <param name="numeric_expression">An <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            of the exact numeric or approximate numeric data type category. For this function, the <b>bit</b> data type is invalid.</param>
            <returns>Return values have the same type as <c>numeric_expression</c>.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Cos``1(``0)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/COS-transact-sql">COS (Transact-SQL)</see></b></para>
            <para>A mathematical function that returns the trigonometric cosine of the specified angle - measured in radians - in the specified expression.</para>
            </summary>
            <param name="float_expression">An <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            of type <b>float</b>.</param>
            <returns>float</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Cot``1(``0)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/COT-transact-sql">COT (Transact-SQL)</see></b></para>
            <para>A mathematical function that returns the trigonometric cotangent of the specified angle - in radians - in the specified <b>float</b> expression.</para>
            </summary>
            <param name="float_expression">An <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            of type <b>float</b>, or of a type that can implicitly convert to <b>float</b>.</param>
            <returns>float</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Degrees``1(``0)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/DEGREES-transact-sql">DEGREES (Transact-SQL)</see></b></para>
            <para>This function returns the corresponding angle, in degrees, for an angle specified in radians.</para>
            </summary>
            <param name="numeric_expression">An <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            of the exact numeric or approximate numeric data type category, except for the <b>bit</b> data type.</param>
            <returns>Return values have the same type as <c>numeric_expression</c>.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Exp``1(``0)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/EXP-transact-sql">EXP (Transact-SQL)</see></b></para>
            <para>Returns the exponential value of the specified <b>float</b> expression.</para>
            </summary>
            <param name="float_expression">Is an <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            of type <b>float</b> or of a type that can be implicitly converted to <b>float</b>.</param>
            <returns>float</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Floor``1(``0)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/FLOOR-transact-sql">FLOOR (Transact-SQL)</see></b></para>
            <para>Returns the largest integer less than or equal to the specified numeric expression.</para>
            </summary>
            <param name="numeric_expression">An <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            of the exact numeric or approximate numeric data type category, except for the <b>bit</b> data type.</param>
            <returns>Return values have the same type as <c>numeric_expression</c>.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Log``1(``0)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/LOG-transact-sql">LOG (Transact-SQL)</see></b></para>
            <para>Returns the natural logarithm of the specified <b>float</b> expression in SQL Server.</para>
            </summary>
            <param name="float_expression">Is an <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            of type <b>float</b> or of a type that can be implicitly converted to <b>float</b>.</param>
            <returns>float</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Log``1(``0,System.Int32)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/LOG-transact-sql">LOG (Transact-SQL)</see></b></para>
            <para>Returns the natural logarithm of the specified <b>float</b> expression in SQL Server.</para>
            </summary>
            <param name="float_expression">Is an <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            of type <b>float</b> or of a type that can be implicitly converted to <b>float</b>.</param>
            <param name="base">Optional integer argument that sets the base for the logarithm.</param>
            <returns>float</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Log10``1(``0)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/LOG10-transact-sql">LOG10 (Transact-SQL)</see></b></para>
            <para>Returns the base-10 logarithm of the specified <b>float</b> expression.</para>
            </summary>
            <param name="float_expression">Is an <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            of type <b>float</b> or of a type that can be implicitly converted to <b>float</b>.</param>
            <returns>float</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.PI">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/PI-transact-sql">PI (Transact-SQL)</see></b></para>
            <para>Returns the constant value of PI.</para>
            </summary>
            <returns>float</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Power``1(``0,``0)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/POWER-transact-sql">POWER (Transact-SQL)</see></b></para>
            <para>Returns the base-10 logarithm of the specified <b>float</b> expression.</para>
            </summary>
            <param name="float_expression">Is an <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            of type <b>float</b> or of a type that can be implicitly converted to <b>float</b>.</param>
            <param name="y">Is the power to which to raise <c>float_expression</c>. y can be an expression of the exact numeric or
            approximate numeric data type category, except for the <b>bit</b> data type.</param>
            <returns>float</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Sign``1(``0)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/SIGN-transact-sql">SIGN (Transact-SQL)</see></b></para>
            <para>Returns the positive (+1), zero (0), or negative (-1) sign of the specified expression.</para>
            </summary>
            <param name="numeric_expression">An <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            of the exact numeric or approximate numeric data type category, except for the <b>bit</b> data type.</param>
            <returns>Return values have the same type as <c>numeric_expression</c>.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Random">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/RAND-transact-sql">RAND (Transact-SQL)</see></b></para>
            <para>Returns a pseudo-random <b>float</b> value from 0 through 1, exclusive.</para>
            </summary>
            <returns>float</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Random(System.Int32)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/RAND-transact-sql">RAND (Transact-SQL)</see></b></para>
            <para>Returns a pseudo-random <b>float</b> value from 0 through 1, exclusive.</para>
            </summary>
            <returns>float</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Round``1(``0,System.Int32,System.Int32)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/ROUND-transact-sql">ROUND (Transact-SQL)</see></b></para>
            <para>Returns a numeric value, rounded to the specified length or precision.</para>
            </summary>
            <param name="numeric_expression">An <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            of the exact numeric or approximate numeric data type category, except for the <b>bit</b> data type.</param>
            <param name="length">Is the precision to which <c>numeric_expression</c> is to be rounded.
            <c>length</c> must be an expression of type <b>tinyint</b>, <b>smallint</b>, or <b>int</b>.
            When <c>length</c> is a positive number, <c>numeric_expression</c> is rounded to the number of
            decimal positions specified by <c>length</c>. When <c>length</c> is a negative number,
            <c>numeric_expression</c> is rounded on the left side of the decimal point, as specified by <c>length</c>.</param>
            <param name="function">Is the type of operation to perform. <c>function</c> must be <b>tinyint</b>, <b>smallint</b>, or <b>int</b>.
            When function is omitted or has a value of 0 (default), <c>numeric_expression</c> is rounded. When a value other than 0 is specified,
            <c>numeric_expression</c> is truncated</param>
            <returns>Return values have the same type as <c>numeric_expression</c>.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Round``1(``0,System.Int32)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/ROUND-transact-sql">ROUND (Transact-SQL)</see></b></para>
            <para>Returns a numeric value, rounded to the specified length or precision.</para>
            </summary>
            <param name="numeric_expression">An <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            of the exact numeric or approximate numeric data type category, except for the <b>bit</b> data type.</param>
            <param name="length">Is the precision to which <c>numeric_expression</c> is to be rounded.
            <c>length</c> must be an expression of type <b>tinyint</b>, <b>smallint</b>, or <b>int</b>.
            When <c>length</c> is a positive number, <c>numeric_expression</c> is rounded to the number of
            decimal positions specified by <c>length</c>. When <c>length</c> is a negative number,
            <c>numeric_expression</c> is rounded on the left side of the decimal point, as specified by <c>length</c>.</param>
            <returns>Return values have the same type as <c>numeric_expression</c>.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Radians``1(``0)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/RADIANS-transact-sql">RADIANS (Transact-SQL)</see></b></para>
            <para>Returns radians when a numeric expression, in degrees, is entered.</para>
            </summary>
            <param name="numeric_expression">An <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            of the exact numeric or approximate numeric data type category, except for the <b>bit</b> data type.</param>
            <returns>Return values have the same type as <c>numeric_expression</c>.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Sin``1(``0,``0)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/SIN-transact-sql">SIN (Transact-SQL)</see></b></para>
            <para>Returns the trigonometric sine of the specified angle, in radians, and in an approximate numeric, <b>float</b>, expression.</para>
            </summary>
            <param name="float_expression">Is an <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            of type <b>float</b> or of a type that can be implicitly converted to float, in radians.</param>
            <returns>float</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Sqrt``1(``0)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/SQRT-transact-sql">SQRT (Transact-SQL)</see></b></para>
            <para>Returns the square root of the specified float value.</para>
            </summary>
            <param name="float_expression">Is an <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            of type <b>float</b> or of a type that can be implicitly converted to <b>float</b>.</param>
            <returns>float</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Square``1(``0)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/SQUARE-transact-sql">SQUARE (Transact-SQL)</see></b></para>
            <para>Returns the square of the specified float value.</para>
            </summary>
            <param name="float_expression">Is an <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            of type <b>float</b> or of a type that can be implicitly converted to <b>float</b>.</param>
            <returns>float</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Tan``1(``0)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/TAN-transact-sql">TAN (Transact-SQL)</see></b></para>
            <para>Returns the tangent of the input expression.</para>
            </summary>
            <param name="float_expression">Is an <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            of type <b>float</b> or of a type that can be implicitly converted to <b>float</b>.</param>
            <returns>float</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Choose``1(System.Nullable{System.Int32},``0[])">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/logical-functions-CHOOSE-transact-sql">CHOOSE (Transact-SQL)</see></b></para>
            <para>Returns the last identity value generated for a specified table or view. The last identity value generated can be for any session and any scope.</para>
            </summary>
            <param name="index">Is an integer expression that represents a 1-based index into the list of the items following it.</param>
            <param name="values">List of comma separated values of any data type.</param>
            <returns>Returns the data type with the highest precedence from the set of types passed to the function.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Iif``1(System.Nullable{System.Boolean},``0,``0)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/logical-functions-IIF-transact-sql">IIF (Transact-SQL)</see></b></para>
            <para>Returns one of two values, depending on whether the Boolean expression evaluates to true or false in SQL Server.</para>
            </summary>
            <param name="boolean_expression">A valid Boolean expression.</param>
            <param name="true_value">Value to return if <c>boolean_expression</c> evaluates to true.</param>
            <param name="false_value">Value to return if <c>boolean_expression</c> evaluates to false.</param>
            <returns>Returns the data type with the highest precedence from the types in <c>true_value</c> and <c>false_value</c>.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.AppName">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/app-name-transact-sql">APP_NAME (Transact-SQL)</see></b></para>
            <para>This function returns the application name for the current session, if the application sets that name value.</para>
            </summary>
            <returns>nvarchar(128)</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.ColumnLength(System.String,System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/col-length-transact-sql">COL_LENGTH (Transact-SQL)</see></b></para>
            <para>This function returns the defined length of a column, in bytes.</para>
            </summary>
            <param name="table">The name of the table whose column length information we want to determine. <c>table</c> is an expression of type <b>nvarchar</b>.</param>
            <param name="column">The column name whose length we want to determine. <c>column</c> is an expression of type <b>nvarchar</b>.</param>
            <returns>smallint</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.ColumnName(System.Nullable{System.Int32},System.Int32)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/col-name-transact-sql">COL_NAME (Transact-SQL)</see></b></para>
            <para>This function returns the name of a table column, based on the table identification number and column identification number values of that table column.</para>
            </summary>
            <param name="table_id">The identification number of the table containing that column. The <c>table_id</c> argument has an <b>int</b> data type.</param>
            <param name="column_id">The identification number of the column. The <c>column_id</c> argument has an <b>int</b> data type.</param>
            <returns>sysname</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.ColumnProperty(System.Nullable{System.Int32},System.String,LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/columnproperty-transact-sql">COLUMNPROPERTY (Transact-SQL)</see></b></para>
            <para>This function returns column or parameter information.</para>
            </summary>
            <param name="id">An <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            containing the identifier (ID) of the table or procedure.</param>
            <param name="column">An expression containing the name of the column or parameter.</param>
            <param name="property">For the <c>id</c> argument, the property argument specifies the information type that the <c>COLUMNPROPERTY</c> function will return.</param>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyEx(System.String,LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/databasepropertyex-transact-sql">DATABASEPROPERTYEX (Transact-SQL)</see></b></para>
            <para>For a specified database in SQL Server, this function returns the current setting of the specified database option or property.</para>
            </summary>
            <param name="database">An expression specifying the name of the database for which <c>DATABASEPROPERTYEX</c> will return the named property information.
            <c>database</c> has an <b>nvarchar(128)</b> data type.</param>
            <param name="property">An expression specifying the name of the database property to return. <c>property</c> has a <b>varchar(128)</b> data type</param>
            <returns>sql_variant</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.DbID(System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/db-id-transact-sql">DB_ID (Transact-SQL)</see></b></para>
            <para>This function returns the database identification (ID) number of a specified database.</para>
            </summary>
            <param name="database_name">The name of the database whose database ID number <c>DB_ID</c> will return.
            If the call to <c>DB_ID</c> omits <c>database_name</c>, <c>DB_ID</c> returns the ID of the current database.</param>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.DbID">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/db-id-transact-sql">DB_ID (Transact-SQL)</see></b></para>
            <para>This function returns the database identification (ID) number of a specified database.</para>
            </summary>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.DbName(System.Int32)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/db-name-transact-sql">DB_NAME (Transact-SQL)</see></b></para>
            <para>This function returns the name of a specified database.</para>
            </summary>
            <param name="database_id">The identification number (ID) of the database whose name <c>DB_NAME</c> will return.
            If the call to <c>DB_NAME</c> omits <c>database_id</c>, <c>DB_NAME</c> returns the name of the current database.</param>
            <returns>nvarchar(128)</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.DbName">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/db-name-transact-sql">DB_NAME (Transact-SQL)</see></b></para>
            <para>This function returns the name of a specified database.</para>
            </summary>
            <returns>nvarchar(128)</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.FileID(System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/file-id-transact-sql">FILE_ID (Transact-SQL)</see></b></para>
            <para>For the given logical name for a component file of the current database, this function returns the file identification (ID) number.</para>
            </summary>
            <param name="file_name">An expression of type <b>sysname</b>, representing the logical name of the file whose file ID value <c>FILE_ID</c> will return.</param>
            <returns>smallint</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.FileIDEx(System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/file-idex-transact-sql">FILE_IDEX (Transact-SQL)</see></b></para>
            <para>This function returns the file identification (ID) number for the specified logical name of a data, log, or full-text file of the current database.</para>
            </summary>
            <param name="file_name">An expression of type <b>sysname</b> that returns the file ID value 'FILE_IDEX' for the name of the file.</param>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.FileName(System.Nullable{System.Int32})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/file-name-transact-sql">FILE_NAME (Transact-SQL)</see></b></para>
            <para>This function returns the logical file name for a given file identification (ID) number.</para>
            </summary>
            <param name="file_id">The file identification number whose file name <c>FILE_NAME</c> will return. file_id has an <b>int</b> data type.</param>
            <returns>nvarchar(128)</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.FileGroupID(System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/filegroup-id-transact-sql">FILEGROUP_ID (Transact-SQL)</see></b></para>
            <para>This function returns the filegroup identification (ID) number for a specified filegroup name.</para>
            </summary>
            <param name="filegroup_name">An expression of type <b>sysname</b>, representing the filegroup name whose filegroup ID <c>FILEGROUP_ID</c> will return.</param>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.FileGroupName(System.Nullable{System.Int16})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/filegroup-name-transact-sql">FILEGROUP_NAME (Transact-SQL)</see></b></para>
            <para>This function returns the filegroup name for the specified filegroup identification (ID) number.</para>
            </summary>
            <param name="filegroup_id">The filegroup ID number whose filegroup name <c>FILEGROUP_NAME</c> will return. filegroup_id has a <b>smallint</b> data type.</param>
            <returns>nvarchar(128)</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.FileGroupProperty(System.String,LinqToDB.DataProvider.SqlServer.SqlFn.FileGroupPropertyName)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/FILEGROUPPROPERTY-transact-sql">FILEGROUPPROPERTY (Transact-SQL)</see></b></para>
            <para>This function returns the filegroup property value for a specified name and filegroup value.</para>
            </summary>
            <param name="filegroup_name">An expression of type <b>sysname</b> that represents the filegroup name for which
            <c>FILEGROUPPROPERTY</c> returns the named property information.</param>
            <param name="property">An expression of type <b>varchar(128)</b> that returns the name of the filegroup property.</param>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.FileProperty(System.String,LinqToDB.DataProvider.SqlServer.SqlFn.FilePropertyName)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/FILEPROPERTY-transact-sql">FILEPROPERTY (Transact-SQL)</see></b></para>
            <para>Returns the specified file name property value when a file name in the current database and a property name are specified.
            Returns NULL for files that are not in the current database.</para>
            </summary>
            <param name="file_name">Is an expression that contains the name of the file associated with the current database for which to return property information.
            <c>file_name</c> is <b>nchar(128)</b>.</param>
            <param name="property">Is an expression that contains the name of the file property to return. <c>property</c> is <b>varchar(128)</b>,
            and can be one of the following values.</param>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.FilePropertyEx(System.String,LinqToDB.DataProvider.SqlServer.SqlFn.FilePropertyExName)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/FILEPROPERTYEX-transact-sql">FILEPROPERTYEX (Transact-SQL)</see></b></para>
            <para>Returns the specified extended file property value when a file name in the current database and a property name are specified.
            Returns NULL for files that are not in the current database or for extended file properties that do not exist.
            Currently, extended file properties only apply to databases that are in Azure Blob storage.</para>
            </summary>
            <param name="file_name">Is an expression that contains the name of the file associated with the current database for which to return property information.
            <c>file_name</c> is <b>nchar(128)</b>.</param>
            <param name="property">Is an expression that contains the name of the file property to return. <c>property</c> is <b>varchar(128)</b>,
            and can be one of the following values.</param>
            <returns>sql_variant</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.FullTextCatalogProperty(System.String,LinqToDB.DataProvider.SqlServer.SqlFn.FullTextCatalogPropertyName)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/FULLTEXTCATALOGPROPERTY-transact-sql">FULLTEXTCATALOGPROPERTY (Transact-SQL)</see></b></para>
            <para>Returns information about full-text catalog properties in SQL Server.</para>
            </summary>
            <param name="catalog_name">Is an expression containing the name of the full-text catalog.</param>
            <param name="property">Is an expression containing the name of the full-text catalog property.
            The table lists the properties and provides descriptions of the information returned.</param>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.FullTextServiceProperty(LinqToDB.DataProvider.SqlServer.SqlFn.FullTextServicePropertyName)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/FULLTEXTSERVICEPROPERTY-transact-sql">FULLTEXTSERVICEPROPERTY (Transact-SQL)</see></b></para>
            <para>Returns information related to the properties of the Full-Text Engine. These properties can be set and retrieved by using <b>sp_fulltext_service</b>.</para>
            </summary>
            <param name="property">Is an expression containing the name of the full-text service-level property.
            The table lists the properties and provides descriptions of the information returned.</param>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.IndexColumn(System.String,System.Int32,System.Int32)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/index-col-transact-sql">INDEX_COL (Transact-SQL)</see></b></para>
            <para>Returns the indexed column name. Returns NULL for XML indexes.</para>
            </summary>
            <param name="table_or_view">Is the name of the table or indexed view. <c>table_or_view_name</c> must be delimited by single quotation marks and
            can be fully qualified by database name and schema name.</param>
            <param name="index_id">Is the ID of the index. <c>index_ID</c> is <b>int</b>.</param>
            <param name="key_id">Is the index key column position. <c>key_ID</c> is <b>int</b>.</param>
            <returns>nvarchar(128)</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.IndexKeyProperty(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},LinqToDB.DataProvider.SqlServer.SqlFn.IndexKeyPropertyName)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/INDEXKEY-PROPERTY-transact-sql">INDEXKEY_PROPERTY (Transact-SQL)</see></b></para>
            <para>Returns information about the index key. Returns NULL for XML indexes.</para>
            </summary>
            <param name="object_ID">Is the object identification number of the table or indexed view. <c>object_ID</c> is <b>int</b>.</param>
            <param name="index_ID">Is the index identification number. <c>index_ID</c> is <b>int</b>.</param>
            <param name="key_ID">Is the index key column position. <c>key_ID</c> is <b>int</b>.</param>
            <param name="property">Is the name of the property for which information will be returned.
            <c>property</c> is a character string and can be one of the following values.</param>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.IndexProperty(System.Nullable{System.Int32},System.String,LinqToDB.DataProvider.SqlServer.SqlFn.IndexPropertyName)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/INDEXPROPERTY-transact-sql">INDEXPROPERTY (Transact-SQL)</see></b></para>
            <para>Returns information about the index key. Returns NULL for XML indexes.</para>
            </summary>
            <param name="object_ID">Is an expression that contains the object identification number of the table or indexed view for
            which to provide index property information.  <c>object_ID</c> is <b>int</b>.</param>
            <param name="index_or_statistics_name">Is an expression that contains the name of the index or statistics for which to return property information.
            <c>index_or_statistics_name</c> is <b>nvarchar(128).</b></param>
            <param name="property">Is an expression that contains the name of the database property to return.
            <c>property</c> is <b>varchar(128)</b>, and can be one of these values.</param>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.NextValueFor(System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/NEXT-VALUE-FOR-transact-sql">NEXT VALUE FOR (Transact-SQL)</see></b></para>
            <para>Generates a sequence number from the specified sequence object.</para>
            </summary>
            <param name="sequence_name">The name of the sequence object that generates the number.</param>
            <returns>Returns a number using the type of the sequence.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.NextValueForOver(System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/NEXT-VALUE-FOR-transact-sql">NEXT VALUE FOR (Transact-SQL)</see></b></para>
            <para>Generates a sequence number from the specified sequence object.</para>
            </summary>
            <param name="sequence_name">The name of the sequence object that generates the number.</param>
            <returns>Returns a number using the type of the sequence.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.ObjectDefinition(System.Nullable{System.Int32})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/OBJECT-DEFINITION-transact-sql">OBJECT_DEFINITION (Transact-SQL)</see></b></para>
            <para>Returns the Transact-SQL source text of the definition of a specified object.</para>
            </summary>
            <param name="object_id">Is the ID of the object to be used. <c>object_id</c> is <b>int</b>,
            and assumed to represent an object in the current database context.</param>
            <returns>nvarchar(max)</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.ObjectID(System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/object-id-transact-sql">OBJECT_ID (Transact-SQL)</see></b></para>
            <para>Returns the database object identification number of a schema-scoped object.</para>
            </summary>
            <param name="object_name">Is the object to be used. <c>object_name</c> is either <b>varchar</b> or <b>nvarchar</b>. If <c>object_name</c> is <b>varchar</b>,
            it is implicitly converted to <b>nvarchar</b>. Specifying the database and schema names is optional.</param>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.ObjectID(System.String,System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/object-id-transact-sql">OBJECT_ID (Transact-SQL)</see></b></para>
            <para>Returns the database object identification number of a schema-scoped object.</para>
            </summary>
            <param name="object_name">Is the object to be used. <c>object_name</c> is either <b>varchar</b> or <b>nvarchar</b>. If <c>object_name</c> is <b>varchar</b>,
            it is implicitly converted to <b>nvarchar</b>. Specifying the database and schema names is optional.</param>
            <param name="object_type">Is the schema-scoped object type. <c>object_type</c> is either <b>varchar</b> or <b>nvarchar</b>.
            If <c>object_type</c> is varchar, it is implicitly converted to <b>nvarchar</b>. For a list of object <b>types</b>, see the type column in
            <see href="https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-objects-transact-sql">sys.objects (Transact-SQL)</see>.</param>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.ObjectName(System.Nullable{System.Int32})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/object-name-transact-sql">OBJECT_NAME (Transact-SQL)</see></b></para>
            <para>Returns the database object name for schema-scoped objects. For a list of schema-scoped objects,
            see <see href="https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-objects-transact-sql">sys.objects (Transact-SQL)</see>.</para>
            </summary>
            <param name="object_id">Is the ID of the object to be used. <c>object_id</c> is <b>int</b> and is assumed to be
            a schema-scoped object in the specified database, or in the current database context.</param>
            <returns>sysname</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.ObjectName(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/object-name-transact-sql">OBJECT_NAME (Transact-SQL)</see></b></para>
            <para>Returns the database object name for schema-scoped objects. For a list of schema-scoped objects,
            see <see href="https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-objects-transact-sql">sys.objects (Transact-SQL)</see>.</para>
            </summary>
            <param name="object_id">Is the ID of the object to be used. <c>object_id</c> is <b>int</b> and is assumed to be
            a schema-scoped object in the specified database, or in the current database context.</param>
            <param name="database_id">Is the ID of the database where the object is to be looked up. <c>database_id</c> is <b>int</b>.</param>
            <returns>sysname</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.ObjectSchemaName(System.Nullable{System.Int32})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/object-schema-name-transact-sql">OBJECT_SCHEMA_NAME (Transact-SQL)</see></b></para>
            <para>Returns the database schema name for schema-scoped objects. For a list of schema-scoped objects,
            see <see href="https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-objects-transact-sql">sys.objects (Transact-SQL)</see>.</para>
            </summary>
            <param name="object_id">Is the ID of the object to be used. <c>object_id</c> is <b>int</b> and is assumed to be
            a schema-scoped object in the specified database, or in the current database context.</param>
            <returns>sysname</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.ObjectSchemaName(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/object-schema-name-transact-sql">OBJECT_SCHEMA_NAME (Transact-SQL)</see></b></para>
            <para>Returns the database schema name for schema-scoped objects. For a list of schema-scoped objects,
            see <see href="https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-objects-transact-sql">sys.objects (Transact-SQL)</see>.</para>
            </summary>
            <param name="object_id">Is the ID of the object to be used. <c>object_id</c> is <b>int</b> and is assumed to be
            a schema-scoped object in the specified database, or in the current database context.</param>
            <param name="database_id">Is the ID of the database where the object is to be looked up. <c>database_id</c> is <b>int</b>.</param>
            <returns>sysname</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.ObjectProperty(System.Nullable{System.Int32},LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/OBJECTPROPERTY-transact-sql">OBJECTPROPERTY (Transact-SQL)</see></b></para>
            <para>Returns information about schema-scoped objects in the current database.
            For a list of schema-scoped objects, see <see href="https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-objects-transact-sql">sys.objects (Transact-SQL)</see>.
            This function cannot be used for objects that are not schema-scoped, such as data definition language (DDL) triggers and event notifications.</para>
            </summary>
            <param name="id">Is an expression that represents the ID of the object in the current database.
            <c>id</c> is <b>int</b> and is assumed to be a schema-scoped object in the current database context.</param>
            <param name="property">Is an expression that represents the information to be returned for the object specified by <c>id</c>.
            <c>property</c> can be one of the following values.</param>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyEx(System.Nullable{System.Int32},LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/OBJECTPROPERTYEX-transact-sql">OBJECTPROPERTYEX (Transact-SQL)</see></b></para>
            <para>Returns information about schema-scoped objects in the current database. For a list of these objects,
            see <see href="https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-objects-transact-sql">sys.objects (Transact-SQL)</see>.
            OBJECTPROPERTYEX cannot be used for objects that are not schema-scoped, such as data definition language (DDL) triggers and event notifications.</para>
            </summary>
            <param name="id">Is an expression that represents the ID of the object in the current database.
            <c>id</c> is <b>int</b> and is assumed to be a schema-scoped object in the current database context.</param>
            <param name="property">Is an expression that contains the information to be returned for the object specified by <c>id</c>.
            The return type is <b>sql_variant</b>. The following table shows the base data type for each property value.</param>
            <returns>sql_variant</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.OriginalDbName">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/ORIGINAL-DB-NAME-transact-sql">ORIGINAL_DB_NAME (Transact-SQL)</see></b></para>
            <para>Returns the database name specified by the user in the database connection string.
            This database is specified by using the <b>sqlcmd-d</b> option (USE <c>database</c>).
            It can also be specified with the Open Database Connectivity (ODBC) data source expression (initial catalog = <c>databasename</c>). </para>
            <para>This database is different from the default user database.</para>
            </summary>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.ParseName(System.String,System.Int32)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/PARSENAME-transact-sql">PARSENAME (Transact-SQL)</see></b></para>
            <para>Returns the database schema name for schema-scoped objects. For a list of schema-scoped objects,
            see <see href="https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-objects-transact-sql">sys.objects (Transact-SQL)</see>.</para>
            </summary>
            <param name="object_name">Is the parameter that holds the name of the object for which to retrieve the specified object part.
            This parameter is an optionally-qualified object name. If all parts of the object name are qualified, this name can have four parts: the server name,
            the database name, the schema name, and the object name. Each part of the 'object_name' string is type
            sysname which is equivalent to nvarchar(128) or 256 bytes. If any part of the string exceeds 256 bytes,
            PARSENAME will return NULL for that part as it is not a valid sysname.</param>
            <param name="object_piece">Is the object part to return. object_piece is of type int, and can have these values:
            <list type="bullet">
            <item>1 = Object name</item>
            <item>2 = Schema name</item>
            <item>3 = Database name</item>
            <item>4 = Server name</item>
            </list></param>
            <returns>sysname</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.SchemaID">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/schema-id-transact-sql">SCHEMA_ID (Transact-SQL)</see></b></para>
            <para>Returns the schema ID associated with a schema name.</para>
            </summary>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.SchemaID(System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/schema-id-transact-sql">SCHEMA_ID (Transact-SQL)</see></b></para>
            <para>Returns the schema ID associated with a schema name.</para>
            </summary>
            <param name="schema_name">Is the name of the schema. <c>schema_name</c> is a <b>sysname</b>.
            If <c>schema_name</c> is not specified, SCHEMA_ID will return the ID of the default schema of the caller.</param>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.SchemaName">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/SCHEMA-NAME-transact-sql">SCHEMA_NAME (Transact-SQL)</see></b></para>
            <para>Returns the schema name associated with a schema ID.</para>
            </summary>
            <returns>sysname</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.SchemaName(System.Nullable{System.Int32})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/SCHEMA-NAME-transact-sql">SCHEMA_NAME (Transact-SQL)</see></b></para>
            <para>Returns the schema name associated with a schema ID.</para>
            </summary>
            <param name="schema_id">The ID of the schema. <c>schema_id</c> is an <b>int</b>.
            If <c>schema_id</c> is not defined, SCHEMA_NAME will return the name of the default schema of the caller.</param>
            <returns>sysname</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.ScopeIdentity">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/SCOPE-IDENTITY-transact-sql">SCOPE_IDENTITY (Transact-SQL)</see></b></para>
            <para>Returns the last identity value inserted into an identity column in the same scope.
            A scope is a module: a stored procedure, trigger, function, or batch. Therefore,
            if two statements are in the same stored procedure, function, or batch, they are in the same scope.</para>
            </summary>
            <returns>numeric(38,0)</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.ServerProperty(LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/SERVERPROPERTY-transact-sql">SERVERPROPERTY (Transact-SQL)</see></b></para>
            <para>Returns property information about the server instance.</para>
            </summary>
            <param name="property">Is an expression that contains the property information to be returned for the server.</param>
            <returns>sql_variant</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.StatsDate(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/STATS-DATE-transact-sql">STATS_DATE (Transact-SQL)</see></b></para>
            <para>Returns the date of the most recent update for statistics on a table or indexed view.</para>
            </summary>
            <param name="object_id">ID of the table or indexed view with the statistics.</param>
            <param name="stats_id">ID of the statistics object.</param>
            <returns>Returns <b>datetime</b> on success. Returns <b>NULL</b> if a statistics blob was not created.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.TypeID(System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/TYPE-ID-transact-sql">TYPE_ID (Transact-SQL)</see></b></para>
            <para>Returns the ID for a specified data type name.</para>
            </summary>
            <param name="type_name">Is the name of the data type. type_name is of type <b>nvarchar</b>.
            <c>type_name</c> can be a system or user-defined data type.</param>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.TypeName(System.Nullable{System.Int32})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/TYPE-NAME-transact-sql">TYPE_NAME (Transact-SQL)</see></b></para>
            <para>Returns the unqualified type name of a specified type ID.</para>
            </summary>
            <param name="type_id">Is the ID of the type that will be used. <c>type_id</c> is an <b>int</b>,
            and it can refer to a type in any schema that the caller has permission to access.</param>
            <returns>sysname</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.TypeProperty(System.String,LinqToDB.DataProvider.SqlServer.SqlFn.TypePropertyName)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/TYPEPROPERTY-transact-sql">TYPEPROPERTY (Transact-SQL)</see></b></para>
            <para>Returns information about a data type.</para>
            </summary>
            <param name="type">Is the name of the data type.</param>
            <param name="property">Is the type of information to be returned for the data type.</param>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.PublishingServerName">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/replication-functions-publishingservername">PUBLISHINGSERVERNAME (Transact-SQL)</see></b></para>
            <para>Returns the name of the originating Publisher for a published database participating in a database mirroring session.
            This function is executed at a Publisher instance of SQL Server on the publication database.
            Use it to determine the original Publisher of the published database.</para>
            </summary>
            <returns>nvarchar</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Ascii(System.Char)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/ASCII-transact-sql">ASCII (Transact-SQL)</see></b></para>
            <para>Returns the ASCII code value of the leftmost character of a character expression.</para>
            </summary>
            <param name="character_expression">An <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            of type <b>char</b> or <b>varchar</b>.</param>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Ascii(System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/ASCII-transact-sql">ASCII (Transact-SQL)</see></b></para>
            <para>Returns the ASCII code value of the leftmost character of a character expression.</para>
            </summary>
            <param name="character_expression">An <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            of type <b>char</b> or <b>varchar</b>.</param>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Char(System.Nullable{System.Int32})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/CHAR-transact-sql">CHAR (Transact-SQL)</see></b></para>
            <para>Returns the ASCII code value of the leftmost character of a character expression.</para>
            </summary>
            <param name="integer_expression">An integer from 0 through 255. <c>CHAR</c> returns a <c>NULL</c> value for integer expressions
            outside this input range or not representing a complete character. <c>CHAR</c> also returns a <c>NULL</c> value when
            the character exceeds the length of the return type. Many common character sets share ASCII as a sub-set and will
            return the same character for integer values in the range 0 through 127.</param>
            <returns>char(1)</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.CharIndex(System.String,System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/CHARINDEX-transact-sql">CHARINDEX (Transact-SQL)</see></b></para>
            <para>This function searches for one character expression inside a second character expression,
            returning the starting position of the first expression if found.</para>
            </summary>
            <param name="expressionToFind">A character <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            containing the sequence to find. <c>expressionToFind</c> has an 8000 character limit.</param>
            <param name="expressionToSearch">A character expression to search.</param>
            <returns><b>bigint</b> if <c>expressionToSearch</c> has an <b>nvarchar(max)</b>, <b>varbinary(max)</b>, or <b>varchar(max)</b> data type; <b>int</b> otherwise.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.CharIndexBig(System.String,System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/CHARINDEX-transact-sql">CHARINDEX (Transact-SQL)</see></b></para>
            <para>This function searches for one character expression inside a second character expression,
            returning the starting position of the first expression if found.</para>
            </summary>
            <param name="expressionToFind">A character <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            containing the sequence to find. <c>expressionToFind</c> has an 8000 character limit.</param>
            <param name="expressionToSearch">A character expression to search.</param>
            <returns><b>bigint</b> if <c>expressionToSearch</c> has an <b>nvarchar(max)</b>, <b>varbinary(max)</b>, or <b>varchar(max)</b> data type; <b>int</b> otherwise.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.CharIndex(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/CHARINDEX-transact-sql">CHARINDEX (Transact-SQL)</see></b></para>
            <para>This function searches for one character expression inside a second character expression,
            returning the starting position of the first expression if found.</para>
            </summary>
            <param name="expressionToFind">A character <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            containing the sequence to find. <c>expressionToFind</c> has an 8000 character limit.</param>
            <param name="expressionToSearch">A character expression to search.</param>
            <param name="start_location">An <b>integer</b> or <b>bigint</b> expression at which the search starts.
            If <c>start_location</c> is not specified, has a negative value, or has a zero (0) value,
            the search starts at the beginning of <c>expressionToSearch</c>.</param>
            <returns><b>bigint</b> if <c>expressionToSearch</c> has an <b>nvarchar(max)</b>, <b>varbinary(max)</b>, or <b>varchar(max)</b> data type; <b>int</b> otherwise.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.CharIndex(System.String,System.String,System.Nullable{System.Int64})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/CHARINDEX-transact-sql">CHARINDEX (Transact-SQL)</see></b></para>
            <para>This function searches for one character expression inside a second character expression,
            returning the starting position of the first expression if found.</para>
            </summary>
            <param name="expressionToFind">A character <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            containing the sequence to find. <c>expressionToFind</c> has an 8000 character limit.</param>
            <param name="expressionToSearch">A character expression to search.</param>
            <param name="start_location">An <b>integer</b> or <b>bigint</b> expression at which the search starts.
            If <c>start_location</c> is not specified, has a negative value, or has a zero (0) value,
            the search starts at the beginning of <c>expressionToSearch</c>.</param>
            <returns><b>bigint</b> if <c>expressionToSearch</c> has an <b>nvarchar(max)</b>, <b>varbinary(max)</b>, or <b>varchar(max)</b> data type; <b>int</b> otherwise.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.CharIndexBig(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/CHARINDEX-transact-sql">CHARINDEX (Transact-SQL)</see></b></para>
            <para>This function searches for one character expression inside a second character expression,
            returning the starting position of the first expression if found.</para>
            </summary>
            <param name="expressionToFind">A character <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            containing the sequence to find. <c>expressionToFind</c> has an 8000 character limit.</param>
            <param name="expressionToSearch">A character expression to search.</param>
            <param name="start_location">An <b>integer</b> or <b>bigint</b> expression at which the search starts.
            If <c>start_location</c> is not specified, has a negative value, or has a zero (0) value,
            the search starts at the beginning of <c>expressionToSearch</c>.</param>
            <returns><b>bigint</b> if <c>expressionToSearch</c> has an <b>nvarchar(max)</b>, <b>varbinary(max)</b>, or <b>varchar(max)</b> data type; <b>int</b> otherwise.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Concat(System.String[])">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/CONCAT-transact-sql">CONCAT (Transact-SQL)</see></b></para>
            <para>This function returns a string resulting from the concatenation, or joining, of two or more string values in an end-to-end manner.</para>
            </summary>
            <param name="string_value">A string value to concatenate to the other values. The <c>CONCAT</c> function requires at least two
            <c>string_value</c> arguments, and no more than 254 <c>string_value</c> arguments.</param>
            <returns>string_value</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.ConcatWithSeparator(System.String,System.String[])">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/CONCAT-WS-transact-sql">CONCAT_WS (Transact-SQL)</see></b></para>
            <para>This function returns a string resulting from the concatenation, or joining, of two or more string values in an end-to-end manner.
            It separates those concatenated string values with the delimiter specified in the first function argument.
            (<c>CONCAT_WS</c> indicates concatenate with separator.)</para>
            </summary>
            <param name="separator">An expression of any character type (<c>char</c>, <c>nchar</c>, <c>nvarchar</c>, or <c>varchar</c>).</param>
            <param name="arguments">An expression of any type. The <c>CONCAT_WS</c> function requires at least two arguments, and no more than 254 arguments.</param>
            <returns>A string value whose length and type depend on the input.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Difference(System.String,System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/DIFFERENCE-transact-sql">DIFFERENCE (Transact-SQL)</see></b></para>
            <para>This function returns an integer value measuring the difference between the
            <see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/soundex-transact-sql">SOUNDEX()</see> values of two different character expressions.</para>
            </summary>
            <param name="character_expression1">An alphanumeric
            <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see> of character data.
            <c>character_expression</c> can be a constant, variable, or column.</param>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Format(System.Object,System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/FORMAT-transact-sql">FORMAT (Transact-SQL)</see></b></para>
            <para>Returns a value formatted with the specified format and optional culture. Use the FORMAT function for locale-aware
            formatting of date/time and number values as strings. For general data type conversions, use CAST or CONVERT.</para>
            </summary>
            <param name="value">Expression of a supported data type to format. For a list of valid types, see the table in the following Remarks section.</param>
            <returns><b>nvarchar</b> or null</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Left(System.String,System.Nullable{System.Int32})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/LEFT-transact-sql">LEFT (Transact-SQL)</see></b></para>
            <para>Returns the left part of a character string with the specified number of characters.</para>
            </summary>
            <param name="character_expression">Is an <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            of character or binary data. <c>character_expression</c> can be a constant, variable, or column.
            <c>character_expression</c> can be of any data type, except <b>text</b> or <b>ntext</b>,
            that can be implicitly converted to <b>varchar</b> or <b>nvarchar</b>. Otherwise, use the
            <see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/cast-and-convert-transact-sql">CAST</see>
            function to explicitly convert <c>character_expression</c>.</param>
            <param name="integer_expression">Is a positive integer that specifies how many characters of the character_expression will be returned.
            If <c>integer_expression</c> is negative, an error is returned. If <c>integer_expression</c> is type <b>bigint</b> and contains a large value,
            <c>character_expression</c> must be of a large data type such as <b>varchar(max)</b>.
            The <c>integer_expression</c> parameter counts a UTF-16 surrogate character as one character.</param>
            <returns>Returns <b>varchar</b> when <c>character_expression</c> is a non-Unicode character data type.
            Returns <b>nvarchar</b> when <c>character_expression</c> is a Unicode character data type.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Len(System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/LEN-transact-sql">LEN (Transact-SQL)</see></b></para>
            <para>Returns the number of characters of the specified string expression, excluding trailing spaces.</para>
            </summary>
            <param name="character_expression">Is the string <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            to be evaluated. <c>character_expression</c> can be a constant, variable, or column of either character or binary data.</param>
            <returns><b>bigint</b> if expression is of the <b>varchar(max)</b>, <b>nvarchar(max)</b> or <b>varbinary(max)</b> data types; otherwise, <b>int</b>.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.LenBig(System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/LEN-transact-sql">LEN (Transact-SQL)</see></b></para>
            <para>Returns the number of characters of the specified string expression, excluding trailing spaces.</para>
            </summary>
            <param name="character_expression">Is the string <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            to be evaluated. <c>character_expression</c> can be a constant, variable, or column of either character or binary data.</param>
            <returns><b>bigint</b> if expression is of the <b>varchar(max)</b>, <b>nvarchar(max)</b> or <b>varbinary(max)</b> data types; otherwise, <b>int</b>.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Lower(System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/LOWER-transact-sql">LOWER (Transact-SQL)</see></b></para>
            <para>Returns a character expression after converting uppercase character data to lowercase.</para>
            </summary>
            <param name="character_expression">Is the string <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            of character or binary data. <c>character_expression</c> can be a constant, variable, or column.
            <c>character_expression</c> must be of a data type that is implicitly convertible to <b>varchar</b>.</param>
            <returns><b>varchar</b> or <b>nvarchar</b></returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.LeftTrim(System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/LTRIM-transact-sql">LTRIM (Transact-SQL)</see></b></para>
            <para>Returns a character expression after it removes leading blanks.</para>
            </summary>
            <param name="character_expression">Is the string <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            of character or binary data. <c>character_expression</c> can be a constant, variable, or column.
            <c>character_expression</c> must be of a data type that is implicitly convertible to <b>varchar</b>.</param>
            <returns><b>varchar</b> or <b>nvarchar</b></returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.NChar(System.Nullable{System.Int32})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/NCHAR-transact-sql">NCHAR (Transact-SQL)</see></b></para>
            <para>Returns the Unicode character with the specified integer code, as defined by the Unicode standard.</para>
            </summary>
            <param name="integer_expression">When the collation of the database does not contain the Supplementary Character (SC) flag,
            this is a positive integer from 0 through 65535 (0 through 0xFFFF). If a value outside this range is specified, NULL is returned.</param>
            <returns><b>nchar(1)</b> when the default database collation does not support supplementary characters.
            <b>nvarchar(2)</b> when the default database collation supports supplementary characters.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.PatIndex(System.String,System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/PATINDEX-transact-sql">PATINDEX (Transact-SQL)</see></b></para>
            <para>Returns the starting position of the first occurrence of a pattern in a specified expression, or zeros if the pattern is not found, on all valid text and character data types.</para>
            </summary>
            <param name="pattern">Is a character expression that contains the sequence to be found. Wildcard characters can be used; however,
            the % character must come before and follow pattern (except when you search for first or last characters).
            <c>pattern</c> is an expression of the character string data type category. pattern is limited to 8000 characters.</param>
            <param name="expression">Is an expression, typically a column that is searched for the specified pattern.
            <c>expression</c> is of the character string data type category.</param>
            <returns><b>bigint</b> if <c>expression</c> is of the <b>varchar(max)</b> or <b>nvarchar(max)</b> data types; otherwise int.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.PatIndexBig(System.String,System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/PATINDEX-transact-sql">PATINDEX (Transact-SQL)</see></b></para>
            <para>Returns the starting position of the first occurrence of a pattern in a specified expression,
            or zeros if the pattern is not found, on all valid text and character data types.</para>
            </summary>
            <param name="pattern">Is a character expression that contains the sequence to be found. Wildcard characters can be used; however,
            the % character must come before and follow pattern (except when you search for first or last characters).
            <c>pattern</c> is an expression of the character string data type category. pattern is limited to 8000 characters.</param>
            <param name="expression">Is an expression, typically a column that is searched for the specified pattern.
            <c>expression</c> is of the character string data type category.</param>
            <returns><b>bigint</b> if <c>expression</c> is of the <b>varchar(max)</b> or <b>nvarchar(max)</b> data types; otherwise int.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.QuoteName(System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/QUOTENAME-transact-sql">QUOTENAME (Transact-SQL)</see></b></para>
            <para>Returns a Unicode string with the delimiters added to make the input string a valid SQL Server delimited identifier.</para>
            </summary>
            <param name="character_string">Is a string of Unicode character data. <c>character_string</c> is <b>sysname</b> and is limited to 128 characters.
            Inputs greater than 128 characters return NULL.</param>
            <returns>nvarchar(258)</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.QuoteName(System.String,System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/QUOTENAME-transact-sql">QUOTENAME (Transact-SQL)</see></b></para>
            <para>Returns a Unicode string with the delimiters added to make the input string a valid SQL Server delimited identifier.</para>
            </summary>
            <param name="character_string">Is a string of Unicode character data. <c>character_string</c> is <b>sysname</b> and is limited to 128 characters.
            Inputs greater than 128 characters return NULL.</param>
            <param name="quote_character">Is a one-character string to use as the delimiter.
            Can be a single quotation mark ( ' ), a left or right bracket ( [] ), a double quotation mark ( " ),
            a left or right parenthesis ( () ), a greater than or less than sign ( &gt;&lt; ), a left or right brace ( {} ) or a backtick ( ` ).
            NULL returns if an unacceptable character is supplied. If <c>quote_character</c> is not specified, brackets are used.</param>
            <returns>nvarchar(258)</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Replace(System.String,System.String,System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/REPLACE-transact-sql">REPLACE (Transact-SQL)</see></b></para>
            <para>Replaces all occurrences of a specified string value with another string value.</para>
            </summary>
            <param name="string_expression">Is the string expression to be searched. <c>string_expression</c> can be of a character or binary data type.</param>
            <param name="string_pattern">Is the substring to be found. <c>string_pattern</c> can be of a character or binary data type.
            <c>string_pattern</c> must not exceed the maximum number of bytes that fits on a page.
            If <c>string_pattern</c> is an empty string (''), <c>string_expression</c> is returned unchanged.</param>
            <param name="string_replacement">Is the replacement string. <c>string_replacement</c> can be of a character or binary data type.</param>
            <returns>Returns <b>nvarchar</b> if one of the input arguments is of the <b>nvarchar</b> data type; otherwise,
            <b>REPLACE</b> returns <b>varchar</b>. Returns NULL if any one of the arguments is NULL.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Replicate(System.String,System.Nullable{System.Int32})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/REPLICATE-transact-sql">REPLICATE (Transact-SQL)</see></b></para>
            <para>Repeats a string value a specified number of times.</para>
            </summary>
            <param name="string_expression">Is an expression of a character string or binary data type.</param>
            <param name="integer_expression">Is an expression of any integer type, including <b>bigint</b>.
            If <c>integer_expression</c> is negative, NULL is returned.</param>
            <returns>Returns the same type as <c>string_expression</c>.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Replicate(System.Byte[],System.Nullable{System.Int32})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/REPLICATE-transact-sql">REPLICATE (Transact-SQL)</see></b></para>
            <para>Repeats a string value a specified number of times.</para>
            </summary>
            <param name="string_expression">Is an expression of a character string or binary data type.</param>
            <param name="integer_expression">Is an expression of any integer type, including <b>bigint</b>.
            If <c>integer_expression</c> is negative, NULL is returned.</param>
            <returns>Returns the same type as <c>string_expression</c>.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Reverse(System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/REVERSE-transact-sql">REVERSE (Transact-SQL)</see></b></para>
            <para>Returns the reverse order of a string value.</para>
            </summary>
            <param name="string_expression"><c>string_expression</c> is an expression of a string or binary data type.
            <c>string_expression</c> can be a constant, variable, or column of either character or binary data.</param>
            <returns><b>varchar</b> or <b>nvarchar</b></returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Right(System.String,System.Nullable{System.Int32})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/RIGHT-transact-sql">RIGHT (Transact-SQL)</see></b></para>
            <para>Returns the right part of a character string with the specified number of characters.</para>
            </summary>
            <param name="character_expression">Is an <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            of character or binary data. <c>character_expression</c> can be a constant, variable, or column.
            <c>character_expression</c> can be of any data type, except <b>text</b> or <b>ntext</b>,
            that can be implicitly converted to <b>varchar</b> or <b>nvarchar</b>. Otherwise, use the
            <see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/cast-and-convert-transact-sql">CAST</see>
            function to explicitly convert <c>character_expression</c>.</param>
            <param name="integer_expression">Is a positive integer that specifies how many characters of the character_expression will be returned.
            If <c>integer_expression</c> is negative, an error is returned. If <c>integer_expression</c> is type <b>bigint</b> and contains a large value,
            <c>character_expression</c> must be of a large data type such as <b>varchar(max)</b>.
            The <c>integer_expression</c> parameter counts a UTF-16 surrogate character as one character.</param>
            <returns>Returns <b>varchar</b> when <c>character_expression</c> is a non-Unicode character data type.
            Returns <b>nvarchar</b> when <c>character_expression</c> is a Unicode character data type.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.RightTrim(System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/RTRIM-transact-sql">RTRIM (Transact-SQL)</see></b></para>
            <para>Returns a character string after truncating all trailing spaces.</para>
            </summary>
            <param name="character_expression">Is an <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            of character data. character_expression can be a constant, variable, or column of either character or binary data.</param>
            <returns><b>varchar</b> or <b>nvarchar</b></returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.SoundEx(System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/SOUNDEX-transact-sql">SOUNDEX (Transact-SQL)</see></b></para>
            <para>Returns a four-character (SOUNDEX) code to evaluate the similarity of two strings.</para>
            </summary>
            <param name="character_expression">Is an alphanumeric expression of character data. character_expression can be a constant, variable, or column.</param>
            <returns>varchar</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Space(System.Nullable{System.Int32})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/SPACE-transact-sql">SPACE (Transact-SQL)</see></b></para>
            <para>Returns a string of repeated spaces.</para>
            </summary>
            <param name="integer_expression">Is a positive integer that indicates the number of spaces. If integer_expression is negative, a null string is returned.</param>
            <returns>varchar</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Str``1(``0)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/STR-transact-sql">STR (Transact-SQL)</see></b></para>
            <para>Returns character data converted from numeric data. The character data is right-justified, with a specified length and decimal precision.</para>
            </summary>
            <param name="float_expression">Is an expression of approximate numeric (<b>float</b>) data type with a decimal point.</param>
            <returns>varchar</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Str``1(``0,System.Int32)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/STR-transact-sql">STR (Transact-SQL)</see></b></para>
            <para>Returns character data converted from numeric data. The character data is right-justified, with a specified length and decimal precision.</para>
            </summary>
            <param name="float_expression">Is an expression of approximate numeric (<b>float</b>) data type with a decimal point.</param>
            <param name="length">Is the total length. This includes decimal point, sign, digits, and spaces. The default is 10.</param>
            <returns>varchar</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Str``1(``0,System.Int32,System.Int32)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/STR-transact-sql">STR (Transact-SQL)</see></b></para>
            <para>Returns character data converted from numeric data. The character data is right-justified, with a specified length and decimal precision.</para>
            </summary>
            <param name="float_expression">Is an expression of approximate numeric (<b>float</b>) data type with a decimal point.</param>
            <param name="length">Is the total length. This includes decimal point, sign, digits, and spaces. The default is 10.</param>
            <param name="decimal">Is the number of places to the right of the decimal point. decimal must be less than or equal to 16.
            If decimal is more than 16 then the result is truncated to sixteen places to the right of the decimal point.</param>
            <returns>varchar</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.StringEscape(System.String,System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/STRING-ESCAPE-transact-sql">STRING_ESCAPE (Transact-SQL)</see></b></para>
            <para>Returns character data converted from numeric data. The character data is right-justified, with a specified length and decimal precision.</para>
            </summary>
            <param name="text">Is a <b>nvarchar</b> expression expression representing the object that should be escaped.</param>
            <param name="type">Escaping rules that will be applied. Currently the value supported is <c>'json'</c>.</param>
            <returns>varchar</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Stuff(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/STUFF-transact-sql">STUFF (Transact-SQL)</see></b></para>
            <para>The STUFF function inserts a string into another string. It deletes a specified length of characters in the first string
            at the start position and then inserts the second string into the first string at the start position.</para>
            </summary>
            <param name="character_expression">Is an expression of character data. <c>character_expression</c> can be a constant,
            variable, or column of either character or binary data.</param>
            <param name="start">Is an integer value that specifies the location to start deletion and insertion.
            If <c>start</c> is negative or zero, a null string is returned. If start is longer than the first <c>character_expression</c>,
            a null string is returned. start can be of type <b>bigint</b>.</param>
            <param name="length">Is an integer that specifies the number of characters to delete. If <c>length</c> is negative, a null string is returned.
            If <c>length</c> is longer than the first <c>character_expression</c>, deletion occurs up to the last character in the last <c>character_expression</c>.
            If <c>length</c> is zero, insertion occurs at start location and no characters are deleted. length can be of type <b>bigint</b>.</param>
            <param name="replaceWith_expression">Is an expression of character data. <c>character_expression</c> can be a constant, variable,
            or column of either character or binary data. This expression replaces <c>length</c> characters of <c>character_expression</c> beginning at start.
            Providing <c>NULL</c> as the <c>replaceWith_expression</c>, removes characters without inserting anything.</param>
            <returns>Returns character data if character_expression is one of the supported character data types.
            Returns binary data if character_expression is one of the supported binary data types.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Substring(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/SUBSTRING-transact-sql">SUBSTRING (Transact-SQL)</see></b></para>
            <para>Returns part of a character, binary, text, or image expression in SQL Server.</para>
            </summary>
            <param name="expression">Is a <b>character</b>, <b>binary</b>, <b>text</b>, <b>ntext</b>, or <b>image</b> expression.</param>
            <param name="start">Is an integer or <b>bigint</b> expression that specifies where the returned characters start.
            (The numbering is 1 based, meaning that the first character in the expression is 1).
            If <c>start</c> is less than 1, the returned expression will begin at the first character that is specified in <c>expression</c>.
            In this case, the number of characters that are returned is the largest value of either the sum of <c>start + length</c> - 1 or 0.
            If <c>start</c> is greater than the number of characters in the value expression, a zero-length expression is returned.</param>
            <param name="length">Is a positive integer or <b>bigint</b> expression that specifies how many characters of the <c>expression</c> will be returned.
            If <c>length</c> is negative, an error is generated and the statement is terminated. If the sum of start and <c>length</c> is greater
            than the number of characters in <c>expression</c>, the whole value expression beginning at start is returned.</param>
            <returns>Returns character data if expression is one of the supported character data types.
            Returns binary data if expression is one of the supported binary data types.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Translate(System.String,System.String,System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/TRANSLATE-transact-sql">TRANSLATE (Transact-SQL)</see></b></para>
            <para>Returns part of a character, binary, text, or image expression in SQL Server.</para>
            </summary>
            <param name="inputString"><c>inputString</c> Is the string expression to be searched. <c>inputString</c> can be any character data type
            (nvarchar, varchar, nchar, char).</param>
            <param name="characters ">Is a string expression containing characters that should be replaced. <c>characters</c> can be any character data type.</param>
            <param name="translations">Is a string expression containing the replacement characters.
            <c>translations</c> must be the same data type and length as characters.</param>
            <returns>Returns a character expression of the same data type as <c>inputString</c> where characters from
            the second argument are replaced with the matching characters from third argument.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Trim(System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/TRIM-transact-sql">TRIM (Transact-SQL)</see></b></para>
            <para>Removes the space character <c>char(32)</c> or other specified characters from the start and end of a string.</para>
            </summary>
            <param name="string">Is an expression of any character type (<c>nvarchar</c>, <c>varchar</c>, <c>nchar</c>, or <c>char</c>)
            where characters should be removed.</param>
            <returns>Returns a character expression with a type of string argument where the space character <c>char(32)</c> or
            other specified characters are removed from both sides. Returns <c>NULL</c> if input string is <c>NULL</c>.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Trim(System.String,System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/TRIM-transact-sql">TRIM (Transact-SQL)</see></b></para>
            <para>Removes the space character <c>char(32)</c> or other specified characters from the start and end of a string.</para>
            </summary>
            <param name="characters">Is a literal, variable, or function call of any non-LOB character type
            (<c>nvarchar</c>, <c>varchar</c>, <c>nchar</c>, or <c>char</c>) containing characters that should be removed.
            <c>nvarchar(max)</c> and <c>varchar(max)</c> types aren't allowed.</param>
            <param name="string">Is an expression of any character type (<c>nvarchar</c>, <c>varchar</c>, <c>nchar</c>, or <c>char</c>)
            where characters should be removed.</param>
            <returns>Returns a character expression with a type of string argument where the space character <c>char(32)</c> or
            other specified characters are removed from both sides. Returns <c>NULL</c> if input string is <c>NULL</c>.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Unicode(System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/UNICODE-transact-sql">UNICODE (Transact-SQL)</see></b></para>
            <para>Removes the space character <c>char(32)</c> or other specified characters from the start and end of a string.</para>
            </summary>
            <param name="ncharacter_expression">Is an <b>nchar</b> or <b>nvarchar</b> expression.</param>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Upper(System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/UPPER-transact-sql">UPPER (Transact-SQL)</see></b></para>
            <para>Returns a character expression after converting uppercase character data to lowercase.</para>
            </summary>
            <param name="character_expression">Is the string <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            of character or binary data. <c>character_expression</c> can be a constant, variable, or column.
            <c>character_expression</c> must be of a data type that is implicitly convertible to <b>varchar</b>.</param>
            <returns><b>varchar</b> or <b>nvarchar</b></returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Collate(System.String,System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/statements/collations">COLLATE (Transact-SQL)</see></b></para>
            <para>Returns a character expression after converting uppercase character data to lowercase.</para>
            <para>Windows_collation_name is the collation name for a
            <see href="https://docs.microsoft.com/en-us/sql/t-sql/statements/windows-collation-name-transact-sql">Windows Collation Name</see>.</para>
            <seealso href="https://docs.microsoft.com/en-us/sql/relational-databases/collations/collation-and-unicode-support">Collation and Unicode support</seealso>
            </summary>
            <param name="collation_name">Is the name of the collation to be applied to the expression, column definition, or database definition.
            <c>collation_name</c> can be only a specified <c>Windows_collation_name</c> or a <c>SQL_collation_name</c>.
            <c>collation_name</c> must be a literal value. <c>collation_name</c> cannot be represented by a variable or expression.</param>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="P:LinqToDB.DataProvider.SqlServer.SqlFn.Connections">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/CONNECTIONS-transact-sql">@@CONNECTIONS (Transact-SQL)</see></b></para>
            <para>This function returns the number of attempted connections - both successful and unsuccessful - since SQL Server was last started.</para>
            </summary>
            <returns>integer</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="P:LinqToDB.DataProvider.SqlServer.SqlFn.CpuBusy">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/CPU-BUSY-transact-sql">@@CPU_BUSY (Transact-SQL)</see></b></para>
            <para>This function returns the amount of time that SQL Server has spent in active operation since its latest start.</para>
            </summary>
            <returns>integer</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="P:LinqToDB.DataProvider.SqlServer.SqlFn.Idle">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/IDLE-transact-sql">@@IDLE (Transact-SQL)</see></b></para>
            <para>Returns the time that SQL Server has been idle since it was last started.</para>
            </summary>
            <returns>integer</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="P:LinqToDB.DataProvider.SqlServer.SqlFn.IOBusy">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/IO_BUSY-transact-sql">@@IO_BUSY (Transact-SQL)</see></b></para>
            <para>Returns the time that SQL Server has spent performing input and output operations since SQL Server was last started.</para>
            </summary>
            <returns>integer</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="P:LinqToDB.DataProvider.SqlServer.SqlFn.PackSent">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/PACK-SENT-transact-sql">@@PACK_SENT (Transact-SQL)</see></b></para>
            <para>Returns the number of output packets written to the network by SQL Server since it was last started.</para>
            </summary>
            <returns>integer</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="P:LinqToDB.DataProvider.SqlServer.SqlFn.PacketErrors">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/PACKET-ERRORS-transact-sql">@@PACKET_ERRORS (Transact-SQL)</see></b></para>
            <para>Returns the number of network packet errors that have occurred on SQL Server connections since SQL Server was last started.</para>
            </summary>
            <returns>integer</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="P:LinqToDB.DataProvider.SqlServer.SqlFn.TimeTicks">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/TIMETICKS-transact-sql">@@TIMETICKS (Transact-SQL)</see></b></para>
            <para>Returns the number of microseconds per tick.</para>
            </summary>
            <returns>integer</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="P:LinqToDB.DataProvider.SqlServer.SqlFn.TotalErrors">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/TOTAL-ERRORS-transact-sql">@@TOTAL_ERRORS (Transact-SQL)</see></b></para>
            <para>Returns the number of microseconds per tick.</para>
            </summary>
            <returns>integer</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="P:LinqToDB.DataProvider.SqlServer.SqlFn.TotalRead">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/TOTAL-READ-transact-sql">@@TOTAL_READ (Transact-SQL)</see></b></para>
            <para>Returns the number of microseconds per tick.</para>
            </summary>
            <returns>integer</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="P:LinqToDB.DataProvider.SqlServer.SqlFn.TotalWrite">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/TOTAL-WRITE-transact-sql">@@TOTAL_WRITE (Transact-SQL)</see></b></para>
            <para>Returns the number of microseconds per tick.</para>
            </summary>
            <returns>integer</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="P:LinqToDB.DataProvider.SqlServer.SqlFn.Identity">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/IDENTITY-transact-sql">@@IDENTITY (Transact-SQL)</see></b></para>
            <para>Is a system function that returns the last-inserted identity value.</para>
            </summary>
            <returns>numeric(38,0)</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="P:LinqToDB.DataProvider.SqlServer.SqlFn.PackReceived">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/PACK-RECEIVED-transact-sql">@@PACK_RECEIVED (Transact-SQL)</see></b></para>
            <para>Returns the number of input packets read from the network by SQL Server since it was last started.</para>
            </summary>
            <returns>integer</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="P:LinqToDB.DataProvider.SqlServer.SqlFn.TransactionCount">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/TRANCOUNT-transact-sql">@@TRANCOUNT (Transact-SQL)</see></b></para>
            <para>Returns the number of input packets read from the network by SQL Server since it was last started.</para>
            </summary>
            <returns>integer</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.BinaryCheckSum">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/BINARY-CHECKSUM-transact-sql">BINARY_CHECKSUM (Transact-SQL)</see></b></para>
            <para>Returns the binary checksum value computed over a row of a table or over a list of expressions.</para>
            </summary>
            <para>
            Specifies that the computation covers all the table columns. BINARY_CHECKSUM ignores columns of noncomparable data types in its computation.
            Noncomparable data types include
            <list type="bullet">
            <item>cursor</item>
            <item>image</item>
            <item>ntext</item>
            <item>text</item>
            <item>xml</item>
            </list>
            and noncomparable common language runtime (CLR) user-defined types.
            </para>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.BinaryCheckSum(System.Object[])">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/BINARY-CHECKSUM-transact-sql">BINARY_CHECKSUM (Transact-SQL)</see></b></para>
            <para>Returns the binary checksum value computed over a row of a table or over a list of expressions.</para>
            </summary>
            <param name="expressions">An <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see> of any type.
            BINARY_CHECKSUM ignores expressions of noncomparable data types in its computation.</param>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.CheckSum">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/CHECKSUM-transact-sql">CHECKSUM (Transact-SQL)</see></b></para>
            <para>The <c>CHECKSUM</c> function returns the checksum value computed over a table row, or over an expression list.
            Use <c>CHECKSUM</c> to build hash indexes.</para>
            </summary>
            <para>
            This argument specifies that the checksum computation covers all table columns.
            <c>CHECKSUM</c> returns an error if any column has a noncomparable data type. Noncomparable data types include:
            <list type="bullet">
            <item>cursor</item>
            <item>image</item>
            <item>ntext</item>
            <item>text</item>
            <item>XML</item>
            </list>
            Another noncomparable data type is <b>sql_variant</b> with any one of the preceding data types as its base type.
            </para>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.CheckSum(System.Object[])">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/CHECKSUM-transact-sql">CHECKSUM (Transact-SQL)</see></b></para>
            <para>The <c>CHECKSUM</c> function returns the checksum value computed over a table row, or over an expression list.
            Use <c>CHECKSUM</c> to build hash indexes.</para>
            </summary>
            <param name="expressions">An <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            of any type, except a noncomparable data type.</param>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Compress(System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/COMPRESS-transact-sql">COMPRESS (Transact-SQL)</see></b></para>
            <para>This function compresses the input expression, using the GZIP algorithm. The function returns a byte array of type <b>varbinary(max)</b>.</para>
            </summary>
            <param name="expression">A
            <list type="bullet">
            <item>binary(n)</item>
            <item>char(n)</item>
            <item>nchar(n)</item>
            <item>nvarchar(max)</item>
            <item>nvarchar(n)</item>
            <item>varbinary(max)</item>
            <item>varbinary(n)</item>
            <item>varchar(max)</item>
            </list>
            or
            <list type="bullet">
            <item>varchar(n)</item>
            </list>
            expression.</param>
            <returns><b>varbinary(max)</b> representing the compressed content of the input.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Compress(System.Byte[])">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/COMPRESS-transact-sql">COMPRESS (Transact-SQL)</see></b></para>
            <para>This function compresses the input expression, using the GZIP algorithm. The function returns a byte array of type <b>varbinary(max)</b>.</para>
            </summary>
            <param name="expression">A
            <list type="bullet">
            <item>binary(n)</item>
            <item>char(n)</item>
            <item>nchar(n)</item>
            <item>nvarchar(max)</item>
            <item>nvarchar(n)</item>
            <item>varbinary(max)</item>
            <item>varbinary(n)</item>
            <item>varchar(max)</item>
            </list>
            or
            <list type="bullet">
            <item>varchar(n)</item>
            </list>
            expression.</param>
            <returns><b>varbinary(max)</b> representing the compressed content of the input.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.ConnectionProperty(LinqToDB.DataProvider.SqlServer.SqlFn.ConnectionPropertyName)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/CONNECTIONPROPERTY-transact-sql">CONNECTIONPROPERTY (Transact-SQL)</see></b></para>
            <para>For a request that comes in to the server, this function returns information about the
            connection properties of the unique connection which supports that request.</para>
            </summary>
            <param name="property">The property of the connection.</param>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.CurrentRequestID">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/CURRENT-REQUEST-ID-transact-sql">CURRENT_REQUEST_ID (Transact-SQL)</see></b></para>
            <para>This function returns the ID of the current request within the current session.</para>
            </summary>
            <returns>smallint</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.CurrentTransactionID">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/CURRENT-TRANSACTION-ID-transact-sql">CURRENT_TRANSACTION_ID (Transact-SQL)</see></b></para>
            <para>This function returns the transaction ID of the current transaction in the current session.</para>
            </summary>
            <returns>bigint</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.Decompress(System.Byte[])">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/DECOMPRESS-transact-sql">DECOMPRESS (Transact-SQL)</see></b></para>
            <para>This function will decompress an input expression value, using the GZIP algorithm.
            <c>DECOMPRESS</c> will return a byte array (VARBINARY(MAX) type).</para>
            </summary>
            <param name="expression">A <b>varbinary(n)</b>, <b>varbinary(max)</b>, or <b>binary(n)</b> value.</param>
            <returns><b>varbinary(max)</b> representing the compressed content of the input.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.FormatMessage(System.Int32,System.Object[])">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/FORMATMESSAGE-transact-sql">FORMATMESSAGE (Transact-SQL)</see></b></para>
            <para>Constructs a message from an existing message in sys.messages or from a provided string.
            The functionality of FORMATMESSAGE resembles that of the RAISERROR statement.
            However, RAISERROR prints the message immediately, while FORMATMESSAGE returns the formatted message for further processing.</para>
            </summary>
            <param name="msg_number">Is the ID of the message stored in sys.messages. If msg_number is &lt;= 13000, or if the message does not exist in sys.messages, NULL is returned.</param>
            <param name="param_values">Is a parameter value for use in the message. Can be more than one parameter value. The values must be specified in the order in which the placeholder variables appear in the message. The maximum number of values is 20.</param>
            <returns>nvarchar</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.FormatMessage(System.String,System.Object[])">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/FORMATMESSAGE-transact-sql">FORMATMESSAGE (Transact-SQL)</see></b></para>
            <para>Constructs a message from an existing message in sys.messages or from a provided string.
            The functionality of FORMATMESSAGE resembles that of the RAISERROR statement.
            However, RAISERROR prints the message immediately, while FORMATMESSAGE returns the formatted message for further processing.</para>
            </summary>
            <param name="msg_string">Is a string enclosed in single quotes and containing parameter value placeholders.
            The error message can have a maximum of 2,047 characters. If the message contains 2,048 or more characters,
            only the first 2,044 are displayed and an ellipsis is added to indicate that the message has been truncated.
            Note that substitution parameters consume more characters than the output shows because of internal storage behavior.</param>
            <param name="param_values">Is a parameter value for use in the message. Can be more than one parameter value.
            The values must be specified in the order in which the placeholder variables appear in the message. The maximum number of values is 20.</param>
            <returns>nvarchar</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.GetAnsiNull(System.String)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/GETANSINULL-transact-sql">GETANSINULL (Transact-SQL)</see></b></para>
            <para>Returns the default nullability for the database for this session.</para>
            </summary>
            <param name="database">Is the name of the database for which to return nullability information.
            <c>database</c> is either <b>char</b> or <b>nchar</b>. If <b>char</b>, <c>database</c> is implicitly converted to <b>nchar</b>.</param>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.GetAnsiNull">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/GETANSINULL-transact-sql">GETANSINULL (Transact-SQL)</see></b></para>
            <para>Returns the default nullability for the database for this session.</para>
            </summary>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.HostID">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/HOST-ID-transact-sql">HOST_ID (Transact-SQL)</see></b></para>
            <para>Returns the workstation identification number. The workstation identification number is the process ID (PID)
            of the application on the client computer that is connecting to SQL Server.</para>
            </summary>
            <returns>char(10)</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.HostName">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/HOST-NAME-transact-sql">HOST_NAME (Transact-SQL)</see></b></para>
            <para>Returns the workstation identification number. The workstation identification number is the process ID (PID)
            of the application on the client computer that is connecting to SQL Server.</para>
            </summary>
            <returns>nvarchar(128)</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.IsNull``1(``0,``0)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/ISNULL-transact-sql">ISNULL (Transact-SQL)</see></b></para>
            <para>Replaces NULL with the specified replacement value.</para>
            </summary>
            <param name="check_expression">Is the <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            to be checked for NULL. <c>check_expression</c> can be of any type.</param>
            <param name="replacement_value">Is the expression to be returned if <c>check_expression</c> is NULL.
            <c>replacement_value</c> must be of a type that is implicitly convertible to the type of <c>check_expression</c>.</param>
            <returns>Returns the same type as <c>check_expression</c>. If a literal NULL is provided as <c>check_expression</c>,
            returns the datatype of the <c>replacement_value</c>. If a literal NULL is provided as <c>check_expression</c> and no
            <c>replacement_value</c> is provided, returns an <b>int</b>.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.IsNumeric``1(``0)">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/ISNUMERIC-transact-sql">ISNUMERIC (Transact-SQL)</see></b></para>
            <para>Determines whether an expression is a valid numeric type.</para>
            </summary>
            <param name="expression">Is the <see href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/expressions-transact-sql">expression</see>
            to be evaluated.</param>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.MinActiveRowVersion">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/MIN-ACTIVE-ROWVERSION-transact-sql">MIN_ACTIVE_ROWVERSION (Transact-SQL)</see></b></para>
            <para>Returns the workstation identification number. The workstation identification number is the process ID (PID)
            of the application on the client computer that is connecting to SQL Server.</para>
            </summary>
            <returns>Returns a <b>binary(8)</b> value.</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.NewID">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/NEWID-transact-sql">NEWID (Transact-SQL)</see></b></para>
            <para>Creates a unique value of type <b>uniqueidentifier</b>.</para>
            </summary>
            <returns>uniqueidentifier</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="P:LinqToDB.DataProvider.SqlServer.SqlFn.RowCount">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/ROWCOUNT-transact-sql">@@ROWCOUNT (Transact-SQL)</see></b></para>
            <para>Returns the number of rows affected by the last statement. If the number of rows is more than 2 billion,
            use <see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/ROWCOUNT-BIG-transact-sql">ROWCOUNT_BIG</see>.</para>
            </summary>
            <returns>int</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.RowCountBig">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/ROWCOUNT-BIG-transact-sql">ROWCOUNT_BIG (Transact-SQL)</see></b></para>
            <para>Returns the number of rows affected by the last statement executed. This function operates like
            <see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/ROWCOUNT-transact-sql">@@ROWCOUNT</see>,
            except the return type of ROWCOUNT_BIG is bigint.</para>
            </summary>
            <returns>bigint</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlFn.XactState">
            <summary>
            <para><b><see href="https://docs.microsoft.com/en-us/sql/t-sql/functions/ROWCOUNT-BIG-transact-sql">XACT_STATE (Transact-SQL)</see></b></para>
            <para>Is a scalar function that reports the user transaction state of a current running request.
            XACT_STATE indicates whether the request has an active user transaction, and whether the transaction is capable of being committed.</para>
            </summary>
            <returns>smallint</returns>
            <exception cref="T:LinqToDB.Linq.LinqException" />
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServer2012SqlOptimizer.AddOrderByForSkip(LinqToDB.SqlQuery.SqlStatement)">
            <summary>
            Adds an ORDER BY clause to queries using OFFSET/FETCH, if none exists
            </summary>
        </member>
        <member name="P:LinqToDB.DataProvider.SqlServer.SqlServerBulkCopy.MaxParameters">
            <remarks>
            Settings based on https://www.jooq.org/doc/3.12/manual/sql-building/dsl-context/custom-settings/settings-inline-threshold/
            We subtract 1 since SQL Server ADO Provider uses one parameter for command.
            </remarks>
        </member>
        <member name="P:LinqToDB.DataProvider.SqlServer.SqlServerBulkCopy.MaxSqlLength">
            <remarks>
            Based on https://docs.microsoft.com/en-us/sql/sql-server/maximum-capacity-specifications-for-sql-server?redirectedfrom=MSDN&amp;view=sql-server-ver15
            Default Max is actually (4096*65536) = 256MIB, but we keep a lower number here to avoid the cost of huge statements.
            </remarks>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextTable``2(LinqToDB.DataProvider.SqlServer.ISqlServerExtensions,LinqToDB.ITable{``0},System.String)">
            <summary>
            Performs full-text search query using FREETEXTTABLE function against all full-text columns in table.
            Example: "FREETEXTTABLE(table, *, N'search')".
            </summary>
            <typeparam name="TTable">Queried table mapping class.</typeparam>
            <typeparam name="TKey">Full-text index key type.</typeparam>
            <param name="ext">Extension point.</param>
            <param name="table">Table to perform full-text search query against.</param>
            <param name="term">Full-text search term.</param>
            <returns>Returns full-text search ranking table.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextTable``2(LinqToDB.DataProvider.SqlServer.ISqlServerExtensions,LinqToDB.ITable{``0},System.String,System.Int32)">
            <summary>
            Performs full-text search query using FREETEXTTABLE function against all full-text columns in table.
            Example: "FREETEXTTABLE(table, *, N'search', top)".
            </summary>
            <typeparam name="TTable">Queried table mapping class.</typeparam>
            <typeparam name="TKey">Full-text index key type.</typeparam>
            <param name="ext">Extension point.</param>
            <param name="table">Table to perform full-text search query against.</param>
            <param name="term">Full-text search term.</param>
            <param name="top">Top filter to return top N ranked results.</param>
            <returns>Returns full-text search ranking table.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextTableWithLanguage``2(LinqToDB.DataProvider.SqlServer.ISqlServerExtensions,LinqToDB.ITable{``0},System.String,System.String)">
            <summary>
            Performs full-text search query using FREETEXTTABLE function against all full-text columns in table.
            Example: "FREETEXTTABLE(table, *, N'search', LANGUAGE N'language')".
            </summary>
            <typeparam name="TTable">Queried table mapping class.</typeparam>
            <typeparam name="TKey">Full-text index key type.</typeparam>
            <param name="ext">Extension point.</param>
            <param name="table">Table to perform full-text search query against.</param>
            <param name="term">Full-text search term.</param>
            <param name="language">Language name (see syslanguages.alias).</param>
            <returns>Returns full-text search ranking table.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextTableWithLanguage``2(LinqToDB.DataProvider.SqlServer.ISqlServerExtensions,LinqToDB.ITable{``0},System.String,System.String,System.Int32)">
            <summary>
            Performs full-text search query using FREETEXTTABLE function against all full-text columns in table.
            Example: "FREETEXTTABLE(table, *, N'search', LANGUAGE N'language', top)".
            </summary>
            <typeparam name="TTable">Queried table mapping class.</typeparam>
            <typeparam name="TKey">Full-text index key type.</typeparam>
            <param name="ext">Extension point.</param>
            <param name="table">Table to perform full-text search query against.</param>
            <param name="term">Full-text search term.</param>
            <param name="language">Language name (see syslanguages.alias).</param>
            <param name="top">Top filter to return top N ranked results.</param>
            <returns>Returns full-text search ranking table.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextTableWithLanguage``2(LinqToDB.DataProvider.SqlServer.ISqlServerExtensions,LinqToDB.ITable{``0},System.String,System.Int32,System.Int32)">
            <summary>
            Performs full-text search query using FREETEXTTABLE function against all full-text columns in table.
            Example: "FREETEXTTABLE(table, *, N'search', LANGUAGE language_code, top)".
            </summary>
            <typeparam name="TTable">Queried table mapping class.</typeparam>
            <typeparam name="TKey">Full-text index key type.</typeparam>
            <param name="ext">Extension point.</param>
            <param name="table">Table to perform full-text search query against.</param>
            <param name="term">Full-text search term.</param>
            <param name="language">Language LCID code (see syslanguages.lcid).</param>
            <param name="top">Top filter to return top N ranked results.</param>
            <returns>Returns full-text search ranking table.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextTableWithLanguage``2(LinqToDB.DataProvider.SqlServer.ISqlServerExtensions,LinqToDB.ITable{``0},System.String,System.Int32)">
            <summary>
            Performs full-text search query using FREETEXTTABLE function against all full-text columns in table.
            Example: "FREETEXTTABLE(table, *, N'search', LANGUAGE language_code)".
            </summary>
            <typeparam name="TTable">Queried table mapping class.</typeparam>
            <typeparam name="TKey">Full-text index key type.</typeparam>
            <param name="ext">Extension point.</param>
            <param name="table">Table to perform full-text search query against.</param>
            <param name="term">Full-text search term.</param>
            <param name="language">Language LCID code (see syslanguages.lcid).</param>
            <returns>Returns full-text search ranking table.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextTable``2(LinqToDB.DataProvider.SqlServer.ISqlServerExtensions,LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            Performs full-text search query using FREETEXTTABLE function against specified full-text columns.
            Example: "FREETEXTTABLE(table, (col1, col2), N'search')".
            </summary>
            <typeparam name="TTable">Queried table mapping class.</typeparam>
            <typeparam name="TKey">Full-text index key type.</typeparam>
            <param name="ext">Extension point.</param>
            <param name="table">Table to perform full-text search query against.</param>
            <param name="columns">Selector expression for full-text columns that should be queried.</param>
            <param name="term">Full-text search term.</param>
            <returns>Returns full-text search ranking table.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextTable``2(LinqToDB.DataProvider.SqlServer.ISqlServerExtensions,LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Int32)">
            <summary>
            Performs full-text search query using FREETEXTTABLE function against specified full-text columns.
            Example: "FREETEXTTABLE(table, (col1, col2), N'search', top)".
            </summary>
            <typeparam name="TTable">Queried table mapping class.</typeparam>
            <typeparam name="TKey">Full-text index key type.</typeparam>
            <param name="ext">Extension point.</param>
            <param name="table">Table to perform full-text search query against.</param>
            <param name="columns">Selector expression for full-text columns that should be queried.</param>
            <param name="term">Full-text search term.</param>
            <param name="top">Top filter to return top N ranked results.</param>
            <returns>Returns full-text search ranking table.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextTableWithLanguage``2(LinqToDB.DataProvider.SqlServer.ISqlServerExtensions,LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.String)">
            <summary>
            Performs full-text search query using FREETEXTTABLE function against specified full-text columns.
            Example: "FREETEXTTABLE(table, (col1, col2), N'search', LANGUAGE N'language')".
            </summary>
            <typeparam name="TTable">Queried table mapping class.</typeparam>
            <typeparam name="TKey">Full-text index key type.</typeparam>
            <param name="ext">Extension point.</param>
            <param name="table">Table to perform full-text search query against.</param>
            <param name="columns">Selector expression for full-text columns that should be queried.</param>
            <param name="term">Full-text search term.</param>
            <param name="language">Language name (see syslanguages.alias).</param>
            <returns>Returns full-text search ranking table.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextTableWithLanguage``2(LinqToDB.DataProvider.SqlServer.ISqlServerExtensions,LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.String,System.Int32)">
            <summary>
            Performs full-text search query using FREETEXTTABLE function against specified full-text columns.
            Example: "FREETEXTTABLE(table, (col1, col2), N'search', LANGUAGE N'language', top)".
            </summary>
            <typeparam name="TTable">Queried table mapping class.</typeparam>
            <typeparam name="TKey">Full-text index key type.</typeparam>
            <param name="ext">Extension point.</param>
            <param name="table">Table to perform full-text search query against.</param>
            <param name="columns">Selector expression for full-text columns that should be queried.</param>
            <param name="term">Full-text search term.</param>
            <param name="language">Language name (see syslanguages.alias).</param>
            <param name="top">Top filter to return top N ranked results.</param>
            <returns>Returns full-text search ranking table.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextTableWithLanguage``2(LinqToDB.DataProvider.SqlServer.ISqlServerExtensions,LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Int32,System.Int32)">
            <summary>
            Performs full-text search query using FREETEXTTABLE function against specified full-text columns.
            Example: "FREETEXTTABLE(table, (col1, col2), N'search', LANGUAGE language_code, top)".
            </summary>
            <typeparam name="TTable">Queried table mapping class.</typeparam>
            <typeparam name="TKey">Full-text index key type.</typeparam>
            <param name="ext">Extension point.</param>
            <param name="table">Table to perform full-text search query against.</param>
            <param name="columns">Selector expression for full-text columns that should be queried.</param>
            <param name="term">Full-text search term.</param>
            <param name="language">Language LCID code (see syslanguages.lcid).</param>
            <param name="top">Top filter to return top N ranked results.</param>
            <returns>Returns full-text search ranking table.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextTableWithLanguage``2(LinqToDB.DataProvider.SqlServer.ISqlServerExtensions,LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Int32)">
            <summary>
            Performs full-text search query using FREETEXTTABLE function against specified full-text columns.
            Example: "FREETEXTTABLE(table, (col1, col2), N'search', LANGUAGE language_code)".
            </summary>
            <typeparam name="TTable">Queried table mapping class.</typeparam>
            <typeparam name="TKey">Full-text index key type.</typeparam>
            <param name="ext">Extension point.</param>
            <param name="table">Table to perform full-text search query against.</param>
            <param name="columns">Selector expression for full-text columns that should be queried.</param>
            <param name="term">Full-text search term.</param>
            <param name="language">Language LCID code (see syslanguages.lcid).</param>
            <returns>Returns full-text search ranking table.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerExtensions.ContainsTable``2(LinqToDB.DataProvider.SqlServer.ISqlServerExtensions,LinqToDB.ITable{``0},System.String)">
            <summary>
            Performs full-text search query using CONTAINSTABLE function against all full-text columns in table.
            Example: "CONTAINSTABLE(table, *, N'search')".
            </summary>
            <typeparam name="TTable">Queried table mapping class.</typeparam>
            <typeparam name="TKey">Full-text index key type.</typeparam>
            <param name="ext">Extension point.</param>
            <param name="table">Table to perform full-text search query against.</param>
            <param name="search">Full-text search condition.</param>
            <returns>Returns full-text search ranking table.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerExtensions.ContainsTable``2(LinqToDB.DataProvider.SqlServer.ISqlServerExtensions,LinqToDB.ITable{``0},System.String,System.Int32)">
            <summary>
            Performs full-text search query using CONTAINSTABLE function against all full-text columns in table.
            Example: "CONTAINSTABLE(table, *, N'search', top)".
            </summary>
            <typeparam name="TTable">Queried table mapping class.</typeparam>
            <typeparam name="TKey">Full-text index key type.</typeparam>
            <param name="ext">Extension point.</param>
            <param name="table">Table to perform full-text search query against.</param>
            <param name="search">Full-text search condition.</param>
            <param name="top">Top filter to return top N ranked results.</param>
            <returns>Returns full-text search ranking table.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerExtensions.ContainsTableWithLanguage``2(LinqToDB.DataProvider.SqlServer.ISqlServerExtensions,LinqToDB.ITable{``0},System.String,System.String)">
            <summary>
            Performs full-text search query using CONTAINSTABLE function against all full-text columns in table.
            Example: "CONTAINSTABLE(table, *, N'search', LANGUAGE N'language')".
            </summary>
            <typeparam name="TTable">Queried table mapping class.</typeparam>
            <typeparam name="TKey">Full-text index key type.</typeparam>
            <param name="ext">Extension point.</param>
            <param name="table">Table to perform full-text search query against.</param>
            <param name="search">Full-text search condition.</param>
            <param name="language">Language name (see syslanguages.alias).</param>
            <returns>Returns full-text search ranking table.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerExtensions.ContainsTableWithLanguage``2(LinqToDB.DataProvider.SqlServer.ISqlServerExtensions,LinqToDB.ITable{``0},System.String,System.String,System.Int32)">
            <summary>
            Performs full-text search query using CONTAINSTABLE function against all full-text columns in table.
            Example: "CONTAINSTABLE(table, *, N'search', LANGUAGE N'language', top)".
            </summary>
            <typeparam name="TTable">Queried table mapping class.</typeparam>
            <typeparam name="TKey">Full-text index key type.</typeparam>
            <param name="ext">Extension point.</param>
            <param name="table">Table to perform full-text search query against.</param>
            <param name="search">Full-text search condition.</param>
            <param name="language">Language name (see syslanguages.alias).</param>
            <param name="top">Top filter to return top N ranked results.</param>
            <returns>Returns full-text search ranking table.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerExtensions.ContainsTableWithLanguage``2(LinqToDB.DataProvider.SqlServer.ISqlServerExtensions,LinqToDB.ITable{``0},System.String,System.Int32,System.Int32)">
            <summary>
            Performs full-text search query using CONTAINSTABLE function against all full-text columns in table.
            Example: "CONTAINSTABLE(table, *, N'search', LANGUAGE language_code)".
            </summary>
            <typeparam name="TTable">Queried table mapping class.</typeparam>
            <typeparam name="TKey">Full-text index key type.</typeparam>
            <param name="ext">Extension point.</param>
            <param name="table">Table to perform full-text search query against.</param>
            <param name="search">Full-text search condition.</param>
            <param name="language">Language LCID code (see syslanguages.lcid).</param>
            <param name="top">Top filter to return top N ranked results.</param>
            <returns>Returns full-text search ranking table.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerExtensions.ContainsTableWithLanguage``2(LinqToDB.DataProvider.SqlServer.ISqlServerExtensions,LinqToDB.ITable{``0},System.String,System.Int32)">
            <summary>
            Performs full-text search query using CONTAINSTABLE function against all full-text columns in table.
            Example: "CONTAINSTABLE(table, *, N'search', LANGUAGE language_code, top)".
            </summary>
            <typeparam name="TTable">Queried table mapping class.</typeparam>
            <typeparam name="TKey">Full-text index key type.</typeparam>
            <param name="ext">Extension point.</param>
            <param name="table">Table to perform full-text search query against.</param>
            <param name="search">Full-text search condition.</param>
            <param name="language">Language LCID code (see syslanguages.lcid).</param>
            <returns>Returns full-text search ranking table.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerExtensions.ContainsTable``2(LinqToDB.DataProvider.SqlServer.ISqlServerExtensions,LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            Performs full-text search query using CONTAINSTABLE function against specified full-text columns.
            Example: "CONTAINSTABLE(table, (col1, col2), N'search')".
            </summary>
            <typeparam name="TTable">Queried table mapping class.</typeparam>
            <typeparam name="TKey">Full-text index key type.</typeparam>
            <param name="ext">Extension point.</param>
            <param name="table">Table to perform full-text search query against.</param>
            <param name="columns">Selector expression for full-text columns that should be queried.</param>
            <param name="search">Full-text search condition.</param>
            <returns>Returns full-text search ranking table.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerExtensions.ContainsTable``2(LinqToDB.DataProvider.SqlServer.ISqlServerExtensions,LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Int32)">
            <summary>
            Performs full-text search query using CONTAINSTABLE function against specified full-text columns.
            Example: "CONTAINSTABLE(table, (col1, col2), N'search', top)".
            </summary>
            <typeparam name="TTable">Queried table mapping class.</typeparam>
            <typeparam name="TKey">Full-text index key type.</typeparam>
            <param name="ext">Extension point.</param>
            <param name="table">Table to perform full-text search query against.</param>
            <param name="columns">Selector expression for full-text columns that should be queried.</param>
            <param name="search">Full-text search condition.</param>
            <param name="top">Top filter to return top N ranked results.</param>
            <returns>Returns full-text search ranking table.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerExtensions.ContainsTableWithLanguage``2(LinqToDB.DataProvider.SqlServer.ISqlServerExtensions,LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.String,System.Int32)">
            <summary>
            Performs full-text search query using CONTAINSTABLE function against specified full-text columns.
            Example: "CONTAINSTABLE(table, (col1, col2), N'search', LANGUAGE N'language', top)".
            </summary>
            <typeparam name="TTable">Queried table mapping class.</typeparam>
            <typeparam name="TKey">Full-text index key type.</typeparam>
            <param name="ext">Extension point.</param>
            <param name="table">Table to perform full-text search query against.</param>
            <param name="columns">Selector expression for full-text columns that should be queried.</param>
            <param name="search">Full-text search condition.</param>
            <param name="language">Language name (see syslanguages.alias).</param>
            <param name="top">Top filter to return top N ranked results.</param>
            <returns>Returns full-text search ranking table.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerExtensions.ContainsTableWithLanguage``2(LinqToDB.DataProvider.SqlServer.ISqlServerExtensions,LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.String)">
            <summary>
            Performs full-text search query using CONTAINSTABLE function against specified full-text columns.
            Example: "CONTAINSTABLE(table, (col1, col2), N'search', LANGUAGE N'language')".
            </summary>
            <typeparam name="TTable">Queried table mapping class.</typeparam>
            <typeparam name="TKey">Full-text index key type.</typeparam>
            <param name="ext">Extension point.</param>
            <param name="table">Table to perform full-text search query against.</param>
            <param name="columns">Selector expression for full-text columns that should be queried.</param>
            <param name="search">Full-text search condition.</param>
            <param name="language">Language name (see syslanguages.alias).</param>
            <returns>Returns full-text search ranking table.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerExtensions.ContainsTableWithLanguage``2(LinqToDB.DataProvider.SqlServer.ISqlServerExtensions,LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Int32,System.Int32)">
            <summary>
            Performs full-text search query using CONTAINSTABLE function against specified full-text columns.
            Example: "CONTAINSTABLE(table, (col1, col2), N'search', LANGUAGE language_code, top)".
            </summary>
            <typeparam name="TTable">Queried table mapping class.</typeparam>
            <typeparam name="TKey">Full-text index key type.</typeparam>
            <param name="ext">Extension point.</param>
            <param name="table">Table to perform full-text search query against.</param>
            <param name="columns">Selector expression for full-text columns that should be queried.</param>
            <param name="search">Full-text search condition.</param>
            <param name="language">Language LCID code (see syslanguages.lcid).</param>
            <param name="top">Top filter to return top N ranked results.</param>
            <returns>Returns full-text search ranking table.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerExtensions.ContainsTableWithLanguage``2(LinqToDB.DataProvider.SqlServer.ISqlServerExtensions,LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Int32)">
            <summary>
            Performs full-text search query using CONTAINSTABLE function against specified full-text columns.
            Example: "CONTAINSTABLE(table, (col1, col2), N'search', LANGUAGE language_code)".
            </summary>
            <typeparam name="TTable">Queried table mapping class.</typeparam>
            <typeparam name="TKey">Full-text index key type.</typeparam>
            <param name="ext">Extension point.</param>
            <param name="table">Table to perform full-text search query against.</param>
            <param name="columns">Selector expression for full-text columns that should be queried.</param>
            <param name="search">Full-text search condition.</param>
            <param name="language">Language LCID code (see syslanguages.lcid).</param>
            <returns>Returns full-text search ranking table.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeText(LinqToDB.DataProvider.SqlServer.ISqlServerExtensions,System.String,System.Object[])">
            <summary>
            Applies full-text search condition using FREETEXT predicate against specified full-text columns or all FTS columns in table.
            Example: "FREETEXT((col1, col2), N'search')".
            </summary>
            <param name="ext">Extension point.</param>
            <param name="term">Full-text search term.</param>
            <param name="tableOrColumns">Full-text columns that should be queried or table, if all FST columns should be queried.</param>
            <returns>Returns <c>true</c> if full-text search found matching records.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextWithLanguage(LinqToDB.DataProvider.SqlServer.ISqlServerExtensions,System.String,System.String,System.Object[])">
            <summary>
            Applies full-text search condition using FREETEXT predicate against specified full-text columns or all FTS columns in table.
            Example: "FREETEXT((col1, col2), N'search', LANGUAGE N'language')".
            </summary>
            <param name="ext">Extension point.</param>
            <param name="term">Full-text search term.</param>
            <param name="language">Language name (see syslanguages.alias).</param>
            <param name="tableOrColumns">Full-text columns that should be queried or table, if all FST columns should be queried.</param>
            <returns>Returns <c>true</c> if full-text search found matching records.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextWithLanguage(LinqToDB.DataProvider.SqlServer.ISqlServerExtensions,System.String,System.Int32,System.Object[])">
            <summary>
            Applies full-text search condition using FREETEXT predicate against specified full-text columns or all FTS columns in table.
            Example: "FREETEXT((col1, col2), N'search', LANGUAGE language_code)".
            </summary>
            <param name="ext">Extension point.</param>
            <param name="term">Full-text search term.</param>
            <param name="language">Language LCID code (see syslanguages.lcid).</param>
            <param name="tableOrColumns">Full-text columns that should be queried or table, if all FST columns should be queried.</param>
            <returns>Returns <c>true</c> if full-text search found matching records.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerExtensions.Contains(LinqToDB.DataProvider.SqlServer.ISqlServerExtensions,System.String,System.Object[])">
            <summary>
            Applies full-text search condition using CONTAINS predicate against specified full-text columns or all FTS columns in table.
            Example: "CONTAINS((col1, col2), N'search')".
            </summary>
            <param name="ext">Extension point.</param>
            <param name="search">Full-text search condition.</param>
            <param name="tableOrColumns">Full-text columns that should be queried or table, if all FST columns should be queried.</param>
            <returns>Returns <c>true</c> if full-text search found matching records.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerExtensions.ContainsWithLanguage(LinqToDB.DataProvider.SqlServer.ISqlServerExtensions,System.String,System.String,System.Object[])">
            <summary>
            Applies full-text search condition using CONTAINS predicate against specified full-text columns or all FTS columns in table.
            Example: "CONTAINS((col1, col2), N'search', LANGUAGE N'language')".
            </summary>
            <param name="ext">Extension point.</param>
            <param name="search">Full-text search condition.</param>
            <param name="language">Language name (see syslanguages.alias).</param>
            <param name="tableOrColumns">Full-text columns that should be queried or table, if all FST columns should be queried.</param>
            <returns>Returns <c>true</c> if full-text search found matching records.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerExtensions.ContainsWithLanguage(LinqToDB.DataProvider.SqlServer.ISqlServerExtensions,System.String,System.Int32,System.Object[])">
            <summary>
            Applies full-text search condition using CONTAINS predicate against specified full-text columns or all FTS columns in table.
            Example: "CONTAINS((col1, col2), N'search', LANGUAGE language_code)".
            </summary>
            <param name="ext">Extension point.</param>
            <param name="search">Full-text search condition.</param>
            <param name="language">Language LCID code (see syslanguages.lcid).</param>
            <param name="tableOrColumns">Full-text columns that should be queried or table, if all FST columns should be queried.</param>
            <returns>Returns <c>true</c> if full-text search found matching records.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerExtensions.ContainsProperty(LinqToDB.DataProvider.SqlServer.ISqlServerExtensions,System.Object,System.String,System.String)">
            <summary>
            Applies full-text search condition using CONTAINS(PROPERTY(...)) predicate against specified full-text column property.
            Example: "CONTAINS(PROPERTY(column, 'property'), N'search')".
            </summary>
            <param name="ext">Extension point.</param>
            <param name="column">Full-text column that should be queried.</param>
            <param name="property">Name of document property to search in.</param>
            <param name="search">Full-text search condition.</param>
            <returns>Returns <c>true</c> if full-text search found matching records.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerExtensions.ContainsPropertyWithLanguage(LinqToDB.DataProvider.SqlServer.ISqlServerExtensions,System.Object,System.String,System.String,System.String)">
            <summary>
            Applies full-text search condition using CONTAINS(PROPERTY(...)) predicate against specified full-text column property.
            Example: "CONTAINS(PROPERTY(column, 'property'), N'search', LANGUAGE N'language')".
            </summary>
            <param name="ext">Extension point.</param>
            <param name="column">Full-text column that should be queried.</param>
            <param name="property">Name of document property to search in.</param>
            <param name="search">Full-text search condition.</param>
            <param name="language">Language name (see syslanguages.alias).</param>
            <returns>Returns <c>true</c> if full-text search found matching records.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerExtensions.ContainsPropertyWithLanguage(LinqToDB.DataProvider.SqlServer.ISqlServerExtensions,System.Object,System.String,System.String,System.Int32)">
            <summary>
            Applies full-text search condition using CONTAINS(PROPERTY(...)) predicate against specified full-text column property.
            Example: "CONTAINS(PROPERTY(column, 'property'), N'search', LANGUAGE language_code)".
            </summary>
            <param name="ext">Extension point.</param>
            <param name="column">Full-text column that should be queried.</param>
            <param name="property">Name of document property to search in.</param>
            <param name="search">Full-text search condition.</param>
            <param name="language">Language LCID code (see syslanguages.lcid).</param>
            <returns>Returns <c>true</c> if full-text search found matching records.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerExtensions.IsNull``1(LinqToDB.DataProvider.SqlServer.ISqlServerExtensions,``0,``0)">
            <summary>
            Generates 'ISNULL( value, replacementValue )' function.
            </summary>
            <typeparam name="T">Generic type.</typeparam>
            <param name="ext">Extension point.</param>
            <param name="value">Value to test whether is NULL.</param>
            <param name="replacementValue">Value to replace.</param>
            <returns>Function returns a replacementValue if the value is NULL.</returns>
        </member>
        <member name="T:LinqToDB.DataProvider.SqlServer.SqlServerHints">
            <summary>
            https://docs.microsoft.com/en-us/sql/t-sql/queries/hints-transact-sql
            </summary>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerHints.TableHint``1(LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable{``0},System.String)">
            <summary>
            Adds a table hint to a table in generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <param name="table">Table-like query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <returns>Table-like query source with table hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerHints.TableHint``2(LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable{``0},System.String,``1)">
            <summary>
            Adds a table hint to a table in generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <typeparam name="TParam">Table hint parameter type.</typeparam>
            <param name="table">Table-like query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <param name="hintParameter">Table hint parameter.</param>
            <returns>Table-like query source with table hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerHints.TableHint``2(LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable{``0},System.String,``1[])">
            <summary>
            Adds a table hint to a table in generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <typeparam name="TParam">Table hint parameter type.</typeparam>
            <param name="table">Table-like query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <param name="hintParameters">Table hint parameters.</param>
            <returns>Table-like query source with table hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerHints.TablesInScopeHint``1(LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable{``0},System.String)">
            <summary>
            Adds a table hint to all the tables in the method scope.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <returns>Query source with join hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerHints.TablesInScopeHint``2(LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable{``0},System.String,``1)">
            <summary>
            Adds a table hint to all the tables in the method scope.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <typeparam name="TParam">Table hint parameter type.</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <param name="hintParameter">Table hint parameter.</param>
            <returns>Query source with join hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerHints.TablesInScopeHint``1(LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable{``0},System.String,System.Object[])">
            <summary>
            Adds a table hint to all the tables in the method scope.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <param name="hintParameters">Table hint parameters.</param>
            <returns>Query source with join hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerHints.TablesInScopeHint2012Plus``1(LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable{``0},System.String)">
            <summary>
            Adds a table hint to all the tables in the method scope.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <returns>Query source with join hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerHints.TablesInScopeHint2014Plus``1(LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable{``0},System.String)">
            <summary>
            Adds a table hint to all the tables in the method scope.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <returns>Query source with join hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerHints.JoinHint``1(LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable{``0},System.String)">
            <summary>
            Adds a join hint to a generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <param name="table">Table-like query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <returns>Query source with join hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerHints.JoinHint``1(LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable{``0},System.String)">
            <summary>
            Adds a join hint to a generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <returns>Query source with join hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerHints.QueryHint``1(LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable{``0},System.String)">
            <summary>
            Adds a query hint to a generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <returns>Query source with join hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerHints.QueryHint``2(LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable{``0},System.String,``1)">
            <summary>
            Adds a query hint to the generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <typeparam name="TParam">Hint parameter type</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <param name="hintParameter">Hint parameter.</param>
            <returns>Query source with join hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerHints.QueryHint``2(LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable{``0},System.String,``1[])">
            <summary>
            Adds a query hint to the generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <typeparam name="TParam">Table hint parameter type.</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <param name="hintParameters">Table hint parameters.</param>
            <returns>Table-like query source with table hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerHints.QueryHint2019Plus``1(LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable{``0},System.String)">
            <summary>
            Adds a query hint to a generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <returns>Query source with join hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerHints.QueryHint2008Plus``1(LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable{``0},System.String)">
            <summary>
            Adds a query hint to a generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <returns>Query source with join hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerHints.QueryHint2012Plus``1(LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable{``0},System.String)">
            <summary>
            Adds a query hint to a generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <returns>Query source with join hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerHints.QueryHint2016Plus``1(LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable{``0},System.String)">
            <summary>
            Adds a query hint to a generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <returns>Query source with join hints.</returns>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerRetryPolicy.#ctor">
            <summary>
              Creates a new instance of <see cref="T:LinqToDB.DataProvider.SqlServer.SqlServerRetryPolicy" />.
            </summary>
            <remarks>
                The default retry limit is 5, which means that the total amount of time spent before failing is 26 seconds plus the random factor.
            </remarks>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerRetryPolicy.#ctor(System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:LinqToDB.DataProvider.SqlServer.SqlServerRetryPolicy" />.
            </summary>
            <param name="maxRetryCount"> The maximum number of retry attempts. </param>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerRetryPolicy.#ctor(System.Int32,System.TimeSpan,System.Collections.Generic.ICollection{System.Int32})">
            <summary>
                Creates a new instance of <see cref="T:LinqToDB.DataProvider.SqlServer.SqlServerRetryPolicy" />.
            </summary>
            <param name="maxRetryCount">The maximum number of retry attempts.</param>
            <param name="maxRetryDelay">The maximum delay in milliseconds between retries.</param>
            <param name="errorNumbersToAdd">Additional SQL error numbers that should be considered transient.</param>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerTools.ResolveSqlTypes(System.String)">
            <summary>
            Tries to load and register spatial types using provided path to types assembly (Microsoft.SqlServer.Types).
            Also check https://linq2db.github.io/articles/FAQ.html#how-can-i-use-sql-server-spatial-types
            for additional required configuration steps.
            </summary>
        </member>
        <member name="M:LinqToDB.DataProvider.SqlServer.SqlServerTools.ResolveSqlTypes(System.Reflection.Assembly)">
            <summary>
            Registers spatial types assembly (Microsoft.SqlServer.Types).
            Also check https://linq2db.github.io/articles/FAQ.html#how-can-i-use-sql-server-spatial-types
            for additional required configuration steps.
            </summary>
        </member>
        <member name="T:LinqToDB.DataProvider.SqlServer.SqlServerTransientExceptionDetector">
            <summary>
                Detects the exceptions caused by SQL Server transient failures.
            </summary>
        </member>
        <member name="T:LinqToDB.DataProvider.SqlServer.SqlType">
            <summary>
            See <see href="https://docs.microsoft.com/en-us/sql/t-sql/data-types/data-types-transact-sql">Data types</see>.
            </summary>
        </member>
        <member name="T:LinqToDB.DataProvider.SqlServer.SqlType`1">
            <summary>
            See <see href="https://docs.microsoft.com/en-us/sql/t-sql/data-types/data-types-transact-sql">Data types</see>.
            </summary>
        </member>
        <member name="P:LinqToDB.DataProvider.Sybase.SybaseBulkCopy.MaxSqlLength">
            <remarks>
            Setting is conservative based on https://maxdb.sap.com/doc/7_6/f6/069940ccd42a54e10000000a1550b0/content.htm
            Possible to be higher in other versions.
            </remarks>
        </member>
        <member name="P:LinqToDB.DataProvider.Sybase.SybaseBulkCopy.MaxParameters">
            <remarks>
            Settings based on https://www.jooq.org/doc/3.12/manual/sql-building/dsl-context/custom-settings/settings-inline-threshold/
            We subtract 1 based on possibility of provider using parameter for command.
            </remarks>
        </member>
        <member name="P:LinqToDB.DataProvider.Sybase.SybaseTools.DefaultBulkCopyType">
            <summary>
            Using <see cref="F:LinqToDB.Data.BulkCopyType.ProviderSpecific"/> mode with bit and identity fields could lead to following errors:
            - bit: <c>false</c> inserted into bit field for first record even if <c>true</c> provided;
            - identity: bulk copy operation fail with exception: "Bulk insert failed. Null value is not allowed in not null column.".
            Those are provider bugs and could be fixed in latest versions.
            </summary>
        </member>
        <member name="T:LinqToDB.Metadata.SystemDataSqlServerAttributeReader">
            <summary>
            Adds support for types and functions, defined in Microsoft.SqlServer.Types spatial types
            (or any other types and methods, that use SqlMethodAttribute or SqlUserDefinedTypeAttribute mapping attributes).
            Check https://linq2db.github.io/articles/FAQ.html#how-can-i-use-sql-server-spatial-types
            for additional required configuration steps to support SQL Server spatial types.
            </summary>
        </member>
        <member name="M:LinqToDB.Metadata.SystemDataSqlServerAttributeReader.GetDynamicColumns(System.Type)">
            <inheritdoc cref="M:LinqToDB.Metadata.IMetadataReader.GetDynamicColumns(System.Type)"/>
        </member>
        <member name="M:LinqToDB.Metadata.AttributeReader.GetDynamicColumns(System.Type)">
            <inheritdoc cref="M:LinqToDB.Metadata.IMetadataReader.GetDynamicColumns(System.Type)"/>
        </member>
        <member name="M:LinqToDB.Metadata.FluentMetadataReader.GetDynamicColumns(System.Type)">
            <inheritdoc cref="M:LinqToDB.Metadata.IMetadataReader.GetDynamicColumns(System.Type)"/>
        </member>
        <member name="M:LinqToDB.Metadata.FluentMetadataReader.GetRegisteredTypes">
            <summary>
            Gets all types, registered by  by current fluent mapper.
            </summary>
            <returns>
            Returns array with all types, mapped by current fluent mapper.
            </returns>
        </member>
        <member name="M:LinqToDB.Metadata.IMetadataReader.GetDynamicColumns(System.Type)">
            <summary>
            Gets the dynamic columns defined on given type.
            </summary>
            <param name="type">The type.</param>
            <returns>All dynamic columns defined on given type.</returns>
        </member>
        <member name="T:LinqToDB.Metadata.MetadataException">
            <summary>
            Defines the base class for the namespace exceptions.
            </summary>
            <remarks>
            This class is the base class for exceptions that may occur during
            execution of the namespace members.
            </remarks>
        </member>
        <member name="M:LinqToDB.Metadata.MetadataException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LinqToDB.Metadata.MetadataException"/> class.
            </summary>
            <remarks>
            This constructor initializes the <see cref="P:System.Exception.Message"/>
            property of the new instance such as "A Build Type exception has occurred."
            </remarks>
        </member>
        <member name="M:LinqToDB.Metadata.MetadataException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LinqToDB.Metadata.MetadataException"/> class 
            with the specified error message.
            </summary>
            <param name="message">The message to display to the client when the
            exception is thrown.</param>
            <seealso cref="P:System.Exception.Message"/>
        </member>
        <member name="M:LinqToDB.Metadata.MetadataException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:LinqToDB.Metadata.MetadataException"/> class 
            with the specified error message and InnerException property.
            </summary>
            <param name="message">The message to display to the client when the
            exception is thrown.</param>
            <param name="innerException">The InnerException, if any, that threw
            the current exception.</param>
            <seealso cref="P:System.Exception.Message"/>
            <seealso cref="P:System.Exception.InnerException"/>
        </member>
        <member name="M:LinqToDB.Metadata.MetadataException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:LinqToDB.Metadata.MetadataException"/> class 
            with the specified InnerException property.
            </summary>
            <param name="innerException">The InnerException, if any, that threw
            the current exception.</param>
            <seealso cref="P:System.Exception.InnerException"/>
        </member>
        <member name="M:LinqToDB.Metadata.MetadataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:LinqToDB.Metadata.MetadataException"/> class
            with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or
            destination.</param>
            <remarks>This constructor is called during deserialization to
            reconstitute the exception object transmitted over a stream.</remarks>
        </member>
        <member name="T:LinqToDB.Metadata.MetadataReader">
            <summary>
            Aggregation metadata reader, that just delegates all calls to nested readers.
            </summary>
        </member>
        <member name="M:LinqToDB.Metadata.MetadataReader.GetDynamicColumns(System.Type)">
            <inheritdoc cref="M:LinqToDB.Metadata.IMetadataReader.GetDynamicColumns(System.Type)"/>
        </member>
        <member name="M:LinqToDB.Metadata.SystemComponentModelDataAnnotationsSchemaAttributeReader.GetDynamicColumns(System.Type)">
            <inheritdoc cref="M:LinqToDB.Metadata.IMetadataReader.GetDynamicColumns(System.Type)"/>
        </member>
        <member name="M:LinqToDB.Metadata.XmlAttributeReader.GetDynamicColumns(System.Type)">
            <inheritdoc cref="M:LinqToDB.Metadata.IMetadataReader.GetDynamicColumns(System.Type)"/>
        </member>
        <member name="T:LinqToDB.DataType">
            <summary>
            List of data types, supported by linq2db.
            Provider-level support depends on database capabilities and current implementation
            support level and could vary for different providers.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Undefined">
            <summary>
            Undefined data type.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Char">
            <summary>
            A fixed-length stream of non-Unicode characters ranging between 1 and 8,000 characters.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.VarChar">
            <summary>
            A variable-length stream of non-Unicode characters ranging between 1 and 8,000 characters.
            Use VarChar when the database column is varchar(max).
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Text">
            <summary>
            A variable-length stream of non-Unicode data with a maximum length of 2 31 -1 (or 2,147,483,647) characters.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.NChar">
            <summary>
            A fixed-length stream of Unicode characters ranging between 1 and 4,000 characters.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.NVarChar">
             <summary>
             A variable-length stream of Unicode characters ranging between 1 and 4,000 characters.
             Implicit conversion fails if the string is greater than 4,000 characters.
             Oracle: We need NVarChar2 in order to insert UTF8 string values. The default Odp VarChar2 dbtype doesnt work
             with UTF8 values. Note : Microsoft oracle client uses NVarChar value by default.
            
             Same as VARCHAR2 except that the column stores values in the  National CS , ie you can store values in Bangla
             if your National CS is BN8BSCII .If the National CS is of fixed width CS (all characters are represented by
              a fixed byte ,say 2 bytes for JA16EUCFIXED) , then NVARCHAR2(30) stores 30 Characters.
             Varchar2 works with 8 bit characters where as Nvarchar2 works ith 16 bit characters.
             If you have to store data other than english prefer Nvarchar2 or viceversa.
            
             NCHAR and NVARCHAR2 are Unicode datatypes that store Unicode character data. The character set of NCHAR and
             NVARCHAR2 datatypes can only be either AL16UTF16 or UTF8 and is specified at database creation time as the
             national character set. AL16UTF16 and UTF8 are both Unicode encoding. The NCHAR datatype stores fixed-length
             character strings that correspond to the national character set.The NVARCHAR2 datatype stores variable length
             character strings. When you create a table with an NCHAR or NVARCHAR2 column, the maximum size specified is
             always in character length semantics. Character length semantics is the default and only length semantics for
              NCHAR or NVARCHAR2. For example, if national character set is UTF8, then the following statement defines the
              maximum byte length of 90 bytes: CREATE TABLE tab1 (col1 NCHAR(30)); This statement creates a column with
             maximum character length of 30. The maximum byte length is the multiple of the maximum character length and
             the maximum number of bytes in each character.
             The maximum length of an NVARCHAR2 column is 4000 bytes. It can hold up to 4000 characters. The actual data
              is subject to the maximum byte limit of 4000. The two size constraints must be satisfied simultaneously at run time.
             </summary>
        </member>
        <member name="F:LinqToDB.DataType.NText">
            <summary>
            A variable-length stream of Unicode data with a maximum length of 2 30 - 1 (or 1,073,741,823) characters.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Binary">
            <summary>
            A fixed-length stream of binary data ranging between 1 and 8,000 bytes.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.VarBinary">
            <summary>
            A variable-length stream of binary data ranging between 1 and 8,000 bytes.
            Implicit conversion fails if the byte array is greater than 8,000 bytes.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Blob">
            <summary>
            Binary large object.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Image">
            <summary>
            A variable-length stream of binary data ranging from 0 to 2 31 -1 (or 2,147,483,647) bytes.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Boolean">
            <summary>
            A simple type representing Boolean values of true or false.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Guid">
            <summary>
            A globally unique identifier (or GUID).
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.SByte">
            <summary>
            An integral type representing signed 8-bit integers with values between -128 and 127.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Int16">
            <summary>
            An integral type representing signed 16-bit integers with values between -32768 and 32767.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Int32">
            <summary>
            An integral type representing signed 32-bit integers with values between -2147483648 and 2147483647.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Int64">
            <summary>
            An integral type representing signed 64-bit integers with values between -9223372036854775808 and 9223372036854775807.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Byte">
            <summary>
            An 8-bit unsigned integer ranging in value from 0 to 255.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.UInt16">
            <summary>
            An integral type representing unsigned 16-bit integers with values between 0 and 65535.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.UInt32">
            <summary>
            An integral type representing unsigned 32-bit integers with values between 0 and 4294967295.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.UInt64">
            <summary>
            An integral type representing unsigned 64-bit integers with values between 0 and 18446744073709551615.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Single">
            <summary>
            A floating point number within the range of -3.40E +38 through 3.40E +38.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Double">
            <summary>
            A floating point number within the range of -1.79E +308 through 1.79E +308.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Decimal">
            <summary>
            A simple type representing values with fixed precision and scale numbers.
            When maximum precision is used, valid values are from -10^38+1 through 10^38-1.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Money">
            <summary>
            A currency value ranging from -2 63 (or -9,223,372,036,854,775,808) to 2 63 -1 (or +9,223,372,036,854,775,807)
            with an accuracy to a ten-thousandth of a currency unit.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.SmallMoney">
            <summary>
            A currency value ranging from -214,748.3648 to +214,748.3647 with an accuracy to a ten-thousandth of a currency unit.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Date">
            <summary>
            A type representing a date value.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Date32">
            <summary>
            Date32 ClickHouse type.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Time">
            <summary>
            A type representing a time value.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.DateTime">
            <summary>
            Date and time data ranging in value from January 1, 1753 to December 31, 9999 to an accuracy of 3.33 milliseconds.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.DateTime2">
            <summary>
            Date and time data.
            Date value range is from January 1,1 AD through December 31, 9999 AD.
            Time value range is 00:00:00 through 23:59:59.9999999 with an accuracy of 100 nanoseconds.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.SmallDateTime">
            <summary>
            Date and time data ranging in value from January 1, 1900 to June 6, 2079 to an accuracy of one minute.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.DateTimeOffset">
            <summary>
            Date and time data with time zone awareness.
            Date value range is from January 1,1 AD through December 31, 9999 AD.
            Time value range is 00:00:00 through 23:59:59.9999999 with an accuracy of 100 nanoseconds.
            Time zone value range is -14:00 through +14:00.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.DateTime64">
            <summary>
            DateTime64 ClickHouse type.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Timestamp">
            <summary>
            Array of type Byte.
            Automatically generated binary numbers, which are guaranteed to be unique within a database.
            timestamp is used typically as a mechanism for version-stamping table rows. The storage size is 8 bytes.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Xml">
            <summary>
            An XML value. Obtain the XML as a string using the GetValue method or Value property,
            or as an XmlReader by calling the CreateReader method.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Variant">
            <summary>
            A general type representing any reference or value type not explicitly represented by another DataType value.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.VarNumeric">
            <summary>
            A variable-length numeric value.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Udt">
            <summary>
            A SQL Server 2005 user-defined type (UDT).
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.BitArray">
            <summary>
            Array of bits.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Dictionary">
            <summary>
            Dictionary type for key-value pairs.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Cursor">
            <summary>
            Result set (for example OracleDbType.RefCursor).
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Json">
            <summary>
            Json type utilized in postgres provider.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.BinaryJson">
            <summary>
            Binary type utilized postgres provider (jsonb).
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Structured">
            <summary>
            SQL Server 2008+ table-valued parameter type (TVP).
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Long">
            <summary>
            Oracle data type for storing character data of variable length up to 2 Gigabytes in length (bigger version of the VARCHAR2 datatype).
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.LongRaw">
            <summary>
            Oracle data type for storing binary data of variable length up to 2 Gigabytes in length.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Interval">
            <summary>
            PostgreSQL interval type.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Enum">
            <summary>
            PostgreSQL Enum type.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Enum8">
            <summary>
            ClickHouse Enum8 type.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Enum16">
            <summary>
            ClickHouse Enum16 type.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.BFile">
            <summary>
            Oracle BFILE data type.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.DecFloat">
            <summary>
            Type representing number with fixed precision and floating scale.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.TimeTZ">
            <summary>
            Type representing a time value with timezone or offset.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Int128">
            <summary>
            An integral type representing signed 128-bit integers with values between -170141183460469231731687303715884105728 and 170141183460469231731687303715884105727.
            Used with: Firebird 4+, ClickHouse.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.UInt128">
            <summary>
            Unsigned 128-bit integer.
            Used with: ClickHouse.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Int256">
            <summary>
            Signed 256-bit integer.
            Used with: ClickHouse.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.UInt256">
            <summary>
            Unsigned 256-bit integer.
            Used with: ClickHouse.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.IPv4">
            <summary>
            IPv4 address.
            Used with: ClickHouse.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.IPv6">
            <summary>
            IPv6 address.
            Used with: ClickHouse.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.IntervalSecond">
            <summary>
            IntervalSecond ClickHouse type.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.IntervalMinute">
            <summary>
            IntervalMinute ClickHouse type.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.IntervalHour">
            <summary>
            IntervalHour ClickHouse type.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.IntervalDay">
            <summary>
            IntervalDay ClickHouse type.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.IntervalWeek">
            <summary>
            IntervalWeek ClickHouse type.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.IntervalMonth">
            <summary>
            IntervalMonth ClickHouse type.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.IntervalQuarter">
            <summary>
            IntervalQuarter ClickHouse type.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.IntervalYear">
            <summary>
            IntervalYear ClickHouse type.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Decimal32">
            <summary>
            Decimal32 ClickHouse type.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Decimal64">
            <summary>
            Decimal64 ClickHouse type.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Decimal128">
            <summary>
            Decimal128 ClickHouse type.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Decimal256">
            <summary>
            Decimal256 ClickHouse type.
            </summary>
        </member>
        <member name="T:LinqToDB.Data.BulkCopyOptions">
            <summary>
            Defines behavior of <see cref="M:LinqToDB.Data.DataConnectionExtensions.BulkCopy``1(LinqToDB.Data.DataConnection,LinqToDB.Data.BulkCopyOptions,System.Collections.Generic.IEnumerable{``0})"/> method.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.BulkCopyOptions.MaxBatchSize">
            <summary>Number of rows in each batch. At the end of each batch, the rows in the batch are sent to the server.</summary>
            <returns>The integer value of the <see cref="P:LinqToDB.Data.BulkCopyOptions.MaxBatchSize"></see> property, or zero if no value has been set.</returns>
        </member>
        <member name="P:LinqToDB.Data.BulkCopyOptions.KeepIdentity">
            <summary>
            If this option set to true, bulk copy will use values of columns, marked with IsIdentity flag.
            SkipOnInsert flag in this case will be ignored.
            Otherwise those columns will be skipped and values will be generated by server.
            Not compatible with <see cref="F:LinqToDB.Data.BulkCopyType.RowByRow"/> mode.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.BulkCopyOptions.ServerName">
            <summary>
            Gets or sets explicit name of target server instead of one, configured for copied entity in mapping schema.
            See <see cref="M:LinqToDB.LinqExtensions.ServerName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.
            Also note that it is not supported by provider-specific insert method.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.BulkCopyOptions.DatabaseName">
            <summary>
            Gets or sets explicit name of target database instead of one, configured for copied entity in mapping schema.
            See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.BulkCopyOptions.SchemaName">
            <summary>
            Gets or sets explicit name of target schema/owner instead of one, configured for copied entity in mapping schema.
            See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.BulkCopyOptions.TableName">
            <summary>
            Gets or sets explicit name of target table instead of one, configured for copied entity in mapping schema.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.BulkCopyOptions.TableOptions">
            <summary>
            Gets or sets <see cref="T:LinqToDB.TableOptions"/> flags overrides instead of configured for copied entity in mapping schema.
            See <see cref="M:LinqToDB.TableExtensions.IsTemporary``1(LinqToDB.ITable{``0},System.Boolean)"/> method for support information per provider.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.BulkCopyOptions.NotifyAfter">
            <summary>
            Gets or sets counter after how many copied records <see cref="P:LinqToDB.Data.BulkCopyOptions.RowsCopiedCallback"/> should be called.
            E.g. if you set it to 10, callback will be called after each 10 copied records.
            To disable callback, set this option to 0 (default value).
            </summary>
        </member>
        <member name="P:LinqToDB.Data.BulkCopyOptions.RowsCopiedCallback">
            <summary>
            Gets or sets callback method that will be called by BulkCopy operation after each <see cref="P:LinqToDB.Data.BulkCopyOptions.NotifyAfter"/> rows copied.
            This callback will not be used if <see cref="P:LinqToDB.Data.BulkCopyOptions.NotifyAfter"/> set to 0.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.BulkCopyOptions.UseParameters">
            <summary>
            Gets or sets whether to Always use Parameters for MultipleRowsCopy. Default is false.
            If True, provider's override for <see cref="P:LinqToDB.DataProvider.BasicBulkCopy.MaxParameters"/> will be used to determine the maximum number of rows per insert,
            Unless overridden by <see cref="P:LinqToDB.Data.BulkCopyOptions.MaxParametersForBatch"/>.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.BulkCopyOptions.MaxParametersForBatch">
            <summary>
            If set, will override the Maximum parameters per batch statement from <see cref="P:LinqToDB.DataProvider.BasicBulkCopy.MaxParameters"/>.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.BulkCopyOptions.MaxDegreeOfParallelism">
            <summary>
            Implemented only by ClickHouse.Client provider. Defines number of connections, used for parallel insert in <see cref="F:LinqToDB.Data.BulkCopyType.ProviderSpecific"/> mode.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.BulkCopyOptions.WithoutSession">
            <summary>
            Implemented only by ClickHouse.Client provider. When set, provider-specific bulk copy will use session-less connection even if called over connection with session.
            Note that session-less connections cannot be used with session-bound functionality like temporary tables.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.BulkCopyRowsCopied.Abort">
            <summary>
            Gets or sets a value that indicates whether the bulk copy operation should be aborted.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.BulkCopyRowsCopied.RowsCopied">
            <summary>
            Gets a value that returns the number of rows copied during the current bulk copy operation.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.BulkCopyRowsCopied.StartTime">
            <summary>
            Gets operation execution start time.
            </summary>
        </member>
        <member name="T:LinqToDB.Data.BulkCopyType">
            <summary>
            Bulk copy implementation type.
            For more details on support level by provider see
            <a href="https://github.com/linq2db/linq2db/wiki/Bulk-Copy">this article</a>.
            </summary>
        </member>
        <member name="F:LinqToDB.Data.BulkCopyType.Default">
            <summary>
            LINQ To DB will select copy method based on current provider.
            Default method usually set at [PROVIDER_NAME_HERE]Tools.DefaultBulkCopyType.
            </summary>
        </member>
        <member name="F:LinqToDB.Data.BulkCopyType.RowByRow">
            <summary>
            Data will be inserted into table as a sequence of selects, row by row.
            </summary>
        </member>
        <member name="F:LinqToDB.Data.BulkCopyType.MultipleRows">
            <summary>
            Data will be inserted into table as a batch insert using INSERT FROM SELECT or similar code.
            If method not supported, it will be downgraded to <see cref="F:LinqToDB.Data.BulkCopyType.RowByRow"/> method.
            </summary>
        </member>
        <member name="F:LinqToDB.Data.BulkCopyType.ProviderSpecific">
            <summary>
            Data will be inserted using native bulk copy functionality if supported.
            If method not supported, it will be downgraded to <see cref="F:LinqToDB.Data.BulkCopyType.RowByRow"/> method.
            </summary>
        </member>
        <member name="T:LinqToDB.Data.CommandInfo">
            <summary>
            Provides database connection command abstraction.
            </summary>
        </member>
        <member name="F:LinqToDB.Data.CommandInfo.DataConnection">
            <summary>
            Instance of database connection, associated with command.
            </summary>
        </member>
        <member name="F:LinqToDB.Data.CommandInfo.CommandText">
            <summary>
            Command text.
            </summary>
        </member>
        <member name="F:LinqToDB.Data.CommandInfo.Parameters">
            <summary>
            Command parameters.
            </summary>
        </member>
        <member name="F:LinqToDB.Data.CommandInfo.CommandType">
            <summary>
            Type of command. See <see cref="T:System.Data.CommandType"/> for all supported types.
            Default value: <see cref="F:System.Data.CommandType.Text"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.Data.CommandInfo.CommandBehavior">
            <summary>
            Command behavior flags. See <see cref="T:System.Data.CommandBehavior"/> for more details.
            Default value: <see cref="F:System.Data.CommandBehavior.Default"/>.
            </summary>
        </member>
        <member name="M:LinqToDB.Data.CommandInfo.#ctor(LinqToDB.Data.DataConnection,System.String)">
            <summary>
            Creates database command instance using provided database connection and command text.
            </summary>
            <param name="dataConnection">Database connection instance.</param>
            <param name="commandText">Command text.</param>
        </member>
        <member name="M:LinqToDB.Data.CommandInfo.#ctor(LinqToDB.Data.DataConnection,System.String,LinqToDB.Data.DataParameter[])">
            <summary>
            Creates database command instance using provided database connection, command text and parameters.
            </summary>
            <param name="dataConnection">Database connection instance.</param>
            <param name="commandText">Command text.</param>
            <param name="parameters">List of command parameters.</param>
        </member>
        <member name="M:LinqToDB.Data.CommandInfo.#ctor(LinqToDB.Data.DataConnection,System.String,LinqToDB.Data.DataParameter)">
            <summary>
            Creates database command instance using provided database connection, command text and single parameter.
            </summary>
            <param name="dataConnection">Database connection instance.</param>
            <param name="commandText">Command text.</param>
            <param name="parameter">Command parameter.</param>
        </member>
        <member name="M:LinqToDB.Data.CommandInfo.#ctor(LinqToDB.Data.DataConnection,System.String,System.Object)">
            <summary>
            Creates database command instance using provided database connection, command text and parameters.
            </summary>
            <param name="dataConnection">Database connection instance.</param>
            <param name="commandText">Command text.</param>
            <param name="parameters">Command parameters. Supported values:
            <para> - <c>null</c> for command without parameters;</para>
            <para> - single <see cref="T:LinqToDB.Data.DataParameter"/> instance;</para>
            <para> - array of <see cref="T:LinqToDB.Data.DataParameter"/> parameters;</para>
            <para> - mapping class entity.</para>
            <para>Last case will convert all mapped columns to <see cref="T:LinqToDB.Data.DataParameter"/> instances using following logic:</para>
            <para> - if column is of <see cref="T:LinqToDB.Data.DataParameter"/> type, column value will be used. If parameter name (<see cref="P:LinqToDB.Data.DataParameter.Name"/>) is not set, column name will be used;</para>
            <para> - if converter from column type to <see cref="T:LinqToDB.Data.DataParameter"/> is defined in mapping schema, it will be used to create parameter with colum name passed to converter;</para>
            <para> - otherwise column value will be converted to <see cref="T:LinqToDB.Data.DataParameter"/> using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema.</para>
            </param>
        </member>
        <member name="M:LinqToDB.Data.CommandInfo.QueryProc``1(System.Func{System.Data.Common.DbDataReader,``0})">
            <summary>
            Executes command using <see cref="F:System.Data.CommandType.StoredProcedure"/> command type and returns results as collection of values, mapped using provided mapping function.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="objectReader">Record mapping function from data reader.</param>
            <returns>Returns collection of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.CommandInfo.QueryProcAsync``1(System.Func{System.Data.Common.DbDataReader,``0},System.Threading.CancellationToken)">
            <summary>
            Executes command asynchronously using <see cref="F:System.Data.CommandType.StoredProcedure"/> command type and returns results as collection of values, mapped using provided mapping function.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="objectReader">Record mapping function from data reader.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Returns collection of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.CommandInfo.Query``1(System.Func{System.Data.Common.DbDataReader,``0})">
            <summary>
            Executes command and returns results as collection of values, mapped using provided mapping function.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="objectReader">Record mapping function from data reader.</param>
            <returns>Returns collection of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.CommandInfo.QueryAsync``1(System.Func{System.Data.Common.DbDataReader,``0},System.Threading.CancellationToken)">
            <summary>
            Executes command asynchronously and returns results as collection of values, mapped using provided mapping function.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="objectReader">Record mapping function from data reader.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Returns collection of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.CommandInfo.QueryToListAsync``1(System.Func{System.Data.Common.DbDataReader,``0},System.Threading.CancellationToken)">
            <summary>
            Executes command asynchronously and returns list of values, mapped using provided mapping function.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="objectReader">Record mapping function from data reader.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Returns task with list of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.CommandInfo.QueryToArrayAsync``1(System.Func{System.Data.Common.DbDataReader,``0},System.Threading.CancellationToken)">
            <summary>
            Executes command asynchronously and returns array of values, mapped using provided mapping function.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="objectReader">Record mapping function from data reader.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Returns task with array of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.CommandInfo.QueryForEachAsync``1(System.Func{System.Data.Common.DbDataReader,``0},System.Action{``0},System.Threading.CancellationToken)">
            <summary>
            Executes command asynchronously and apply provided action to each record, mapped using provided mapping function.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="objectReader">Record mapping function from data reader.</param>
            <param name="action">Action, applied to each result record.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Returns task.</returns>
        </member>
        <member name="M:LinqToDB.Data.CommandInfo.QueryProc``1">
            <summary>
            Executes command using <see cref="F:System.Data.CommandType.StoredProcedure"/> command type and returns results as collection of values of specified type.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <returns>Returns collection of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.CommandInfo.QueryProcAsync``1(System.Threading.CancellationToken)">
            <summary>
            Executes command asynchronously using <see cref="F:System.Data.CommandType.StoredProcedure"/> command type and returns results as collection of values of specified type.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Returns collection of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.CommandInfo.Query``1">
            <summary>
            Executes command and returns results as collection of values of specified type.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <returns>Returns collection of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.CommandInfo.QueryAsync``1(System.Threading.CancellationToken)">
            <summary>
            Executes command asynchronously and returns results as collection of values of specified type.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Returns collection of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.CommandInfo.QueryToListAsync``1(System.Threading.CancellationToken)">
            <summary>
            Executes command asynchronously and returns list of values.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Returns task with list of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.CommandInfo.QueryToArrayAsync``1(System.Threading.CancellationToken)">
            <summary>
            Executes command asynchronously and returns array of values.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Returns task with array of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.CommandInfo.QueryForEachAsync``1(System.Action{``0},System.Threading.CancellationToken)">
            <summary>
            Executes command asynchronously and apply provided action to each record.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="action">Action, applied to each result record.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Returns task.</returns>
        </member>
        <member name="M:LinqToDB.Data.CommandInfo.Query``1(``0)">
            <summary>
            Executes command and returns results as collection of values of specified type.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="template">This value used only for <typeparamref name="T"/> parameter type inference, which makes this method usable with anonymous types.</param>
            <returns>Returns collection of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.CommandInfo.QueryProc``1(``0)">
            <summary>
            Executes command using <see cref="F:System.Data.CommandType.StoredProcedure"/> command type and returns results as collection of values of specified type.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="template">This value used only for <typeparamref name="T"/> parameter type inference, which makes this method usable with anonymous types.</param>
            <returns>Returns collection of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.CommandInfo.QueryProcAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Executes command asynchronously using <see cref="F:System.Data.CommandType.StoredProcedure"/> command type and returns results as collection of values of specified type.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="template">This value used only for <typeparamref name="T"/> parameter type inference, which makes this method usable with anonymous types.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Returns collection of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.CommandInfo.QueryProcMultiple``1">
            <summary>
            Executes command using <see cref="F:System.Data.CommandType.StoredProcedure"/> command type and returns a result containing multiple result sets.
            Saves result values for output and reference parameters to corresponding <see cref="T:LinqToDB.Data.DataParameter"/> object.
            </summary>
            <typeparam name="T">Result set type.</typeparam>
            <returns>Returns result.</returns>
        </member>
        <member name="M:LinqToDB.Data.CommandInfo.QueryProcMultipleAsync``1(System.Threading.CancellationToken)">
            <summary>
            Executes command asynchronously using <see cref="F:System.Data.CommandType.StoredProcedure"/> command type and returns a result containing multiple result sets.
            </summary>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <typeparam name="T">Result set type.</typeparam>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains object with multiply result sets.
            </returns>
        </member>
        <member name="M:LinqToDB.Data.CommandInfo.QueryMultiple``1">
            <summary>
            Executes command and returns a result containing multiple result sets.
            </summary>
            <typeparam name="T">Result set type.</typeparam>
            <returns>Returns result.</returns>
        </member>
        <member name="M:LinqToDB.Data.CommandInfo.QueryMultipleAsync``1(System.Threading.CancellationToken)">
            <summary>
            Executes command asynchronously and returns a result containing multiple result sets.
            Saves result values for output and reference parameters to corresponding <see cref="T:LinqToDB.Data.DataParameter"/> object.
            </summary>
            <typeparam name="T">Result set type.</typeparam>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains object with multiply result sets.
            </returns>
        </member>
        <member name="M:LinqToDB.Data.CommandInfo.ExecuteProc">
            <summary>
            Executes command using <see cref="F:System.Data.CommandType.StoredProcedure"/> command type and returns number of affected records.
            Saves result values for output and reference parameters to corresponding <see cref="T:LinqToDB.Data.DataParameter"/> object.
            </summary>
            <returns>Number of records, affected by command execution.</returns>
        </member>
        <member name="M:LinqToDB.Data.CommandInfo.Execute">
            <summary>
            Executes command and returns number of affected records.
            </summary>
            <returns>Number of records, affected by command execution.</returns>
        </member>
        <member name="M:LinqToDB.Data.CommandInfo.ExecuteCustom(System.Func{System.Data.Common.DbCommand,System.Int32})">
            <summary>
            Executes command using custom execute method and returns number of affected records.
            </summary>
            <param name="customExecute">Custom execute method.</param>
            <returns>Number of records, affected by command execution.</returns>
        </member>
        <member name="M:LinqToDB.Data.CommandInfo.ExecuteProcAsync(System.Threading.CancellationToken)">
            <summary>
            Executes command using <see cref="F:System.Data.CommandType.StoredProcedure"/> command type asynchronously and returns number of affected records.
            Saves result values for output and reference parameters to corresponding <see cref="T:LinqToDB.Data.DataParameter"/> object.
            </summary>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Task with number of records, affected by command execution.</returns>
        </member>
        <member name="M:LinqToDB.Data.CommandInfo.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            Executes command asynchronously and returns number of affected records.
            </summary>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Task with number of records, affected by command execution.</returns>
        </member>
        <member name="M:LinqToDB.Data.CommandInfo.ExecuteProc``1">
            <summary>
            Executes command using <see cref="F:System.Data.CommandType.StoredProcedure"/> command type and returns single value.
            </summary>
            <typeparam name="T">Resulting value type.</typeparam>
            <returns>Resulting value.</returns>
        </member>
        <member name="M:LinqToDB.Data.CommandInfo.Execute``1">
            <summary>
            Executes command and returns single value.
            Saves result values for output and reference parameters to corresponding <see cref="T:LinqToDB.Data.DataParameter"/> object.
            </summary>
            <typeparam name="T">Resulting value type.</typeparam>
            <returns>Resulting value.</returns>
        </member>
        <member name="M:LinqToDB.Data.CommandInfo.ExecuteProcAsync``1(System.Threading.CancellationToken)">
            <summary>
            Executes command using <see cref="F:System.Data.CommandType.StoredProcedure"/> command type asynchronously and returns single value.
            Saves result values for output and reference parameters to corresponding <see cref="T:LinqToDB.Data.DataParameter"/> object.
            </summary>
            <typeparam name="T">Resulting value type.</typeparam>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Task with resulting value.</returns>
        </member>
        <member name="M:LinqToDB.Data.CommandInfo.ExecuteAsync``1(System.Threading.CancellationToken)">
            <summary>
            Executes command asynchronously and returns single value.
            </summary>
            <typeparam name="T">Resulting value type.</typeparam>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Task with resulting value.</returns>
        </member>
        <member name="M:LinqToDB.Data.CommandInfo.ExecuteReaderProc">
            <summary>
            Executes command using <see cref="F:System.Data.CommandType.StoredProcedure"/> command type and returns data reader instance.
            </summary>
            <returns>Data reader object.</returns>
        </member>
        <member name="M:LinqToDB.Data.CommandInfo.ExecuteReaderProcAsync(System.Threading.CancellationToken)">
            <summary>
            Executes command asynchronously using <see cref="F:System.Data.CommandType.StoredProcedure"/> command type and returns data reader instance.
            </summary>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Data reader object.</returns>
        </member>
        <member name="M:LinqToDB.Data.CommandInfo.ExecuteReader">
            <summary>
            Executes command and returns data reader instance.
            </summary>
            <returns>Data reader object.</returns>
        </member>
        <member name="M:LinqToDB.Data.CommandInfo.ExecuteReaderAsync(System.Threading.CancellationToken)">
            <summary>
            Executes command asynchronously and returns data reader instance.
            </summary>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Task with data reader object.</returns>
        </member>
        <member name="M:LinqToDB.Data.CommandInfo.ClearObjectReaderCache">
            <summary>
            Clears global cache of object mapping functions from query results and mapping functions from value to <see cref="T:LinqToDB.Data.DataParameter"/>.
            </summary>
        </member>
        <member name="T:LinqToDB.Data.DataConnection">
            <summary>
            Implements persistent database connection abstraction over different database engines.
            Could be initialized using connection string name or connection string,
            or attached to existing connection or transaction.
            </summary>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.BeginTransactionAsync(System.Threading.CancellationToken)">
            <summary>
            Starts new transaction asynchronously for current connection with default isolation level. If connection already has transaction, it will be rolled back.
            </summary>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Database transaction object.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.BeginTransactionAsync(System.Data.IsolationLevel,System.Threading.CancellationToken)">
            <summary>
            Starts new transaction asynchronously for current connection with specified isolation level. If connection already have transaction, it will be rolled back.
            </summary>
            <param name="isolationLevel">Transaction isolation level.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Database transaction object.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.EnsureConnectionAsync(System.Threading.CancellationToken)">
            <summary>
            Ensure that database connection opened. If opened connection missing, it will be opened asynchronously.
            </summary>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Async operation task.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.CommitTransactionAsync(System.Threading.CancellationToken)">
            <summary>
            Commits started (if any) transaction, associated with connection.
            If underlying provider doesn't support asynchronous commit, it will be performed synchronously.
            </summary>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Asynchronous operation completion task.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.RollbackTransactionAsync(System.Threading.CancellationToken)">
            <summary>
            Rollbacks started (if any) transaction, associated with connection.
            If underlying provider doesn't support asynchonous commit, it will be performed synchonously.
            </summary>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Asynchronous operation completion task.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.CloseAsync">
            <summary>
            Closes and dispose associated underlying database transaction/connection asynchronously.
            </summary>
            <returns>Asynchronous operation completion task.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.DisposeAsync">
            <summary>
            Disposes connection asynchronously.
            </summary>
            <returns>Asynchronous operation completion task.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.#ctor">
            <summary>
            Creates database connection object that uses default connection configuration from <see cref="P:LinqToDB.Data.DataConnection.DefaultConfiguration"/> property.
            </summary>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.#ctor(LinqToDB.Mapping.MappingSchema)">
            <summary>
            Creates database connection object that uses default connection configuration from <see cref="P:LinqToDB.Data.DataConnection.DefaultConfiguration"/> property and provided mapping schema.
            </summary>
            <param name="mappingSchema">Mapping schema to use with this connection.</param>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.#ctor(System.String,LinqToDB.Mapping.MappingSchema)">
            <summary>
            Creates database connection object that uses provided connection configuration and mapping schema.
            </summary>
            <param name="configurationString">Name of database connection configuration to use with this connection.
            In case of null, configuration from <see cref="P:LinqToDB.Data.DataConnection.DefaultConfiguration"/> property will be used.</param>
            <param name="mappingSchema">Mapping schema to use with this connection.</param>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.#ctor(System.String)">
            <summary>
            Creates database connection object that uses provided connection configuration.
            </summary>
            <param name="configurationString">Name of database connection configuration to use with this connection.
            In case of <c>null</c>, configuration from <see cref="P:LinqToDB.Data.DataConnection.DefaultConfiguration"/> property will be used.</param>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.#ctor(System.String,System.String,LinqToDB.Mapping.MappingSchema)">
            <summary>
            Creates database connection object that uses specified database provider, connection string and mapping schema.
            </summary>
            <param name="providerName">Name of database provider to use with this connection. <see cref="T:LinqToDB.ProviderName"/> class for list of providers.</param>
            <param name="connectionString">Database connection string to use for connection with database.</param>
            <param name="mappingSchema">Mapping schema to use with this connection.</param>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.#ctor(System.String,System.String)">
            <summary>
            Creates database connection object that uses specified database provider and connection string.
            </summary>
            <param name="providerName">Name of database provider to use with this connection. <see cref="T:LinqToDB.ProviderName"/> class for list of providers.</param>
            <param name="connectionString">Database connection string to use for connection with database.</param>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.#ctor(LinqToDB.DataProvider.IDataProvider,System.String,LinqToDB.Mapping.MappingSchema)">
            <summary>
            Creates database connection object that uses specified database provider, connection string and mapping schema.
            </summary>
            <param name="dataProvider">Database provider implementation to use with this connection.</param>
            <param name="connectionString">Database connection string to use for connection with database.</param>
            <param name="mappingSchema">Mapping schema to use with this connection.</param>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.#ctor(LinqToDB.DataProvider.IDataProvider,System.String)">
            <summary>
            Creates database connection object that uses specified database provider and connection string.
            </summary>
            <param name="dataProvider">Database provider implementation to use with this connection.</param>
            <param name="connectionString">Database connection string to use for connection with database.</param>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.#ctor(LinqToDB.DataProvider.IDataProvider,System.Func{System.Data.Common.DbConnection},LinqToDB.Mapping.MappingSchema)">
            <summary>
            Creates database connection object that uses specified database provider, connection factory and mapping schema.
            </summary>
            <param name="dataProvider">Database provider implementation to use with this connection.</param>
            <param name="connectionFactory">Database connection factory method.</param>
            <param name="mappingSchema">Mapping schema to use with this connection.</param>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.#ctor(LinqToDB.DataProvider.IDataProvider,System.Func{System.Data.Common.DbConnection})">
            <summary>
            Creates database connection object that uses specified database provider and connection factory.
            </summary>
            <param name="dataProvider">Database provider implementation to use with this connection.</param>
            <param name="connectionFactory">Database connection factory method.</param>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.#ctor(LinqToDB.DataProvider.IDataProvider,System.Data.Common.DbConnection,LinqToDB.Mapping.MappingSchema)">
            <summary>
            Creates database connection object that uses specified database provider, connection and mapping schema.
            </summary>
            <param name="dataProvider">Database provider implementation to use with this connection.</param>
            <param name="connection">Existing database connection to use.</param>
            <param name="mappingSchema">Mapping schema to use with this connection.</param>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.#ctor(LinqToDB.DataProvider.IDataProvider,System.Data.Common.DbConnection)">
            <summary>
            Creates database connection object that uses specified database provider and connection.
            </summary>
            <param name="dataProvider">Database provider implementation to use with this connection.</param>
            <param name="connection">Existing database connection to use.</param>
            <remarks>
            <paramref name="connection"/> would not be disposed.
            </remarks>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.#ctor(LinqToDB.DataProvider.IDataProvider,System.Data.Common.DbConnection,System.Boolean)">
            <summary>
            Creates database connection object that uses specified database provider and connection.
            </summary>
            <param name="dataProvider">Database provider implementation to use with this connection.</param>
            <param name="connection">Existing database connection to use.</param>
            <param name="disposeConnection">If true <paramref name="connection"/> would be disposed on DataConnection disposing.</param>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.#ctor(LinqToDB.DataProvider.IDataProvider,System.Data.Common.DbTransaction,LinqToDB.Mapping.MappingSchema)">
            <summary>
            Creates database connection object that uses specified database provider, transaction and mapping schema.
            </summary>
            <param name="dataProvider">Database provider implementation to use with this connection.</param>
            <param name="transaction">Existing database transaction to use.</param>
            <param name="mappingSchema">Mapping schema to use with this connection.</param>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.#ctor(LinqToDB.DataProvider.IDataProvider,System.Data.Common.DbTransaction)">
            <summary>
            Creates database connection object that uses specified database provider and transaction.
            </summary>
            <param name="dataProvider">Database provider implementation to use with this connection.</param>
            <param name="transaction">Existing database transaction to use.</param>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.#ctor(LinqToDB.Configuration.LinqToDBConnectionOptions)">
            <summary>
            Creates database connection object that uses a <see cref="T:LinqToDB.Configuration.LinqToDBConnectionOptions"/> to configure the connection.
            </summary>
            <param name="options">Options, setup ahead of time.</param>
        </member>
        <member name="P:LinqToDB.Data.DataConnection.ConfigurationString">
            <summary>
            Database configuration name (connection string name).
            </summary>
        </member>
        <member name="P:LinqToDB.Data.DataConnection.DataProvider">
            <summary>
            Database provider implementation for specific database engine.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.DataConnection.ConnectionString">
            <summary>
            Database connection string.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.DataConnection.RetryPolicy">
            <summary>
            Retry policy for current connection.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.DataConnection.ID">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.DataConnection.IsMarsEnabled">
            <summary>
            Gets or sets status of Multiple Active Result Sets (MARS) feature. This feature available only for
            SQL Azure and SQL Server 2005+.
            </summary>
        </member>
        <member name="F:LinqToDB.Data.DataConnection._defaultConfiguration">
            <summary>
            Gets or sets default connection configuration name. Used by <see cref="T:LinqToDB.Data.DataConnection"/> by default and could be set automatically from:
            <para> - <see cref="P:LinqToDB.Configuration.ILinqToDBSettings.DefaultConfiguration"/>;</para>
            <para> - first non-global connection string name from <see cref="P:LinqToDB.Configuration.ILinqToDBSettings.ConnectionStrings"/>;</para>
            <para> - first non-global connection string name passed to <see cref="M:LinqToDB.Data.DataConnection.SetConnectionStrings(System.Collections.Generic.IEnumerable{LinqToDB.Configuration.IConnectionStringSettings})"/> method.</para>
            </summary>
            <seealso cref="P:LinqToDB.Data.DataConnection.DefaultConfiguration"/>
        </member>
        <member name="F:LinqToDB.Data.DataConnection._defaultDataProvider">
            <summary>
            Gets or sets name of default data provider, used by new connection if user didn't specified provider explicitly in constructor or in connection options.
            Initialized with value from <see cref="P:LinqToDB.Data.DataConnection.DefaultSettings"/>.<see cref="P:LinqToDB.Configuration.ILinqToDBSettings.DefaultDataProvider"/>.
            </summary>
            <seealso cref="P:LinqToDB.Data.DataConnection.DefaultConfiguration"/>
        </member>
        <member name="P:LinqToDB.Data.DataConnection.OnTrace">
            <summary>
            Sets trace handler, used for all new connections unless overriden in <see cref="T:LinqToDB.Configuration.LinqToDBConnectionOptions"/>
            defaults to calling <see cref="M:LinqToDB.Data.DataConnection.OnTraceInternal(LinqToDB.Data.TraceInfo)"/>.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.DataConnection.OnTraceConnection">
            <summary>
            Gets or sets trace handler, used for current connection instance.
            Configured on the connection builder using <see cref="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder.WithTracing(System.Action{LinqToDB.Data.TraceInfo})"/>.
            defaults to <see cref="P:LinqToDB.Data.DataConnection.OnTrace"/>.
            </summary>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.OnTraceInternal(LinqToDB.Data.TraceInfo)">
            <summary>
            Writes the trace out using <see cref="P:LinqToDB.Data.DataConnection.WriteTraceLineConnection"/>.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.DataConnection.TraceSwitch">
            <summary>
            Gets or sets global data connection trace options. Used for all new connections
            unless <see cref="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder.WithTraceLevel(System.Diagnostics.TraceLevel)"/> is called on builder.
            defaults to off unless library was built in debug mode.
            <remarks>Should only be used when <see cref="P:LinqToDB.Data.DataConnection.TraceSwitchConnection"/> can not be used!</remarks>
            </summary>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.TurnTraceSwitchOn(System.Diagnostics.TraceLevel)">
            <summary>
            Sets tracing level for data connections.
            </summary>
            <param name="traceLevel">Connection tracing level.</param>
            <remarks>Use <see cref="P:LinqToDB.Data.DataConnection.TraceSwitchConnection"/> when possible, configured via <see cref="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder.WithTraceLevel(System.Diagnostics.TraceLevel)"/>.</remarks>
        </member>
        <member name="P:LinqToDB.Data.DataConnection.TraceSwitchConnection">
            <summary>
            gets or sets the trace switch,
            this is used by some methods to determine if <see cref="P:LinqToDB.Data.DataConnection.OnTraceConnection"/> should be called.
            defaults to <see cref="P:LinqToDB.Data.DataConnection.TraceSwitch"/>
            used for current connection instance.
            </summary>
        </member>
        <member name="F:LinqToDB.Data.DataConnection.WriteTraceLine">
            <summary>
            Trace function. By Default use <see cref="T:System.Diagnostics.Debug"/> class for logging, but could be replaced to log e.g. to your log file.
            will be ignored if <see cref="M:LinqToDB.Configuration.LinqToDBConnectionOptionsBuilder.WriteTraceWith(System.Action{System.String,System.String,System.Diagnostics.TraceLevel})"/> is called on builder
            <para>First parameter contains trace message.</para>
            <para>Second parameter contains trace message category (<see cref="P:System.Diagnostics.Switch.DisplayName"/>).</para>
            <para>Third parameter contains trace level for message (<see cref="T:System.Diagnostics.TraceLevel"/>).</para>
            <seealso cref="P:LinqToDB.Data.DataConnection.TraceSwitch"/>
            <remarks>Should only not use to write trace lines, only use <see cref="P:LinqToDB.Data.DataConnection.WriteTraceLineConnection"/>.</remarks>
            </summary>
        </member>
        <member name="P:LinqToDB.Data.DataConnection.WriteTraceLineConnection">
            <summary>
            Gets the delegate to write logging messages for this connection.
            Defaults to <see cref="F:LinqToDB.Data.DataConnection.WriteTraceLine"/>.
            Used for the current instance.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.DataConnection.DefaultSettings">
            <summary>
            Gets or sets default connection settings. By default contains settings from linq2db configuration section from configuration file (not supported by .Net Core).
            <seealso cref="T:LinqToDB.Configuration.ILinqToDBSettings"/>
            </summary>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.AddProviderDetector(System.Func{LinqToDB.Configuration.IConnectionStringSettings,System.String,LinqToDB.DataProvider.IDataProvider})">
            <summary>
            Registers database provider factory method.
            Factory accepts connection string settings and connection string. Could return <c>null</c>, if cannot create provider
            instance using provided options.
            </summary>
            <param name="providerDetector">Factory method delegate.</param>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.InsertProviderDetector(System.Func{LinqToDB.Configuration.IConnectionStringSettings,System.String,LinqToDB.DataProvider.IDataProvider})">
            <summary>
            Registers database provider factory method.
            Factory accepts connection string settings and connection string. Could return <c>null</c>, if cannot create provider
            instance using provided options.
            </summary>
            <param name="providerDetector">Factory method delegate.</param>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.AddDataProvider(System.String,LinqToDB.DataProvider.IDataProvider)">
            <summary>
            Registers database provider implementation by provided unique name.
            </summary>
            <param name="providerName">Provider name, to which provider implementation will be mapped.</param>
            <param name="dataProvider">Database provider implementation.</param>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.AddDataProvider(LinqToDB.DataProvider.IDataProvider)">
            <summary>
            Registers database provider implementation using <see cref="P:LinqToDB.DataProvider.IDataProvider.Name"/> name.
            </summary>
            <param name="dataProvider">Database provider implementation.</param>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.GetDataProvider(System.String)">
            <summary>
            Returns database provider implementation, associated with provided connection configuration name.
            </summary>
            <param name="configurationString">Connection configuration name.</param>
            <returns>Database provider.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.GetDataProvider(System.String,System.String,System.String)">
            <summary>
            Returns database provider associated with provider name, configuration and connection string.
            </summary>
            <param name="providerName">Provider name.</param>
            <param name="configurationString">Connection configuration name.</param>
            <param name="connectionString">Connection string.</param>
            <returns>Database provider.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.GetDataProvider(System.String,System.String)">
            <summary>
            Returns database provider associated with provider name and connection string.
            </summary>
            <param name="providerName">Provider name.</param>
            <param name="connectionString">Connection string.</param>
            <returns>Database provider.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.GetRegisteredProviders">
            <summary>
            Returns registered database providers.
            </summary>
            <returns>
            Returns registered providers collection.
            </returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.SetConnectionStrings(System.Collections.Generic.IEnumerable{LinqToDB.Configuration.IConnectionStringSettings})">
            <summary>
            Register connection strings for use by data connection class.
            </summary>
            <param name="connectionStrings">Collection of connection string configurations.</param>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.AddConfiguration(System.String,System.String,LinqToDB.DataProvider.IDataProvider)">
            <summary>
            Register connection configuration with specified connection string and database provider implementation.
            </summary>
            <param name="configuration">Connection configuration name.</param>
            <param name="connectionString">Connection string.</param>
            <param name="dataProvider">Database provider. If not specified, will use provider, registered using <paramref name="configuration"/> value.</param>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.SetConnectionString(System.String,System.String)">
            <summary>
            Sets connection string for specified connection name.
            </summary>
            <param name="configuration">Connection name.</param>
            <param name="connectionString">Connection string.</param>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.GetConnectionString(System.String)">
            <summary>
            Returns connection string for specified connection name.
            </summary>
            <param name="configurationString">Connection name.</param>
            <returns>Connection string.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.TryGetConnectionString(System.String)">
            <summary>
            Returns connection string for specified configuration name or NULL.
            </summary>
            <param name="configurationString">Configuration.</param>
            <returns>Connection string or NULL.</returns>
        </member>
        <member name="P:LinqToDB.Data.DataConnection.Connection">
            <summary>
            Gets underlying database connection, used by current connection object.
            </summary>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.Close">
            <summary>
            Closes and dispose associated underlying database transaction/connection.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.DataConnection.CurrentCommand">
            <summary>
            Gets current command instance if it exists or <c>null</c> otherwise.
            </summary>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.GetOrCreateCommand">
            <summary>
            Creates if needed and returns current command instance.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.DataConnection.LastQuery">
            <summary>
            Contains text of last command, sent to database using current connection.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.DataConnection.CommandTimeout">
            <summary>
            Gets or sets command execution timeout in seconds.
            Negative timeout value means that default timeout will be used.
            0 timeout value corresponds to infinite timeout.
            By default timeout is not set and default value for current provider used.
            </summary>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.CreateCommand">
            <summary>
            This is internal API and is not intended for use by Linq To DB applications.
            </summary>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.DisposeCommand">
            <summary>
            This is internal API and is not intended for use by Linq To DB applications.
            </summary>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.ClearObjectReaderCache">
            <summary>
            Removes cached data mappers.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.DataConnection.Transaction">
            <summary>
            Gets current transaction, associated with connection.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.DataConnection.TransactionAsync">
            <summary>
            Async transaction wrapper over <see cref="P:LinqToDB.Data.DataConnection.Transaction"/>.
            </summary>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.BeginTransaction">
            <summary>
            Starts new transaction for current connection with default isolation level. If connection already has transaction, it will be rolled back.
            </summary>
            <returns>Database transaction object.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Starts new transaction for current connection with specified isolation level. If connection already have transaction, it will be rolled back.
            </summary>
            <param name="isolationLevel">Transaction isolation level.</param>
            <returns>Database transaction object.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.CommitTransaction">
            <summary>
            Commits transaction (if any), associated with connection.
            </summary>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.RollbackTransaction">
            <summary>
            Rollbacks transaction (if any), associated with connection.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.DataConnection.MappingSchema">
            <summary>
            Gets mapping schema, used for current connection.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.DataConnection.InlineParameters">
            <summary>
            Gets or sets option to force inline parameter values as literals into command text. If parameter inlining not supported
            for specific value type, it will be used as parameter.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.DataConnection.QueryHints">
            <summary>
            Gets list of query hints (writable collection), that will be used for all queries, executed through current connection.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.DataConnection.NextQueryHints">
            <summary>
            Gets list of query hints (writable collection), that will be used only for next query, executed through current connection.
            </summary>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.AddMappingSchema(LinqToDB.Mapping.MappingSchema)">
            <summary>
            Adds additional mapping schema to current connection.
            </summary>
            <remarks><see cref="T:LinqToDB.Data.DataConnection"/> will share <see cref="T:LinqToDB.Mapping.MappingSchema"/> instances that were created by combining same mapping schemas.</remarks>
            <param name="mappingSchema">Mapping schema.</param>
            <returns>Current connection object.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.Clone">
            <summary>
            Clones current connection.
            </summary>
            <returns>Cloned connection.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.Dispose">
            <summary>
            Disposes connection.
            </summary>
        </member>
        <member name="M:LinqToDB.Data.DataConnection.AddInterceptor(LinqToDB.Interceptors.IInterceptor)">
            <inheritdoc cref="M:LinqToDB.IDataContext.AddInterceptor(LinqToDB.Interceptors.IInterceptor)"/>
        </member>
        <member name="T:LinqToDB.Data.DataConnectionExtensions">
            <summary>
            Contains extension methods for <see cref="T:LinqToDB.Data.DataConnection"/> class.
            </summary>
            <summary>
            Contains extension methods for <see cref="T:LinqToDB.Data.DataConnection"/> class.
            </summary>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.SetCommand(LinqToDB.Data.DataConnection,System.String)">
            <summary>
            Creates command wrapper for current connection with provided command text.
            </summary>
            <param name="dataConnection">Database connection.</param>
            <param name="commandText">Command text.</param>
            <returns>Database command wrapper.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.SetCommand(LinqToDB.Data.DataConnection,System.String,LinqToDB.Data.DataParameter[])">
            <summary>
            Creates command wrapper for current connection with provided command text and parameters.
            </summary>
            <param name="dataConnection">Database connection.</param>
            <param name="commandText">Command text.</param>
            <param name="parameters">Command parameters.</param>
            <returns>Database command wrapper.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.SetCommand(LinqToDB.Data.DataConnection,System.String,LinqToDB.Data.DataParameter)">
            <summary>
            Creates command wrapper for current connection with provided command text and single parameter.
            </summary>
            <param name="dataConnection">Database connection.</param>
            <param name="commandText">Command text.</param>
            <param name="parameter">Command parameter.</param>
            <returns>Database command wrapper.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.SetCommand(LinqToDB.Data.DataConnection,System.String,System.Object)">
            <summary>
            Creates command wrapper for current connection with provided command text and parameters.
            </summary>
            <param name="dataConnection">Database connection.</param>
            <param name="commandText">Command text.</param>
            <param name="parameters">Command parameters. Supported values:
            <para> - <c>null</c> for command without parameters;</para>
            <para> - single <see cref="T:LinqToDB.Data.DataParameter"/> instance;</para>
            <para> - array of <see cref="T:LinqToDB.Data.DataParameter"/> parameters;</para>
            <para> - mapping class entity.</para>
            <para>Last case will convert all mapped columns to <see cref="T:LinqToDB.Data.DataParameter"/> instances using following logic:</para>
            <para> - if column is of <see cref="T:LinqToDB.Data.DataParameter"/> type, column value will be used. If parameter name (<see cref="P:LinqToDB.Data.DataParameter.Name"/>) is not set, column name will be used;</para>
            <para> - if converter from column type to <see cref="T:LinqToDB.Data.DataParameter"/> is defined in mapping schema, it will be used to create parameter with colum name passed to converter;</para>
            <para> - otherwise column value will be converted to <see cref="T:LinqToDB.Data.DataParameter"/> using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema.</para>
            </param>
            <returns>Database command wrapper.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.Query``1(LinqToDB.Data.DataConnection,System.Func{System.Data.Common.DbDataReader,``0},System.String)">
            <summary>
            Executes command and returns results as collection of values, mapped using provided mapping function.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="objectReader">Record mapping function from data reader.</param>
            <param name="sql">Command text.</param>
            <returns>Returns collection of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryProc``1(LinqToDB.Data.DataConnection,System.Func{System.Data.Common.DbDataReader,``0},System.String,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes command using <see cref="F:System.Data.CommandType.StoredProcedure"/> command type and returns results as collection of values, mapped using provided mapping function.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="objectReader">Record mapping function from data reader.</param>
            <param name="sql">Command text. This is caller's responsibility to properly escape procedure name.</param>
            <param name="parameters">Command parameters.</param>
            <returns>Returns collection of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryProcAsync``1(LinqToDB.Data.DataConnection,System.Func{System.Data.Common.DbDataReader,``0},System.String,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes command asynchronously using <see cref="F:System.Data.CommandType.StoredProcedure"/> command type and returns results as collection of values, mapped using provided mapping function.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="objectReader">Record mapping function from data reader.</param>
            <param name="sql">Command text. This is caller's responsibility to properly escape procedure name.</param>
            <param name="parameters">Command parameters.</param>
            <returns>Returns collection of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryProcAsync``1(LinqToDB.Data.DataConnection,System.Func{System.Data.Common.DbDataReader,``0},System.String,System.Threading.CancellationToken,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes command asynchronously using <see cref="F:System.Data.CommandType.StoredProcedure"/> command type and returns results as collection of values, mapped using provided mapping function.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="objectReader">Record mapping function from data reader.</param>
            <param name="sql">Command text. This is caller's responsibility to properly escape procedure name.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <param name="parameters">Command parameters.</param>
            <returns>Returns collection of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryProc``1(LinqToDB.Data.DataConnection,System.Func{System.Data.Common.DbDataReader,``0},System.String,System.Object)">
            <summary>
            Executes command using <see cref="F:System.Data.CommandType.StoredProcedure"/> command type and returns results as collection of values, mapped using provided mapping function.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="objectReader">Record mapping function from data reader.</param>
            <param name="sql">Command text. This is caller's responsibility to properly escape procedure name.</param>
            <param name="parameters">Command parameters. Supported values:
            <para> - <c>null</c> for command without parameters;</para>
            <para> - single <see cref="T:LinqToDB.Data.DataParameter"/> instance;</para>
            <para> - array of <see cref="T:LinqToDB.Data.DataParameter"/> parameters;</para>
            <para> - mapping class entity.</para>
            <para>Last case will convert all mapped columns to <see cref="T:LinqToDB.Data.DataParameter"/> instances using following logic:</para>
            <para> - if column is of <see cref="T:LinqToDB.Data.DataParameter"/> type, column value will be used. If parameter name (<see cref="P:LinqToDB.Data.DataParameter.Name"/>) is not set, column name will be used;</para>
            <para> - if converter from column type to <see cref="T:LinqToDB.Data.DataParameter"/> is defined in mapping schema, it will be used to create parameter with colum name passed to converter;</para>
            <para> - otherwise column value will be converted to <see cref="T:LinqToDB.Data.DataParameter"/> using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema.</para>
            </param>
            <returns>Returns collection of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryProcAsync``1(LinqToDB.Data.DataConnection,System.Func{System.Data.Common.DbDataReader,``0},System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Executes command asynchronously using <see cref="F:System.Data.CommandType.StoredProcedure"/> command type and returns results as collection of values, mapped using provided mapping function.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="objectReader">Record mapping function from data reader.</param>
            <param name="sql">Command text. This is caller's responsibility to properly escape procedure name.</param>
            <param name="parameters">Command parameters. Supported values:
            <para> - <c>null</c> for command without parameters;</para>
            <para> - single <see cref="T:LinqToDB.Data.DataParameter"/> instance;</para>
            <para> - array of <see cref="T:LinqToDB.Data.DataParameter"/> parameters;</para>
            <para> - mapping class entity.</para>
            <para>Last case will convert all mapped columns to <see cref="T:LinqToDB.Data.DataParameter"/> instances using following logic:</para>
            <para> - if column is of <see cref="T:LinqToDB.Data.DataParameter"/> type, column value will be used. If parameter name (<see cref="P:LinqToDB.Data.DataParameter.Name"/>) is not set, column name will be used;</para>
            <para> - if converter from column type to <see cref="T:LinqToDB.Data.DataParameter"/> is defined in mapping schema, it will be used to create parameter with colum name passed to converter;</para>
            <para> - otherwise column value will be converted to <see cref="T:LinqToDB.Data.DataParameter"/> using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema.</para>
            </param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Returns collection of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.Query``1(LinqToDB.Data.DataConnection,System.Func{System.Data.Common.DbDataReader,``0},System.String,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes command and returns results as collection of values, mapped using provided mapping function.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="objectReader">Record mapping function from data reader.</param>
            <param name="sql">Command text.</param>
            <param name="parameters">Command parameters.</param>
            <returns>Returns collection of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.Query``1(LinqToDB.Data.DataConnection,System.Func{System.Data.Common.DbDataReader,``0},System.String,System.Object)">
            <summary>
            Executes command and returns results as collection of values, mapped using provided mapping function.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="objectReader">Record mapping function from data reader.</param>
            <param name="sql">Command text.</param>
            <param name="parameters">Command parameters. Supported values:
            <para> - <c>null</c> for command without parameters;</para>
            <para> - single <see cref="T:LinqToDB.Data.DataParameter"/> instance;</para>
            <para> - array of <see cref="T:LinqToDB.Data.DataParameter"/> parameters;</para>
            <para> - mapping class entity.</para>
            <para>Last case will convert all mapped columns to <see cref="T:LinqToDB.Data.DataParameter"/> instances using following logic:</para>
            <para> - if column is of <see cref="T:LinqToDB.Data.DataParameter"/> type, column value will be used. If parameter name (<see cref="P:LinqToDB.Data.DataParameter.Name"/>) is not set, column name will be used;</para>
            <para> - if converter from column type to <see cref="T:LinqToDB.Data.DataParameter"/> is defined in mapping schema, it will be used to create parameter with colum name passed to converter;</para>
            <para> - otherwise column value will be converted to <see cref="T:LinqToDB.Data.DataParameter"/> using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema.</para>
            </param>
            <returns>Returns collection of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryToListAsync``1(LinqToDB.Data.DataConnection,System.Func{System.Data.Common.DbDataReader,``0},System.String)">
            <summary>
            Executes command asynchronously and returns list of values, mapped using provided mapping function.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="objectReader">Record mapping function from data reader.</param>
            <param name="sql">Command text.</param>
            <returns>Returns task with list of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryToListAsync``1(LinqToDB.Data.DataConnection,System.Func{System.Data.Common.DbDataReader,``0},System.String,System.Threading.CancellationToken)">
            <summary>
            Executes command asynchronously and returns list of values, mapped using provided mapping function.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="objectReader">Record mapping function from data reader.</param>
            <param name="sql">Command text.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Returns task with list of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryToArrayAsync``1(LinqToDB.Data.DataConnection,System.Func{System.Data.Common.DbDataReader,``0},System.String)">
            <summary>
            Executes command asynchronously and returns array of values, mapped using provided mapping function.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="objectReader">Record mapping function from data reader.</param>
            <param name="sql">Command text.</param>
            <returns>Returns task with array of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryToArrayAsync``1(LinqToDB.Data.DataConnection,System.Func{System.Data.Common.DbDataReader,``0},System.String,System.Threading.CancellationToken)">
            <summary>
            Executes command asynchronously and returns array of values, mapped using provided mapping function.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="objectReader">Record mapping function from data reader.</param>
            <param name="sql">Command text.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Returns task with array of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryToListAsync``1(LinqToDB.Data.DataConnection,System.Func{System.Data.Common.DbDataReader,``0},System.String,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes command asynchronously and returns list of values, mapped using provided mapping function.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="objectReader">Record mapping function from data reader.</param>
            <param name="sql">Command text.</param>
            <param name="parameters">Command parameters.</param>
            <returns>Returns task with list of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryToListAsync``1(LinqToDB.Data.DataConnection,System.Func{System.Data.Common.DbDataReader,``0},System.String,System.Threading.CancellationToken,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes command asynchronously and returns list of values, mapped using provided mapping function.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="objectReader">Record mapping function from data reader.</param>
            <param name="sql">Command text.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <param name="parameters">Command parameters.</param>
            <returns>Returns task with list of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryToArrayAsync``1(LinqToDB.Data.DataConnection,System.Func{System.Data.Common.DbDataReader,``0},System.String,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes command asynchronously and returns array of values, mapped using provided mapping function.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="objectReader">Record mapping function from data reader.</param>
            <param name="sql">Command text.</param>
            <param name="parameters">Command parameters.</param>
            <returns>Returns task with array of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryToArrayAsync``1(LinqToDB.Data.DataConnection,System.Func{System.Data.Common.DbDataReader,``0},System.String,System.Threading.CancellationToken,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes command asynchronously and returns array of values, mapped using provided mapping function.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="objectReader">Record mapping function from data reader.</param>
            <param name="sql">Command text.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <param name="parameters">Command parameters.</param>
            <returns>Returns task with array of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryToListAsync``1(LinqToDB.Data.DataConnection,System.Func{System.Data.Common.DbDataReader,``0},System.String,System.Object)">
            <summary>
            Executes command asynchronously and returns list of values, mapped using provided mapping function.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="objectReader">Record mapping function from data reader.</param>
            <param name="sql">Command text.</param>
            <param name="parameters">Command parameters. Supported values:
            <para> - <c>null</c> for command without parameters;</para>
            <para> - single <see cref="T:LinqToDB.Data.DataParameter"/> instance;</para>
            <para> - array of <see cref="T:LinqToDB.Data.DataParameter"/> parameters;</para>
            <para> - mapping class entity.</para>
            <para>Last case will convert all mapped columns to <see cref="T:LinqToDB.Data.DataParameter"/> instances using following logic:</para>
            <para> - if column is of <see cref="T:LinqToDB.Data.DataParameter"/> type, column value will be used. If parameter name (<see cref="P:LinqToDB.Data.DataParameter.Name"/>) is not set, column name will be used;</para>
            <para> - if converter from column type to <see cref="T:LinqToDB.Data.DataParameter"/> is defined in mapping schema, it will be used to create parameter with colum name passed to converter;</para>
            <para> - otherwise column value will be converted to <see cref="T:LinqToDB.Data.DataParameter"/> using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema.</para>
            </param>
            <returns>Returns task with list of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryToListAsync``1(LinqToDB.Data.DataConnection,System.Func{System.Data.Common.DbDataReader,``0},System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Executes command asynchronously and returns list of values, mapped using provided mapping function.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="objectReader">Record mapping function from data reader.</param>
            <param name="sql">Command text.</param>
            <param name="parameters">Command parameters. Supported values:
            <para> - <c>null</c> for command without parameters;</para>
            <para> - single <see cref="T:LinqToDB.Data.DataParameter"/> instance;</para>
            <para> - array of <see cref="T:LinqToDB.Data.DataParameter"/> parameters;</para>
            <para> - mapping class entity.</para>
            <para>Last case will convert all mapped columns to <see cref="T:LinqToDB.Data.DataParameter"/> instances using following logic:</para>
            <para> - if column is of <see cref="T:LinqToDB.Data.DataParameter"/> type, column value will be used. If parameter name (<see cref="P:LinqToDB.Data.DataParameter.Name"/>) is not set, column name will be used;</para>
            <para> - if converter from column type to <see cref="T:LinqToDB.Data.DataParameter"/> is defined in mapping schema, it will be used to create parameter with colum name passed to converter;</para>
            <para> - otherwise column value will be converted to <see cref="T:LinqToDB.Data.DataParameter"/> using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema.</para>
            </param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Returns task with list of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryToArrayAsync``1(LinqToDB.Data.DataConnection,System.Func{System.Data.Common.DbDataReader,``0},System.String,System.Object)">
            <summary>
            Executes command asynchronously and returns array of values, mapped using provided mapping function.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="objectReader">Record mapping function from data reader.</param>
            <param name="sql">Command text.</param>
            <param name="parameters">Command parameters. Supported values:
            <para> - <c>null</c> for command without parameters;</para>
            <para> - single <see cref="T:LinqToDB.Data.DataParameter"/> instance;</para>
            <para> - array of <see cref="T:LinqToDB.Data.DataParameter"/> parameters;</para>
            <para> - mapping class entity.</para>
            <para>Last case will convert all mapped columns to <see cref="T:LinqToDB.Data.DataParameter"/> instances using following logic:</para>
            <para> - if column is of <see cref="T:LinqToDB.Data.DataParameter"/> type, column value will be used. If parameter name (<see cref="P:LinqToDB.Data.DataParameter.Name"/>) is not set, column name will be used;</para>
            <para> - if converter from column type to <see cref="T:LinqToDB.Data.DataParameter"/> is defined in mapping schema, it will be used to create parameter with colum name passed to converter;</para>
            <para> - otherwise column value will be converted to <see cref="T:LinqToDB.Data.DataParameter"/> using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema.</para>
            </param>
            <returns>Returns task with array of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryToArrayAsync``1(LinqToDB.Data.DataConnection,System.Func{System.Data.Common.DbDataReader,``0},System.String,System.Threading.CancellationToken,System.Object)">
            <summary>
            Executes command asynchronously and returns array of values, mapped using provided mapping function.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="objectReader">Record mapping function from data reader.</param>
            <param name="sql">Command text.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <param name="parameters">Command parameters. Supported values:
            <para> - <c>null</c> for command without parameters;</para>
            <para> - single <see cref="T:LinqToDB.Data.DataParameter"/> instance;</para>
            <para> - array of <see cref="T:LinqToDB.Data.DataParameter"/> parameters;</para>
            <para> - mapping class entity.</para>
            <para>Last case will convert all mapped columns to <see cref="T:LinqToDB.Data.DataParameter"/> instances using following logic:</para>
            <para> - if column is of <see cref="T:LinqToDB.Data.DataParameter"/> type, column value will be used. If parameter name (<see cref="P:LinqToDB.Data.DataParameter.Name"/>) is not set, column name will be used;</para>
            <para> - if converter from column type to <see cref="T:LinqToDB.Data.DataParameter"/> is defined in mapping schema, it will be used to create parameter with colum name passed to converter;</para>
            <para> - otherwise column value will be converted to <see cref="T:LinqToDB.Data.DataParameter"/> using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema.</para>
            </param>
            <returns>Returns task with array of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.Query``1(LinqToDB.Data.DataConnection,System.String)">
            <summary>
            Executes command and returns results as collection of values of specified type.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <returns>Returns collection of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.Query``1(LinqToDB.Data.DataConnection,System.String,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes command and returns results as collection of values of specified type.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <param name="parameters">Command parameters.</param>
            <returns>Returns collection of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryMultiple``1(LinqToDB.Data.DataConnection,System.String,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes command and returns a result containing multiple result sets.
            </summary>
            <typeparam name="T">Result set type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <param name="parameters">Command parameters.</param>
            <returns>Returns result.</returns>
            <example>
            Example of <typeparamref name="T"/> definition with <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/>.
            <code>
            class MultipleResult
            {
               [ResultSetIndex(0)] public IEnumerable&lt;Person&gt;  AllPersons   { get; set; }
               [ResultSetIndex(1)] public IList&lt;Doctor&gt;        AllDoctors   { get; set; }
               [ResultSetIndex(2)] public IEnumerable&lt;Patient&gt; AllPatients  { get; set; }
               [ResultSetIndex(3)] public Patient              FirstPatient { get; set; }
            }
            </code>
            Example of <typeparamref name="T"/> definition without attributes.
            <code>
            class MultipleResult
            {
               public IEnumerable&lt;Person&gt;  AllPersons   { get; set; }
               public IList&lt;Doctor&gt;        AllDoctors   { get; set; }
               public IEnumerable&lt;Patient&gt; AllPatients  { get; set; }
               public Patient              FirstPatient { get; set; }
            }
            </code>
            </example>
            <remarks>
            	- type <typeparamref name="T"/> should have default constructor.<para/>
            	- if at least one property or field has <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/>,
            	then properties that are not marked with <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/> will be ignored.<para/>
            	- if there is missing index in properties that are marked with <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/>, then result set under missing index will be ignored.<para/>
            	- if there is no <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/>, then all non readonly fields or properties with setter will read from multiple result set. Order is based on their appearance in class.
            </remarks>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryMultipleAsync``1(LinqToDB.Data.DataConnection,System.String,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes command asynchronously and returns a result containing multiple result sets.
            </summary>
            <typeparam name="T">Result set type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <param name="parameters">Command parameters.</param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains object with multiply result sets.
            </returns>
            <example>
            Example of <typeparamref name="T"/> definition with <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/>.
            <code>
            class MultipleResult
            {
               [ResultSetIndex(0)] public IEnumerable&lt;Person&gt;  AllPersons   { get; set; }
               [ResultSetIndex(1)] public IList&lt;Doctor&gt;        AllDoctors   { get; set; }
               [ResultSetIndex(2)] public IEnumerable&lt;Patient&gt; AllPatients  { get; set; }
               [ResultSetIndex(3)] public Patient              FirstPatient { get; set; }
            }
            </code>
            Example of <typeparamref name="T"/> definition without attributes.
            <code>
            class MultipleResult
            {
               public IEnumerable&lt;Person&gt;  AllPersons   { get; set; }
               public IList&lt;Doctor&gt;        AllDoctors   { get; set; }
               public IEnumerable&lt;Patient&gt; AllPatients  { get; set; }
               public Patient              FirstPatient { get; set; }
            }
            </code>
            </example>
            <remarks>
            	- type <typeparamref name="T"/> should have default constructor.<para/>
            	- if at least one property or field has <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/>,
            	then properties that are not marked with <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/> will be ignored.<para/>
            	- if there is missing index in properties that are marked with <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/>, then result set under missing index will be ignored.<para/>
            	- if there is no <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/>, then all non readonly fields or properties with setter will read from multiple result set. Order is based on their appearance in class.
            </remarks>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryMultipleAsync``1(LinqToDB.Data.DataConnection,System.String,System.Threading.CancellationToken,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes command asynchronously and returns a result containing multiple result sets.
            </summary>
            <typeparam name="T">Result set type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <param name="parameters">Command parameters.</param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains object with multiply result sets.
            </returns>
            <example>
            Example of <typeparamref name="T"/> definition with <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/>.
            <code>
            class MultipleResult
            {
               [ResultSetIndex(0)] public IEnumerable&lt;Person&gt;  AllPersons   { get; set; }
               [ResultSetIndex(1)] public IList&lt;Doctor&gt;        AllDoctors   { get; set; }
               [ResultSetIndex(2)] public IEnumerable&lt;Patient&gt; AllPatients  { get; set; }
               [ResultSetIndex(3)] public Patient              FirstPatient { get; set; }
            }
            </code>
            Example of <typeparamref name="T"/> definition without attributes.
            <code>
            class MultipleResult
            {
               public IEnumerable&lt;Person&gt;  AllPersons   { get; set; }
               public IList&lt;Doctor&gt;        AllDoctors   { get; set; }
               public IEnumerable&lt;Patient&gt; AllPatients  { get; set; }
               public Patient              FirstPatient { get; set; }
            }
            </code>
            </example>
            <remarks>
            	- type <typeparamref name="T"/> should have default constructor.<para/>
            	- if at least one property or field has <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/>,
            	then properties that are not marked with <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/> will be ignored.<para/>
            	- if there is missing index in properties that are marked with <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/>, then result set under missing index will be ignored.<para/>
            	- if there is no <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/>, then all non readonly fields or properties with setter will read from multiple result set. Order is based on their appearance in class.
            </remarks>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryProc``1(LinqToDB.Data.DataConnection,System.String,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes command using <see cref="F:System.Data.CommandType.StoredProcedure"/> command type and returns results as collection of values of specified type.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text. This is caller's responsibility to properly escape procedure name.</param>
            <param name="parameters">Command parameters.</param>
            <returns>Returns collection of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryProcAsync``1(LinqToDB.Data.DataConnection,System.String,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes command using <see cref="F:System.Data.CommandType.StoredProcedure"/> command type and returns results as collection of values of specified type.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text. This is caller's responsibility to properly escape procedure name.</param>
            <param name="parameters">Command parameters.</param>
            <returns>Returns collection of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryProcAsync``1(LinqToDB.Data.DataConnection,System.String,System.Threading.CancellationToken,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes command using <see cref="F:System.Data.CommandType.StoredProcedure"/> command type and returns results as collection of values of specified type.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text. This is caller's responsibility to properly escape procedure name.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <param name="parameters">Command parameters.</param>
            <returns>Returns collection of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryProc``1(LinqToDB.Data.DataConnection,System.String,System.Object)">
            <summary>
            Executes command using <see cref="F:System.Data.CommandType.StoredProcedure"/> command type and returns results as collection of values of specified type.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text. This is caller's responsibility to properly escape procedure name.</param>
            <param name="parameters">Command parameters. Supported values:
            <para> - <c>null</c> for command without parameters;</para>
            <para> - single <see cref="T:LinqToDB.Data.DataParameter"/> instance;</para>
            <para> - array of <see cref="T:LinqToDB.Data.DataParameter"/> parameters;</para>
            <para> - mapping class entity.</para>
            <para>Last case will convert all mapped columns to <see cref="T:LinqToDB.Data.DataParameter"/> instances using following logic:</para>
            <para> - if column is of <see cref="T:LinqToDB.Data.DataParameter"/> type, column value will be used. If parameter name (<see cref="P:LinqToDB.Data.DataParameter.Name"/>) is not set, column name will be used;</para>
            <para> - if converter from column type to <see cref="T:LinqToDB.Data.DataParameter"/> is defined in mapping schema, it will be used to create parameter with colum name passed to converter;</para>
            <para> - otherwise column value will be converted to <see cref="T:LinqToDB.Data.DataParameter"/> using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema.</para>
            </param>
            <returns>Returns collection of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryProcAsync``1(LinqToDB.Data.DataConnection,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Executes command asynchronously using <see cref="F:System.Data.CommandType.StoredProcedure"/> command type and returns results as collection of values of specified type.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text. This is caller's responsibility to properly escape procedure name.</param>
            <param name="parameters">Command parameters. Supported values:
            <para> - <c>null</c> for command without parameters;</para>
            <para> - single <see cref="T:LinqToDB.Data.DataParameter"/> instance;</para>
            <para> - array of <see cref="T:LinqToDB.Data.DataParameter"/> parameters;</para>
            <para> - mapping class entity.</para>
            <para>Last case will convert all mapped columns to <see cref="T:LinqToDB.Data.DataParameter"/> instances using following logic:</para>
            <para> - if column is of <see cref="T:LinqToDB.Data.DataParameter"/> type, column value will be used. If parameter name (<see cref="P:LinqToDB.Data.DataParameter.Name"/>) is not set, column name will be used;</para>
            <para> - if converter from column type to <see cref="T:LinqToDB.Data.DataParameter"/> is defined in mapping schema, it will be used to create parameter with colum name passed to converter;</para>
            <para> - otherwise column value will be converted to <see cref="T:LinqToDB.Data.DataParameter"/> using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema.</para>
            </param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Returns collection of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryProcMultipleAsync``1(LinqToDB.Data.DataConnection,System.String,System.Threading.CancellationToken,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes command asynchronously using <see cref="F:System.Data.CommandType.StoredProcedure"/> command type and returns a result containing multiple result sets.
            </summary>
            <typeparam name="T">Result set type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text. This is caller's responsibility to properly escape procedure name.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <param name="parameters">Command parameters.</param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains object with multiply result sets.
            </returns>
            <example>
            Example of <typeparamref name="T"/> definition with <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/>.
            <code>
            class MultipleResult
            {
               [ResultSetIndex(0)] public IEnumerable&lt;Person&gt;  AllPersons   { get; set; }
               [ResultSetIndex(1)] public IList&lt;Doctor&gt;        AllDoctors   { get; set; }
               [ResultSetIndex(2)] public IEnumerable&lt;Patient&gt; AllPatients  { get; set; }
               [ResultSetIndex(3)] public Patient              FirstPatient { get; set; }
            }
            </code>
            Example of <typeparamref name="T"/> definition without attributes.
            <code>
            class MultipleResult
            {
               public IEnumerable&lt;Person&gt;  AllPersons   { get; set; }
               public IList&lt;Doctor&gt;        AllDoctors   { get; set; }
               public IEnumerable&lt;Patient&gt; AllPatients  { get; set; }
               public Patient              FirstPatient { get; set; }
            }
            </code>
            </example>
            <remarks>
            	- type <typeparamref name="T"/> should have default constructor.<para/>
            	- if at least one property or field has <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/>,
            	then properties that are not marked with <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/> will be ignored.<para/>
            	- if there is missing index in properties that are marked with <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/>, then result set under missing index will be ignored.<para/>
            	- if there is no <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/>, then all non readonly fields or properties with setter will read from multiple result set. Order is based on their appearance in class.
            </remarks>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryProcMultipleAsync``1(LinqToDB.Data.DataConnection,System.String,System.Threading.CancellationToken,System.Object)">
            <summary>
            Executes command asynchronously using <see cref="F:System.Data.CommandType.StoredProcedure"/> command type and returns a result containing multiple result sets.
            </summary>
            <typeparam name="T">Result set type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text. This is caller's responsibility to properly escape procedure name.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <param name="parameters">Command parameters. Supported values:
            <para> - <c>null</c> for command without parameters;</para>
            <para> - single <see cref="T:LinqToDB.Data.DataParameter"/> instance;</para>
            <para> - array of <see cref="T:LinqToDB.Data.DataParameter"/> parameters;</para>
            <para> - mapping class entity.</para>
            <para>Last case will convert all mapped columns to <see cref="T:LinqToDB.Data.DataParameter"/> instances using following logic:</para>
            <para> - if column is of <see cref="T:LinqToDB.Data.DataParameter"/> type, column value will be used. If parameter name (<see cref="P:LinqToDB.Data.DataParameter.Name"/>) is not set, column name will be used;</para>
            <para> - if converter from column type to <see cref="T:LinqToDB.Data.DataParameter"/> is defined in mapping schema, it will be used to create parameter with colum name passed to converter;</para>
            <para> - otherwise column value will be converted to <see cref="T:LinqToDB.Data.DataParameter"/> using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema.</para>
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains object with multiply result sets.
            </returns>
            <example>
            Example of <typeparamref name="T"/> definition with <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/>.
            <code>
            class MultipleResult
            {
               [ResultSetIndex(0)] public IEnumerable&lt;Person&gt;  AllPersons   { get; set; }
               [ResultSetIndex(1)] public IList&lt;Doctor&gt;        AllDoctors   { get; set; }
               [ResultSetIndex(2)] public IEnumerable&lt;Patient&gt; AllPatients  { get; set; }
               [ResultSetIndex(3)] public Patient              FirstPatient { get; set; }
            }
            </code>
            Example of <typeparamref name="T"/> definition without attributes.
            <code>
            class MultipleResult
            {
               public IEnumerable&lt;Person&gt;  AllPersons   { get; set; }
               public IList&lt;Doctor&gt;        AllDoctors   { get; set; }
               public IEnumerable&lt;Patient&gt; AllPatients  { get; set; }
               public Patient              FirstPatient { get; set; }
            }
            </code>
            </example>
            <remarks>
            	- type <typeparamref name="T"/> should have default constructor.<para/>
            	- if at least one property or field has <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/>,
            	then properties that are not marked with <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/> will be ignored.<para/>
            	- if there is missing index in properties that are marked with <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/>, then result set under missing index will be ignored.<para/>
            	- if there is no <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/>, then all non readonly fields or properties with setter will read from multiple result set. Order is based on their appearance in class.
            </remarks>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryProcMultipleAsync``1(LinqToDB.Data.DataConnection,System.String,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes command asynchronously using <see cref="F:System.Data.CommandType.StoredProcedure"/> command type and returns a result containing multiple result sets.
            Sets result values for output and reference parameters to corresponding parameters in <paramref name="parameters"/>.
            </summary>
            <typeparam name="T">Result set type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text. This is caller's responsibility to properly escape procedure name.</param>
            <param name="parameters">Command parameters.</param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains object with multiply result sets.
            </returns>
            <example>
            Example of <typeparamref name="T"/> definition with <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/>.
            <code>
            class MultipleResult
            {
               [ResultSetIndex(0)] public IEnumerable&lt;Person&gt;  AllPersons   { get; set; }
               [ResultSetIndex(1)] public IList&lt;Doctor&gt;        AllDoctors   { get; set; }
               [ResultSetIndex(2)] public IEnumerable&lt;Patient&gt; AllPatients  { get; set; }
               [ResultSetIndex(3)] public Patient              FirstPatient { get; set; }
            }
            </code>
            Example of <typeparamref name="T"/> definition without attributes.
            <code>
            class MultipleResult
            {
               public IEnumerable&lt;Person&gt;  AllPersons   { get; set; }
               public IList&lt;Doctor&gt;        AllDoctors   { get; set; }
               public IEnumerable&lt;Patient&gt; AllPatients  { get; set; }
               public Patient              FirstPatient { get; set; }
            }
            </code>
            </example>
            <remarks>
            	- type <typeparamref name="T"/> should have default constructor.<para/>
            	- if at least one property or field has <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/>,
            	then properties that are not marked with <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/> will be ignored.<para/>
            	- if there is missing index in properties that are marked with <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/>, then result set under missing index will be ignored.<para/>
            	- if there is no <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/>, then all non readonly fields or properties with setter will read from multiple result set. Order is based on their appearance in class.
            </remarks>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryProcMultipleAsync``1(LinqToDB.Data.DataConnection,System.String,System.Object)">
            <summary>
            Executes command asynchronously using <see cref="F:System.Data.CommandType.StoredProcedure"/> command type and returns a result containing multiple result sets.
            </summary>
            <typeparam name="T">Result set type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text. This is caller's responsibility to properly escape procedure name.</param>
            <param name="parameters">Command parameters. Supported values:
            <para> - <c>null</c> for command without parameters;</para>
            <para> - single <see cref="T:LinqToDB.Data.DataParameter"/> instance;</para>
            <para> - array of <see cref="T:LinqToDB.Data.DataParameter"/> parameters;</para>
            <para> - mapping class entity.</para>
            <para>Last case will convert all mapped columns to <see cref="T:LinqToDB.Data.DataParameter"/> instances using following logic:</para>
            <para> - if column is of <see cref="T:LinqToDB.Data.DataParameter"/> type, column value will be used. If parameter name (<see cref="P:LinqToDB.Data.DataParameter.Name"/>) is not set, column name will be used;</para>
            <para> - if converter from column type to <see cref="T:LinqToDB.Data.DataParameter"/> is defined in mapping schema, it will be used to create parameter with colum name passed to converter;</para>
            <para> - otherwise column value will be converted to <see cref="T:LinqToDB.Data.DataParameter"/> using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema.</para>
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains object with multiply result sets.
            </returns>
            <example>
            Example of <typeparamref name="T"/> definition with <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/>.
            <code>
            class MultipleResult
            {
               [ResultSetIndex(0)] public IEnumerable&lt;Person&gt;  AllPersons   { get; set; }
               [ResultSetIndex(1)] public IList&lt;Doctor&gt;        AllDoctors   { get; set; }
               [ResultSetIndex(2)] public IEnumerable&lt;Patient&gt; AllPatients  { get; set; }
               [ResultSetIndex(3)] public Patient              FirstPatient { get; set; }
            }
            </code>
            Example of <typeparamref name="T"/> definition without attributes.
            <code>
            class MultipleResult
            {
               public IEnumerable&lt;Person&gt;  AllPersons   { get; set; }
               public IList&lt;Doctor&gt;        AllDoctors   { get; set; }
               public IEnumerable&lt;Patient&gt; AllPatients  { get; set; }
               public Patient              FirstPatient { get; set; }
            }
            </code>
            </example>
            <remarks>
            	- type <typeparamref name="T"/> should have default constructor.<para/>
            	- if at least one property or field has <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/>,
            	then properties that are not marked with <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/> will be ignored.<para/>
            	- if there is missing index in properties that are marked with <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/>, then result set under missing index will be ignored.<para/>
            	- if there is no <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/>, then all non readonly fields or properties with setter will read from multiple result set. Order is based on their appearance in class.
            </remarks>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryProcMultiple``1(LinqToDB.Data.DataConnection,System.String,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes command using <see cref="F:System.Data.CommandType.StoredProcedure"/> command type and returns a result containing multiple result sets.
            Sets result values for output and reference parameters to corresponding parameters in <paramref name="parameters"/>.
            </summary>
            <typeparam name="T">Result set type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text. This is caller's responsibility to properly escape procedure name.</param>
            <param name="parameters">Command parameters.</param>
            <returns>Returns result.</returns>
            <example>
            Example of <typeparamref name="T"/> definition with <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/>.
            <code>
            class MultipleResult
            {
               [ResultSetIndex(0)] public IEnumerable&lt;Person&gt;  AllPersons   { get; set; }
               [ResultSetIndex(1)] public IList&lt;Doctor&gt;        AllDoctors   { get; set; }
               [ResultSetIndex(2)] public IEnumerable&lt;Patient&gt; AllPatients  { get; set; }
               [ResultSetIndex(3)] public Patient              FirstPatient { get; set; }
            }
            </code>
            Example of <typeparamref name="T"/> definition without attributes.
            <code>
            class MultipleResult
            {
               public IEnumerable&lt;Person&gt;  AllPersons   { get; set; }
               public IList&lt;Doctor&gt;        AllDoctors   { get; set; }
               public IEnumerable&lt;Patient&gt; AllPatients  { get; set; }
               public Patient              FirstPatient { get; set; }
            }
            </code>
            </example>
            <remarks>
            	- type <typeparamref name="T"/> should have default constructor.<para/>
            	- if at least one property or field has <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/>,
            	then properties that are not marked with <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/> will be ignored.<para/>
            	- if there is missing index in properties that are marked with <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/>, then result set under missing index will be ignored.<para/>
            	- if there is no <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/>, then all non readonly fields or properties with setter will read from multiple result set. Order is based on their appearance in class.
            </remarks>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryProcMultiple``1(LinqToDB.Data.DataConnection,System.String,System.Object)">
            <summary>
            Executes command using <see cref="F:System.Data.CommandType.StoredProcedure"/> command type and returns a result containing multiple result sets.
            </summary>
            <typeparam name="T">Result set type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text. This is caller's responsibility to properly escape procedure name.</param>
            <param name="parameters">Command parameters. Supported values:
            <para> - <c>null</c> for command without parameters;</para>
            <para> - single <see cref="T:LinqToDB.Data.DataParameter"/> instance;</para>
            <para> - array of <see cref="T:LinqToDB.Data.DataParameter"/> parameters;</para>
            <para> - mapping class entity.</para>
            <para>Last case will convert all mapped columns to <see cref="T:LinqToDB.Data.DataParameter"/> instances using following logic:</para>
            <para> - if column is of <see cref="T:LinqToDB.Data.DataParameter"/> type, column value will be used. If parameter name (<see cref="P:LinqToDB.Data.DataParameter.Name"/>) is not set, column name will be used;</para>
            <para> - if converter from column type to <see cref="T:LinqToDB.Data.DataParameter"/> is defined in mapping schema, it will be used to create parameter with colum name passed to converter;</para>
            <para> - otherwise column value will be converted to <see cref="T:LinqToDB.Data.DataParameter"/> using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema.</para>
            </param>
            <returns>Returns result.</returns>
            <example>
            Example of <typeparamref name="T"/> definition with <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/>.
            <code>
            class MultipleResult
            {
               [ResultSetIndex(0)] public IEnumerable&lt;Person&gt;  AllPersons   { get; set; }
               [ResultSetIndex(1)] public IList&lt;Doctor&gt;        AllDoctors   { get; set; }
               [ResultSetIndex(2)] public IEnumerable&lt;Patient&gt; AllPatients  { get; set; }
               [ResultSetIndex(3)] public Patient              FirstPatient { get; set; }
            }
            </code>
            Example of <typeparamref name="T"/> definition without attributes.
            <code>
            class MultipleResult
            {
               public IEnumerable&lt;Person&gt;  AllPersons   { get; set; }
               public IList&lt;Doctor&gt;        AllDoctors   { get; set; }
               public IEnumerable&lt;Patient&gt; AllPatients  { get; set; }
               public Patient              FirstPatient { get; set; }
            }
            </code>
            </example>
            <remarks>
            	- type <typeparamref name="T"/> should have default constructor.<para/>
            	- if at least one property or field has <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/>,
            	then properties that are not marked with <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/> will be ignored.<para/>
            	- if there is missing index in properties that are marked with <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/>, then result set under missing index will be ignored.<para/>
            	- if there is no <see cref="T:LinqToDB.Mapping.ResultSetIndexAttribute"/>, then all non readonly fields or properties with setter will read from multiple result set. Order is based on their appearance in class.
            </remarks>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.Query``1(LinqToDB.Data.DataConnection,System.String,LinqToDB.Data.DataParameter)">
            <summary>
            Executes command and returns results as collection of values of specified type.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <param name="parameter">Command parameter.</param>
            <returns>Returns collection of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.Query``1(LinqToDB.Data.DataConnection,System.String,System.Object)">
            <summary>
            Executes command and returns results as collection of values of specified type.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <param name="parameters">Command parameters. Supported values:
            <para> - <c>null</c> for command without parameters;</para>
            <para> - single <see cref="T:LinqToDB.Data.DataParameter"/> instance;</para>
            <para> - array of <see cref="T:LinqToDB.Data.DataParameter"/> parameters;</para>
            <para> - mapping class entity.</para>
            <para>Last case will convert all mapped columns to <see cref="T:LinqToDB.Data.DataParameter"/> instances using following logic:</para>
            <para> - if column is of <see cref="T:LinqToDB.Data.DataParameter"/> type, column value will be used. If parameter name (<see cref="P:LinqToDB.Data.DataParameter.Name"/>) is not set, column name will be used;</para>
            <para> - if converter from column type to <see cref="T:LinqToDB.Data.DataParameter"/> is defined in mapping schema, it will be used to create parameter with colum name passed to converter;</para>
            <para> - otherwise column value will be converted to <see cref="T:LinqToDB.Data.DataParameter"/> using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema.</para>
            </param>
            <returns>Returns collection of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryToListAsync``1(LinqToDB.Data.DataConnection,System.String)">
            <summary>
            Executes command asynchronously and returns list of values.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <returns>Returns task with list of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryToListAsync``1(LinqToDB.Data.DataConnection,System.String,System.Threading.CancellationToken)">
            <summary>
            Executes command asynchronously and returns list of values.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Returns task with list of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryToArrayAsync``1(LinqToDB.Data.DataConnection,System.String)">
            <summary>
            Executes command asynchronously and returns array of values.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <returns>Returns task with array of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryToArrayAsync``1(LinqToDB.Data.DataConnection,System.String,System.Threading.CancellationToken)">
            <summary>
            Executes command asynchronously and returns array of values.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Returns task with array of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryToListAsync``1(LinqToDB.Data.DataConnection,System.String,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes command asynchronously and returns list of values.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <param name="parameters">Command parameters.</param>
            <returns>Returns task with list of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryToListAsync``1(LinqToDB.Data.DataConnection,System.String,System.Threading.CancellationToken,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes command asynchronously and returns list of values.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <param name="parameters">Command parameters.</param>
            <returns>Returns task with list of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryToArrayAsync``1(LinqToDB.Data.DataConnection,System.String,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes command asynchronously and returns array of values.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <param name="parameters">Command parameters.</param>
            <returns>Returns task with array of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryToArrayAsync``1(LinqToDB.Data.DataConnection,System.String,System.Threading.CancellationToken,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes command asynchronously and returns array of values.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <param name="parameters">Command parameters.</param>
            <returns>Returns task with array of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryToListAsync``1(LinqToDB.Data.DataConnection,System.String,LinqToDB.Data.DataParameter)">
            <summary>
            Executes command asynchronously and returns list of values.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <param name="parameter">Command parameter.</param>
            <returns>Returns task with list of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryToListAsync``1(LinqToDB.Data.DataConnection,System.String,LinqToDB.Data.DataParameter,System.Threading.CancellationToken)">
            <summary>
            Executes command asynchronously and returns list of values.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <param name="parameter">Command parameter.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Returns task with list of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryToArrayAsync``1(LinqToDB.Data.DataConnection,System.String,LinqToDB.Data.DataParameter)">
            <summary>
            Executes command asynchronously and returns array of values.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <param name="parameter">Command parameter.</param>
            <returns>Returns task with array of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryToArrayAsync``1(LinqToDB.Data.DataConnection,System.String,LinqToDB.Data.DataParameter,System.Threading.CancellationToken)">
            <summary>
            Executes command asynchronously and returns array of values.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <param name="parameter">Command parameter.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Returns task with array of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryToListAsync``1(LinqToDB.Data.DataConnection,System.String,System.Object)">
            <summary>
            Executes command asynchronously and returns list of values.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <param name="parameters">Command parameters. Supported values:
            <para> - <c>null</c> for command without parameters;</para>
            <para> - single <see cref="T:LinqToDB.Data.DataParameter"/> instance;</para>
            <para> - array of <see cref="T:LinqToDB.Data.DataParameter"/> parameters;</para>
            <para> - mapping class entity.</para>
            <para>Last case will convert all mapped columns to <see cref="T:LinqToDB.Data.DataParameter"/> instances using following logic:</para>
            <para> - if column is of <see cref="T:LinqToDB.Data.DataParameter"/> type, column value will be used. If parameter name (<see cref="P:LinqToDB.Data.DataParameter.Name"/>) is not set, column name will be used;</para>
            <para> - if converter from column type to <see cref="T:LinqToDB.Data.DataParameter"/> is defined in mapping schema, it will be used to create parameter with colum name passed to converter;</para>
            <para> - otherwise column value will be converted to <see cref="T:LinqToDB.Data.DataParameter"/> using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema.</para>
            </param>
            <returns>Returns task with list of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryToListAsync``1(LinqToDB.Data.DataConnection,System.String,System.Threading.CancellationToken,System.Object)">
            <summary>
            Executes command asynchronously and returns list of values.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <param name="parameters">Command parameters. Supported values:
            <para> - <c>null</c> for command without parameters;</para>
            <para> - single <see cref="T:LinqToDB.Data.DataParameter"/> instance;</para>
            <para> - array of <see cref="T:LinqToDB.Data.DataParameter"/> parameters;</para>
            <para> - mapping class entity.</para>
            <para>Last case will convert all mapped columns to <see cref="T:LinqToDB.Data.DataParameter"/> instances using following logic:</para>
            <para> - if column is of <see cref="T:LinqToDB.Data.DataParameter"/> type, column value will be used. If parameter name (<see cref="P:LinqToDB.Data.DataParameter.Name"/>) is not set, column name will be used;</para>
            <para> - if converter from column type to <see cref="T:LinqToDB.Data.DataParameter"/> is defined in mapping schema, it will be used to create parameter with colum name passed to converter;</para>
            <para> - otherwise column value will be converted to <see cref="T:LinqToDB.Data.DataParameter"/> using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema.</para>
            </param>
            <returns>Returns task with list of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryToArrayAsync``1(LinqToDB.Data.DataConnection,System.String,System.Object)">
            <summary>
            Executes command asynchronously and returns array of values.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <param name="parameters">Command parameters. Supported values:
            <para> - <c>null</c> for command without parameters;</para>
            <para> - single <see cref="T:LinqToDB.Data.DataParameter"/> instance;</para>
            <para> - array of <see cref="T:LinqToDB.Data.DataParameter"/> parameters;</para>
            <para> - mapping class entity.</para>
            <para>Last case will convert all mapped columns to <see cref="T:LinqToDB.Data.DataParameter"/> instances using following logic:</para>
            <para> - if column is of <see cref="T:LinqToDB.Data.DataParameter"/> type, column value will be used. If parameter name (<see cref="P:LinqToDB.Data.DataParameter.Name"/>) is not set, column name will be used;</para>
            <para> - if converter from column type to <see cref="T:LinqToDB.Data.DataParameter"/> is defined in mapping schema, it will be used to create parameter with colum name passed to converter;</para>
            <para> - otherwise column value will be converted to <see cref="T:LinqToDB.Data.DataParameter"/> using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema.</para>
            </param>
            <returns>Returns task with array of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryToArrayAsync``1(LinqToDB.Data.DataConnection,System.String,System.Threading.CancellationToken,System.Object)">
            <summary>
            Executes command asynchronously and returns array of values.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <param name="parameters">Command parameters. Supported values:
            <para> - <c>null</c> for command without parameters;</para>
            <para> - single <see cref="T:LinqToDB.Data.DataParameter"/> instance;</para>
            <para> - array of <see cref="T:LinqToDB.Data.DataParameter"/> parameters;</para>
            <para> - mapping class entity.</para>
            <para>Last case will convert all mapped columns to <see cref="T:LinqToDB.Data.DataParameter"/> instances using following logic:</para>
            <para> - if column is of <see cref="T:LinqToDB.Data.DataParameter"/> type, column value will be used. If parameter name (<see cref="P:LinqToDB.Data.DataParameter.Name"/>) is not set, column name will be used;</para>
            <para> - if converter from column type to <see cref="T:LinqToDB.Data.DataParameter"/> is defined in mapping schema, it will be used to create parameter with colum name passed to converter;</para>
            <para> - otherwise column value will be converted to <see cref="T:LinqToDB.Data.DataParameter"/> using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema.</para>
            </param>
            <returns>Returns task with array of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.Query``1(LinqToDB.Data.DataConnection,``0,System.String,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes command and returns results as collection of values of specified type.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="template">This value used only for <typeparamref name="T"/> parameter type inference, which makes this method usable with anonymous types.</param>
            <param name="sql">Command text.</param>
            <param name="parameters">Command parameters.</param>
            <returns>Returns collection of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.Query``1(LinqToDB.Data.DataConnection,``0,System.String,System.Object)">
            <summary>
            Executes command and returns results as collection of values of specified type.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="template">This value used only for <typeparamref name="T"/> parameter type inference, which makes this method usable with anonymous types.</param>
            <param name="sql">Command text.</param>
            <param name="parameters">Command parameters. Supported values:
            <para> - <c>null</c> for command without parameters;</para>
            <para> - single <see cref="T:LinqToDB.Data.DataParameter"/> instance;</para>
            <para> - array of <see cref="T:LinqToDB.Data.DataParameter"/> parameters;</para>
            <para> - mapping class entity.</para>
            <para>Last case will convert all mapped columns to <see cref="T:LinqToDB.Data.DataParameter"/> instances using following logic:</para>
            <para> - if column is of <see cref="T:LinqToDB.Data.DataParameter"/> type, column value will be used. If parameter name (<see cref="P:LinqToDB.Data.DataParameter.Name"/>) is not set, column name will be used;</para>
            <para> - if converter from column type to <see cref="T:LinqToDB.Data.DataParameter"/> is defined in mapping schema, it will be used to create parameter with colum name passed to converter;</para>
            <para> - otherwise column value will be converted to <see cref="T:LinqToDB.Data.DataParameter"/> using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema.</para>
            </param>
            <returns>Returns collection of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryProc``1(LinqToDB.Data.DataConnection,``0,System.String,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes stored procedure and returns results as collection of values of specified type.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="template">This value used only for <typeparamref name="T"/> parameter type inference, which makes this method usable with anonymous types.</param>
            <param name="sql">Command text.</param>
            <param name="parameters">Command parameters.</param>
            <returns>Returns collection of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryProcAsync``1(LinqToDB.Data.DataConnection,``0,System.String,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes stored procedure asynchronously and returns results as collection of values of specified type.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="template">This value used only for <typeparamref name="T"/> parameter type inference, which makes this method usable with anonymous types.</param>
            <param name="sql">Command text.</param>
            <param name="parameters">Command parameters.</param>
            <returns>Returns collection of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryProcAsync``1(LinqToDB.Data.DataConnection,``0,System.String,System.Threading.CancellationToken,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes stored procedure asynchronously and returns results as collection of values of specified type.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="template">This value used only for <typeparamref name="T"/> parameter type inference, which makes this method usable with anonymous types.</param>
            <param name="sql">Command text.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <param name="parameters">Command parameters.</param>
            <returns>Returns collection of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryProc``1(LinqToDB.Data.DataConnection,``0,System.String,System.Object)">
            <summary>
            Executes stored procedure and returns results as collection of values of specified type.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="template">This value used only for <typeparamref name="T"/> parameter type inference, which makes this method usable with anonymous types.</param>
            <param name="sql">Command text.</param>
            <param name="parameters">Command parameters. Supported values:
            <para> - <c>null</c> for command without parameters;</para>
            <para> - single <see cref="T:LinqToDB.Data.DataParameter"/> instance;</para>
            <para> - array of <see cref="T:LinqToDB.Data.DataParameter"/> parameters;</para>
            <para> - mapping class entity.</para>
            <para>Last case will convert all mapped columns to <see cref="T:LinqToDB.Data.DataParameter"/> instances using following logic:</para>
            <para> - if column is of <see cref="T:LinqToDB.Data.DataParameter"/> type, column value will be used. If parameter name (<see cref="P:LinqToDB.Data.DataParameter.Name"/>) is not set, column name will be used;</para>
            <para> - if converter from column type to <see cref="T:LinqToDB.Data.DataParameter"/> is defined in mapping schema, it will be used to create parameter with colum name passed to converter;</para>
            <para> - otherwise column value will be converted to <see cref="T:LinqToDB.Data.DataParameter"/> using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema.</para>
            </param>
            <returns>Returns collection of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryProcAsync``1(LinqToDB.Data.DataConnection,``0,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Executes stored procedure asynchronously and returns results as collection of values of specified type.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="template">This value used only for <typeparamref name="T"/> parameter type inference, which makes this method usable with anonymous types.</param>
            <param name="sql">Command text.</param>
            <param name="parameters">Command parameters. Supported values:
            <para> - <c>null</c> for command without parameters;</para>
            <para> - single <see cref="T:LinqToDB.Data.DataParameter"/> instance;</para>
            <para> - array of <see cref="T:LinqToDB.Data.DataParameter"/> parameters;</para>
            <para> - mapping class entity.</para>
            <para>Last case will convert all mapped columns to <see cref="T:LinqToDB.Data.DataParameter"/> instances using following logic:</para>
            <para> - if column is of <see cref="T:LinqToDB.Data.DataParameter"/> type, column value will be used. If parameter name (<see cref="P:LinqToDB.Data.DataParameter.Name"/>) is not set, column name will be used;</para>
            <para> - if converter from column type to <see cref="T:LinqToDB.Data.DataParameter"/> is defined in mapping schema, it will be used to create parameter with colum name passed to converter;</para>
            <para> - otherwise column value will be converted to <see cref="T:LinqToDB.Data.DataParameter"/> using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema.</para>
            </param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Returns collection of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryToListAsync``1(LinqToDB.Data.DataConnection,``0,System.String,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes command asynchronously and returns list of values of specified type.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="template">This value used only for <typeparamref name="T"/> parameter type inference, which makes this method usable with anonymous types.</param>
            <param name="sql">Command text.</param>
            <param name="parameters">Command parameters.</param>
            <returns>Returns task with list of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryToListAsync``1(LinqToDB.Data.DataConnection,``0,System.String,System.Threading.CancellationToken,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes command asynchronously and returns list of values of specified type.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="template">This value used only for <typeparamref name="T"/> parameter type inference, which makes this method usable with anonymous types.</param>
            <param name="sql">Command text.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <param name="parameters">Command parameters.</param>
            <returns>Returns task with list of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryToArrayAsync``1(LinqToDB.Data.DataConnection,``0,System.String,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes command asynchronously and returns array of values of specified type.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="template">This value used only for <typeparamref name="T"/> parameter type inference, which makes this method usable with anonymous types.</param>
            <param name="sql">Command text.</param>
            <param name="parameters">Command parameters.</param>
            <returns>Returns task with array of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryToArrayAsync``1(LinqToDB.Data.DataConnection,``0,System.String,System.Threading.CancellationToken,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes command asynchronously and returns array of values of specified type.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="template">This value used only for <typeparamref name="T"/> parameter type inference, which makes this method usable with anonymous types.</param>
            <param name="sql">Command text.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <param name="parameters">Command parameters.</param>
            <returns>Returns task with array of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryToListAsync``1(LinqToDB.Data.DataConnection,``0,System.String,System.Object)">
            <summary>
            Executes command asynchronously and returns list of values of specified type.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="template">This value used only for <typeparamref name="T"/> parameter type inference, which makes this method usable with anonymous types.</param>
            <param name="sql">Command text.</param>
            <param name="parameters">Command parameters. Supported values:
            <para> - <c>null</c> for command without parameters;</para>
            <para> - single <see cref="T:LinqToDB.Data.DataParameter"/> instance;</para>
            <para> - array of <see cref="T:LinqToDB.Data.DataParameter"/> parameters;</para>
            <para> - mapping class entity.</para>
            <para>Last case will convert all mapped columns to <see cref="T:LinqToDB.Data.DataParameter"/> instances using following logic:</para>
            <para> - if column is of <see cref="T:LinqToDB.Data.DataParameter"/> type, column value will be used. If parameter name (<see cref="P:LinqToDB.Data.DataParameter.Name"/>) is not set, column name will be used;</para>
            <para> - if converter from column type to <see cref="T:LinqToDB.Data.DataParameter"/> is defined in mapping schema, it will be used to create parameter with colum name passed to converter;</para>
            <para> - otherwise column value will be converted to <see cref="T:LinqToDB.Data.DataParameter"/> using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema.</para>
            </param>
            <returns>Returns task with list of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryToListAsync``1(LinqToDB.Data.DataConnection,``0,System.String,System.Threading.CancellationToken,System.Object)">
            <summary>
            Executes command asynchronously and returns list of values of specified type.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="template">This value used only for <typeparamref name="T"/> parameter type inference, which makes this method usable with anonymous types.</param>
            <param name="sql">Command text.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <param name="parameters">Command parameters. Supported values:
            <para> - <c>null</c> for command without parameters;</para>
            <para> - single <see cref="T:LinqToDB.Data.DataParameter"/> instance;</para>
            <para> - array of <see cref="T:LinqToDB.Data.DataParameter"/> parameters;</para>
            <para> - mapping class entity.</para>
            <para>Last case will convert all mapped columns to <see cref="T:LinqToDB.Data.DataParameter"/> instances using following logic:</para>
            <para> - if column is of <see cref="T:LinqToDB.Data.DataParameter"/> type, column value will be used. If parameter name (<see cref="P:LinqToDB.Data.DataParameter.Name"/>) is not set, column name will be used;</para>
            <para> - if converter from column type to <see cref="T:LinqToDB.Data.DataParameter"/> is defined in mapping schema, it will be used to create parameter with colum name passed to converter;</para>
            <para> - otherwise column value will be converted to <see cref="T:LinqToDB.Data.DataParameter"/> using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema.</para>
            </param>
            <returns>Returns task with list of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryToArrayAsync``1(LinqToDB.Data.DataConnection,``0,System.String,System.Object)">
            <summary>
            Executes command asynchronously and returns array of values of specified type.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="template">This value used only for <typeparamref name="T"/> parameter type inference, which makes this method usable with anonymous types.</param>
            <param name="sql">Command text.</param>
            <param name="parameters">Command parameters. Supported values:
            <para> - <c>null</c> for command without parameters;</para>
            <para> - single <see cref="T:LinqToDB.Data.DataParameter"/> instance;</para>
            <para> - array of <see cref="T:LinqToDB.Data.DataParameter"/> parameters;</para>
            <para> - mapping class entity.</para>
            <para>Last case will convert all mapped columns to <see cref="T:LinqToDB.Data.DataParameter"/> instances using following logic:</para>
            <para> - if column is of <see cref="T:LinqToDB.Data.DataParameter"/> type, column value will be used. If parameter name (<see cref="P:LinqToDB.Data.DataParameter.Name"/>) is not set, column name will be used;</para>
            <para> - if converter from column type to <see cref="T:LinqToDB.Data.DataParameter"/> is defined in mapping schema, it will be used to create parameter with colum name passed to converter;</para>
            <para> - otherwise column value will be converted to <see cref="T:LinqToDB.Data.DataParameter"/> using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema.</para>
            </param>
            <returns>Returns task with array of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.QueryToArrayAsync``1(LinqToDB.Data.DataConnection,``0,System.String,System.Threading.CancellationToken,System.Object)">
            <summary>
            Executes command asynchronously and returns array of values of specified type.
            </summary>
            <typeparam name="T">Result record type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="template">This value used only for <typeparamref name="T"/> parameter type inference, which makes this method usable with anonymous types.</param>
            <param name="sql">Command text.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <param name="parameters">Command parameters. Supported values:
            <para> - <c>null</c> for command without parameters;</para>
            <para> - single <see cref="T:LinqToDB.Data.DataParameter"/> instance;</para>
            <para> - array of <see cref="T:LinqToDB.Data.DataParameter"/> parameters;</para>
            <para> - mapping class entity.</para>
            <para>Last case will convert all mapped columns to <see cref="T:LinqToDB.Data.DataParameter"/> instances using following logic:</para>
            <para> - if column is of <see cref="T:LinqToDB.Data.DataParameter"/> type, column value will be used. If parameter name (<see cref="P:LinqToDB.Data.DataParameter.Name"/>) is not set, column name will be used;</para>
            <para> - if converter from column type to <see cref="T:LinqToDB.Data.DataParameter"/> is defined in mapping schema, it will be used to create parameter with colum name passed to converter;</para>
            <para> - otherwise column value will be converted to <see cref="T:LinqToDB.Data.DataParameter"/> using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema.</para>
            </param>
            <returns>Returns task with array of query result records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.Execute(LinqToDB.Data.DataConnection,System.String)">
            <summary>
            Executes command and returns number of affected records.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <returns>Number of records, affected by command execution.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.Execute(LinqToDB.Data.DataConnection,System.String,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes command and returns number of affected records.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <param name="parameters">Command parameters.</param>
            <returns>Number of records, affected by command execution.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.ExecuteProc(LinqToDB.Data.DataConnection,System.String,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes command using <see cref="F:System.Data.CommandType.StoredProcedure"/> command type and returns number of affected records.
            Sets result values for output and reference parameters to corresponding parameters in <paramref name="parameters"/>.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text. This is caller's responsibility to properly escape procedure name.</param>
            <param name="parameters">Command parameters.</param>
            <returns>Number of records, affected by command execution.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.ExecuteProc(LinqToDB.Data.DataConnection,System.String,System.Object)">
            <summary>
            Executes command using <see cref="F:System.Data.CommandType.StoredProcedure"/> command type and returns number of affected records.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text. This is caller's responsibility to properly escape procedure name.</param>
            <param name="parameters">Command parameters. Supported values:
            <para> - <c>null</c> for command without parameters;</para>
            <para> - single <see cref="T:LinqToDB.Data.DataParameter"/> instance;</para>
            <para> - array of <see cref="T:LinqToDB.Data.DataParameter"/> parameters;</para>
            <para> - mapping class entity.</para>
            <para>Last case will convert all mapped columns to <see cref="T:LinqToDB.Data.DataParameter"/> instances using following logic:</para>
            <para> - if column is of <see cref="T:LinqToDB.Data.DataParameter"/> type, column value will be used. If parameter name (<see cref="P:LinqToDB.Data.DataParameter.Name"/>) is not set, column name will be used;</para>
            <para> - if converter from column type to <see cref="T:LinqToDB.Data.DataParameter"/> is defined in mapping schema, it will be used to create parameter with colum name passed to converter;</para>
            <para> - otherwise column value will be converted to <see cref="T:LinqToDB.Data.DataParameter"/> using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema.</para>
            </param>
            <returns>Number of records, affected by command execution.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.Execute(LinqToDB.Data.DataConnection,System.String,System.Object)">
            <summary>
            Executes command and returns number of affected records.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <param name="parameters">Command parameters. Supported values:
            <para> - <c>null</c> for command without parameters;</para>
            <para> - single <see cref="T:LinqToDB.Data.DataParameter"/> instance;</para>
            <para> - array of <see cref="T:LinqToDB.Data.DataParameter"/> parameters;</para>
            <para> - mapping class entity.</para>
            <para>Last case will convert all mapped columns to <see cref="T:LinqToDB.Data.DataParameter"/> instances using following logic:</para>
            <para> - if column is of <see cref="T:LinqToDB.Data.DataParameter"/> type, column value will be used. If parameter name (<see cref="P:LinqToDB.Data.DataParameter.Name"/>) is not set, column name will be used;</para>
            <para> - if converter from column type to <see cref="T:LinqToDB.Data.DataParameter"/> is defined in mapping schema, it will be used to create parameter with colum name passed to converter;</para>
            <para> - otherwise column value will be converted to <see cref="T:LinqToDB.Data.DataParameter"/> using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema.</para>
            </param>
            <returns>Number of records, affected by command execution.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.ExecuteAsync(LinqToDB.Data.DataConnection,System.String)">
            <summary>
            Executes command asynchronously and returns number of affected records.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <returns>Task with number of records, affected by command execution.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.ExecuteAsync(LinqToDB.Data.DataConnection,System.String,System.Threading.CancellationToken)">
            <summary>
            Executes command asynchronously and returns number of affected records.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Task with number of records, affected by command execution.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.ExecuteAsync(LinqToDB.Data.DataConnection,System.String,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes command asynchronously and returns number of affected records.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <param name="parameters">Command parameters.</param>
            <returns>Task with number of records, affected by command execution.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.ExecuteAsync(LinqToDB.Data.DataConnection,System.String,System.Threading.CancellationToken,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes command asynchronously and returns number of affected records.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <param name="parameters">Command parameters.</param>
            <returns>Task with number of records, affected by command execution.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.ExecuteAsync(LinqToDB.Data.DataConnection,System.String,System.Object)">
            <summary>
            Executes command asynchronously and returns number of affected records.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <param name="parameters">Command parameters. Supported values:
            <para> - <c>null</c> for command without parameters;</para>
            <para> - single <see cref="T:LinqToDB.Data.DataParameter"/> instance;</para>
            <para> - array of <see cref="T:LinqToDB.Data.DataParameter"/> parameters;</para>
            <para> - mapping class entity.</para>
            <para>Last case will convert all mapped columns to <see cref="T:LinqToDB.Data.DataParameter"/> instances using following logic:</para>
            <para> - if column is of <see cref="T:LinqToDB.Data.DataParameter"/> type, column value will be used. If parameter name (<see cref="P:LinqToDB.Data.DataParameter.Name"/>) is not set, column name will be used;</para>
            <para> - if converter from column type to <see cref="T:LinqToDB.Data.DataParameter"/> is defined in mapping schema, it will be used to create parameter with colum name passed to converter;</para>
            <para> - otherwise column value will be converted to <see cref="T:LinqToDB.Data.DataParameter"/> using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema.</para>
            </param>
            <returns>Task with number of records, affected by command execution.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.ExecuteAsync(LinqToDB.Data.DataConnection,System.String,System.Threading.CancellationToken,System.Object)">
            <summary>
            Executes command asynchronously and returns number of affected records.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <param name="parameters">Command parameters. Supported values:
            <para> - <c>null</c> for command without parameters;</para>
            <para> - single <see cref="T:LinqToDB.Data.DataParameter"/> instance;</para>
            <para> - array of <see cref="T:LinqToDB.Data.DataParameter"/> parameters;</para>
            <para> - mapping class entity.</para>
            <para>Last case will convert all mapped columns to <see cref="T:LinqToDB.Data.DataParameter"/> instances using following logic:</para>
            <para> - if column is of <see cref="T:LinqToDB.Data.DataParameter"/> type, column value will be used. If parameter name (<see cref="P:LinqToDB.Data.DataParameter.Name"/>) is not set, column name will be used;</para>
            <para> - if converter from column type to <see cref="T:LinqToDB.Data.DataParameter"/> is defined in mapping schema, it will be used to create parameter with colum name passed to converter;</para>
            <para> - otherwise column value will be converted to <see cref="T:LinqToDB.Data.DataParameter"/> using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema.</para>
            </param>
            <returns>Task with number of records, affected by command execution.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.ExecuteProcAsync(LinqToDB.Data.DataConnection,System.String,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes command using <see cref="F:System.Data.CommandType.StoredProcedure"/> command type asynchronously and returns number of affected records.
            Sets result values for output and reference parameters to corresponding parameters in <paramref name="parameters"/>.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text. This is caller's responsibility to properly escape procedure name.</param>
            <param name="parameters">Command parameters.</param>
            <returns>Task with number of records, affected by command execution.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.ExecuteProcAsync(LinqToDB.Data.DataConnection,System.String,System.Object)">
            <summary>
            Executes command using <see cref="F:System.Data.CommandType.StoredProcedure"/> command type asynchronously and returns number of affected records.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text. This is caller's responsibility to properly escape procedure name.</param>
            <param name="parameters">Command parameters. Supported values:
            <para> - <c>null</c> for command without parameters;</para>
            <para> - single <see cref="T:LinqToDB.Data.DataParameter"/> instance;</para>
            <para> - array of <see cref="T:LinqToDB.Data.DataParameter"/> parameters;</para>
            <para> - mapping class entity.</para>
            <para>Last case will convert all mapped columns to <see cref="T:LinqToDB.Data.DataParameter"/> instances using following logic:</para>
            <para> - if column is of <see cref="T:LinqToDB.Data.DataParameter"/> type, column value will be used. If parameter name (<see cref="P:LinqToDB.Data.DataParameter.Name"/>) is not set, column name will be used;</para>
            <para> - if converter from column type to <see cref="T:LinqToDB.Data.DataParameter"/> is defined in mapping schema, it will be used to create parameter with colum name passed to converter;</para>
            <para> - otherwise column value will be converted to <see cref="T:LinqToDB.Data.DataParameter"/> using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema.</para>
            </param>
            <returns>Task with number of records, affected by command execution.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.ExecuteProcAsync(LinqToDB.Data.DataConnection,System.String,System.Threading.CancellationToken,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes command using <see cref="F:System.Data.CommandType.StoredProcedure"/> command type asynchronously and returns number of affected records.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text. This is caller's responsibility to properly escape procedure name.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <param name="parameters">Command parameters.</param>
            <returns>Task with number of records, affected by command execution.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.ExecuteProcAsync(LinqToDB.Data.DataConnection,System.String,System.Threading.CancellationToken,System.Object)">
            <summary>
            Executes command using <see cref="F:System.Data.CommandType.StoredProcedure"/> command type asynchronously and returns number of affected records.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text. This is caller's responsibility to properly escape procedure name.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <param name="parameters">Command parameters. Supported values:
            <para> - <c>null</c> for command without parameters;</para>
            <para> - single <see cref="T:LinqToDB.Data.DataParameter"/> instance;</para>
            <para> - array of <see cref="T:LinqToDB.Data.DataParameter"/> parameters;</para>
            <para> - mapping class entity.</para>
            <para>Last case will convert all mapped columns to <see cref="T:LinqToDB.Data.DataParameter"/> instances using following logic:</para>
            <para> - if column is of <see cref="T:LinqToDB.Data.DataParameter"/> type, column value will be used. If parameter name (<see cref="P:LinqToDB.Data.DataParameter.Name"/>) is not set, column name will be used;</para>
            <para> - if converter from column type to <see cref="T:LinqToDB.Data.DataParameter"/> is defined in mapping schema, it will be used to create parameter with colum name passed to converter;</para>
            <para> - otherwise column value will be converted to <see cref="T:LinqToDB.Data.DataParameter"/> using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema.</para>
            </param>
            <returns>Task with number of records, affected by command execution.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.Execute``1(LinqToDB.Data.DataConnection,System.String)">
            <summary>
            Executes command and returns single value.
            </summary>
            <typeparam name="T">Resulting value type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <returns>Resulting value.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.Execute``1(LinqToDB.Data.DataConnection,System.String,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes command and returns single value.
            </summary>
            <typeparam name="T">Resulting value type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <param name="parameters">Command parameters.</param>
            <returns>Resulting value.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.Execute``1(LinqToDB.Data.DataConnection,System.String,LinqToDB.Data.DataParameter)">
            <summary>
            Executes command and returns single value.
            </summary>
            <typeparam name="T">Resulting value type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <param name="parameter">Command parameter.</param>
            <returns>Resulting value.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.Execute``1(LinqToDB.Data.DataConnection,System.String,System.Object)">
            <summary>
            Executes command and returns single value.
            </summary>
            <typeparam name="T">Resulting value type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <param name="parameters">Command parameters. Supported values:
            <para> - <c>null</c> for command without parameters;</para>
            <para> - single <see cref="T:LinqToDB.Data.DataParameter"/> instance;</para>
            <para> - array of <see cref="T:LinqToDB.Data.DataParameter"/> parameters;</para>
            <para> - mapping class entity.</para>
            <para>Last case will convert all mapped columns to <see cref="T:LinqToDB.Data.DataParameter"/> instances using following logic:</para>
            <para> - if column is of <see cref="T:LinqToDB.Data.DataParameter"/> type, column value will be used. If parameter name (<see cref="P:LinqToDB.Data.DataParameter.Name"/>) is not set, column name will be used;</para>
            <para> - if converter from column type to <see cref="T:LinqToDB.Data.DataParameter"/> is defined in mapping schema, it will be used to create parameter with colum name passed to converter;</para>
            <para> - otherwise column value will be converted to <see cref="T:LinqToDB.Data.DataParameter"/> using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema.</para>
            </param>
            <returns>Resulting value.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.ExecuteProc``1(LinqToDB.Data.DataConnection,System.String,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes command using <see cref="F:System.Data.CommandType.StoredProcedure"/> command type and returns single value.
            Sets result values for output and reference parameters to corresponding parameters in <paramref name="parameters"/>.
            </summary>
            <typeparam name="T">Resulting value type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text. This is caller's responsibility to properly escape procedure name.</param>
            <param name="parameters">Command parameters.</param>
            <returns>Resulting value.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.ExecuteProc``1(LinqToDB.Data.DataConnection,System.String,System.Object)">
            <summary>
            Executes command using <see cref="F:System.Data.CommandType.StoredProcedure"/> command type and returns single value.
            </summary>
            <typeparam name="T">Resulting value type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text. This is caller's responsibility to properly escape procedure name.</param>
            <param name="parameters">Command parameters. Supported values:
            <para> - <c>null</c> for command without parameters;</para>
            <para> - single <see cref="T:LinqToDB.Data.DataParameter"/> instance;</para>
            <para> - array of <see cref="T:LinqToDB.Data.DataParameter"/> parameters;</para>
            <para> - mapping class entity.</para>
            <para>Last case will convert all mapped columns to <see cref="T:LinqToDB.Data.DataParameter"/> instances using following logic:</para>
            <para> - if column is of <see cref="T:LinqToDB.Data.DataParameter"/> type, column value will be used. If parameter name (<see cref="P:LinqToDB.Data.DataParameter.Name"/>) is not set, column name will be used;</para>
            <para> - if converter from column type to <see cref="T:LinqToDB.Data.DataParameter"/> is defined in mapping schema, it will be used to create parameter with colum name passed to converter;</para>
            <para> - otherwise column value will be converted to <see cref="T:LinqToDB.Data.DataParameter"/> using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema.</para>
            </param>
            <returns>Resulting value.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.ExecuteAsync``1(LinqToDB.Data.DataConnection,System.String)">
            <summary>
            Executes command asynchronously and returns single value.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <typeparam name="T">Resulting value type.</typeparam>
            <returns>Task with resulting value.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.ExecuteAsync``1(LinqToDB.Data.DataConnection,System.String,System.Threading.CancellationToken)">
            <summary>
            Executes command asynchronously and returns single value.
            </summary>
            <typeparam name="T">Resulting value type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Task with resulting value.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.ExecuteAsync``1(LinqToDB.Data.DataConnection,System.String,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes command asynchronously and returns single value.
            </summary>
            <typeparam name="T">Resulting value type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <param name="parameters">Command parameters.</param>
            <returns>Task with resulting value.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.ExecuteAsync``1(LinqToDB.Data.DataConnection,System.String,System.Threading.CancellationToken,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes command asynchronously and returns single value.
            </summary>
            <typeparam name="T">Resulting value type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <param name="parameters">Command parameters.</param>
            <returns>Task with resulting value.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.ExecuteAsync``1(LinqToDB.Data.DataConnection,System.String,LinqToDB.Data.DataParameter)">
            <summary>
            Executes command asynchronously and returns single value.
            </summary>
            <typeparam name="T">Resulting value type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <param name="parameter">Command parameter.</param>
            <returns>Task with resulting value.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.ExecuteAsync``1(LinqToDB.Data.DataConnection,System.String,LinqToDB.Data.DataParameter,System.Threading.CancellationToken)">
            <summary>
            Executes command asynchronously and returns single value.
            </summary>
            <typeparam name="T">Resulting value type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <param name="parameter">Command parameter.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Task with resulting value.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.ExecuteAsync``1(LinqToDB.Data.DataConnection,System.String,System.Object)">
            <summary>
            Executes command asynchronously and returns single value.
            </summary>
            <typeparam name="T">Resulting value type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <param name="parameters">Command parameters. Supported values:
            <para> - <c>null</c> for command without parameters;</para>
            <para> - single <see cref="T:LinqToDB.Data.DataParameter"/> instance;</para>
            <para> - array of <see cref="T:LinqToDB.Data.DataParameter"/> parameters;</para>
            <para> - mapping class entity.</para>
            <para>Last case will convert all mapped columns to <see cref="T:LinqToDB.Data.DataParameter"/> instances using following logic:</para>
            <para> - if column is of <see cref="T:LinqToDB.Data.DataParameter"/> type, column value will be used. If parameter name (<see cref="P:LinqToDB.Data.DataParameter.Name"/>) is not set, column name will be used;</para>
            <para> - if converter from column type to <see cref="T:LinqToDB.Data.DataParameter"/> is defined in mapping schema, it will be used to create parameter with colum name passed to converter;</para>
            <para> - otherwise column value will be converted to <see cref="T:LinqToDB.Data.DataParameter"/> using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema.</para>
            </param>
            <returns>Task with resulting value.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.ExecuteAsync``1(LinqToDB.Data.DataConnection,System.String,System.Threading.CancellationToken,System.Object)">
            <summary>
            Executes command asynchronously and returns single value.
            </summary>
            <typeparam name="T">Resulting value type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <param name="parameters">Command parameters. Supported values:
            <para> - <c>null</c> for command without parameters;</para>
            <para> - single <see cref="T:LinqToDB.Data.DataParameter"/> instance;</para>
            <para> - array of <see cref="T:LinqToDB.Data.DataParameter"/> parameters;</para>
            <para> - mapping class entity.</para>
            <para>Last case will convert all mapped columns to <see cref="T:LinqToDB.Data.DataParameter"/> instances using following logic:</para>
            <para> - if column is of <see cref="T:LinqToDB.Data.DataParameter"/> type, column value will be used. If parameter name (<see cref="P:LinqToDB.Data.DataParameter.Name"/>) is not set, column name will be used;</para>
            <para> - if converter from column type to <see cref="T:LinqToDB.Data.DataParameter"/> is defined in mapping schema, it will be used to create parameter with colum name passed to converter;</para>
            <para> - otherwise column value will be converted to <see cref="T:LinqToDB.Data.DataParameter"/> using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema.</para>
            </param>
            <returns>Task with resulting value.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.ExecuteProcAsync``1(LinqToDB.Data.DataConnection,System.String,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes command using <see cref="F:System.Data.CommandType.StoredProcedure"/> command type asynchronously and returns single value.
            Sets result values for output and reference parameters to corresponding parameters in <paramref name="parameters"/>.
            </summary>
            <typeparam name="T">Resulting value type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text. This is caller's responsibility to properly escape procedure name.</param>
            <param name="parameters">Command parameters.</param>
            <returns>Task with resulting value.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.ExecuteProcAsync``1(LinqToDB.Data.DataConnection,System.String,System.Object)">
            <summary>
            Executes command using <see cref="F:System.Data.CommandType.StoredProcedure"/> command type asynchronously and returns single value.
            </summary>
            <typeparam name="T">Resulting value type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text. This is caller's responsibility to properly escape procedure name.</param>
            <param name="parameters">Command parameters. Supported values:
            <para> - <c>null</c> for command without parameters;</para>
            <para> - single <see cref="T:LinqToDB.Data.DataParameter"/> instance;</para>
            <para> - array of <see cref="T:LinqToDB.Data.DataParameter"/> parameters;</para>
            <para> - mapping class entity.</para>
            <para>Last case will convert all mapped columns to <see cref="T:LinqToDB.Data.DataParameter"/> instances using following logic:</para>
            <para> - if column is of <see cref="T:LinqToDB.Data.DataParameter"/> type, column value will be used. If parameter name (<see cref="P:LinqToDB.Data.DataParameter.Name"/>) is not set, column name will be used;</para>
            <para> - if converter from column type to <see cref="T:LinqToDB.Data.DataParameter"/> is defined in mapping schema, it will be used to create parameter with colum name passed to converter;</para>
            <para> - otherwise column value will be converted to <see cref="T:LinqToDB.Data.DataParameter"/> using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema.</para>
            </param>
            <returns>Task with resulting value.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.ExecuteProcAsync``1(LinqToDB.Data.DataConnection,System.String,System.Threading.CancellationToken,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes command using <see cref="F:System.Data.CommandType.StoredProcedure"/> command type asynchronously and returns single value.
            </summary>
            <typeparam name="T">Resulting value type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text. This is caller's responsibility to properly escape procedure name.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <param name="parameters">Command parameters.</param>
            <returns>Resulting value.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.ExecuteProcAsync``1(LinqToDB.Data.DataConnection,System.String,System.Threading.CancellationToken,System.Object)">
            <summary>
            Executes command using <see cref="F:System.Data.CommandType.StoredProcedure"/> command type asynchronously and returns single value.
            </summary>
            <typeparam name="T">Resulting value type.</typeparam>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text. This is caller's responsibility to properly escape procedure name.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <param name="parameters">Command parameters. Supported values:
            <para> - <c>null</c> for command without parameters;</para>
            <para> - single <see cref="T:LinqToDB.Data.DataParameter"/> instance;</para>
            <para> - array of <see cref="T:LinqToDB.Data.DataParameter"/> parameters;</para>
            <para> - mapping class entity.</para>
            <para>Last case will convert all mapped columns to <see cref="T:LinqToDB.Data.DataParameter"/> instances using following logic:</para>
            <para> - if column is of <see cref="T:LinqToDB.Data.DataParameter"/> type, column value will be used. If parameter name (<see cref="P:LinqToDB.Data.DataParameter.Name"/>) is not set, column name will be used;</para>
            <para> - if converter from column type to <see cref="T:LinqToDB.Data.DataParameter"/> is defined in mapping schema, it will be used to create parameter with colum name passed to converter;</para>
            <para> - otherwise column value will be converted to <see cref="T:LinqToDB.Data.DataParameter"/> using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema.</para>
            </param>
            <returns>Resulting value.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.ExecuteReader(LinqToDB.Data.DataConnection,System.String)">
            <summary>
            Executes command and returns data reader instance.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <returns>Data reader object.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.ExecuteReader(LinqToDB.Data.DataConnection,System.String,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes command and returns data reader instance.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <param name="parameters">Command parameters.</param>
            <returns>Data reader object.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.ExecuteReader(LinqToDB.Data.DataConnection,System.String,LinqToDB.Data.DataParameter)">
            <summary>
            Executes command and returns data reader instance.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <param name="parameter">Command parameter.</param>
            <returns>Data reader object.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.ExecuteReader(LinqToDB.Data.DataConnection,System.String,System.Object)">
            <summary>
            Executes command and returns data reader instance.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <param name="parameters">Command parameters. Supported values:
            <para> - <c>null</c> for command without parameters;</para>
            <para> - single <see cref="T:LinqToDB.Data.DataParameter"/> instance;</para>
            <para> - array of <see cref="T:LinqToDB.Data.DataParameter"/> parameters;</para>
            <para> - mapping class entity.</para>
            <para>Last case will convert all mapped columns to <see cref="T:LinqToDB.Data.DataParameter"/> instances using following logic:</para>
            <para> - if column is of <see cref="T:LinqToDB.Data.DataParameter"/> type, column value will be used. If parameter name (<see cref="P:LinqToDB.Data.DataParameter.Name"/>) is not set, column name will be used;</para>
            <para> - if converter from column type to <see cref="T:LinqToDB.Data.DataParameter"/> is defined in mapping schema, it will be used to create parameter with colum name passed to converter;</para>
            <para> - otherwise column value will be converted to <see cref="T:LinqToDB.Data.DataParameter"/> using column name as parameter name and column value will be converted to parameter value using conversion, defined by mapping schema.</para>
            </param>
            <returns>Data reader object.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.ExecuteReader(LinqToDB.Data.DataConnection,System.String,System.Data.CommandType,System.Data.CommandBehavior,LinqToDB.Data.DataParameter[])">
            <summary>
            Executes command and returns data reader instance.
            </summary>
            <param name="connection">Database connection.</param>
            <param name="sql">Command text.</param>
            <param name="commandType">Type of command. See <see cref="T:System.Data.CommandType"/> for all supported types.</param>
            <param name="commandBehavior">Command behavior flags. See <see cref="T:System.Data.CommandBehavior"/> for more details.</param>
            <param name="parameters">Command parameters.</param>
            <returns>Data reader object.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.BulkCopy``1(LinqToDB.Data.DataConnection,LinqToDB.Data.BulkCopyOptions,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Performs bulk insert operation.
            </summary>
            <typeparam name="T">Mapping type of inserted record.</typeparam>
            <param name="dataConnection">Database connection.</param>
            <param name="options">Operation options.</param>
            <param name="source">Records to insert.</param>
            <returns>Bulk insert operation status.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.BulkCopy``1(LinqToDB.Data.DataConnection,System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Performs bulk insert operation.
            </summary>
            <typeparam name="T">Mapping type of inserted record.</typeparam>
            <param name="dataConnection">Database connection.</param>
            <param name="maxBatchSize">Number of rows in each batch. At the end of each batch, the rows in the batch are sent to the server. </param>
            <param name="source">Records to insert.</param>
            <returns>Bulk insert operation status.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.BulkCopy``1(LinqToDB.Data.DataConnection,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Performs bulk insert operation.
            </summary>
            <typeparam name="T">Mapping type of inserted record.</typeparam>
            <param name="dataConnection">Database connection.</param>
            <param name="source">Records to insert.</param>
            <returns>Bulk insert operation status.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.BulkCopy``1(LinqToDB.ITable{``0},LinqToDB.Data.BulkCopyOptions,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Performs bulk insert operation into table specified in <paramref name="options"/> parameter or into table, identified by <paramref name="table"/>.
            </summary>
            <typeparam name="T">Mapping type of inserted record.</typeparam>
            <param name="table">Target table.</param>
            <param name="options">Operation options.</param>
            <param name="source">Records to insert.</param>
            <returns>Bulk insert operation status.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.BulkCopy``1(LinqToDB.ITable{``0},System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Performs bulk insert operation into table, identified by <paramref name="table"/>.
            </summary>
            <typeparam name="T">Mapping type of inserted record.</typeparam>
            <param name="table">Target table.</param>
            <param name="maxBatchSize">Number of rows in each batch. At the end of each batch, the rows in the batch are sent to the server. </param>
            <param name="source">Records to insert.</param>
            <returns>Bulk insert operation status.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.BulkCopy``1(LinqToDB.ITable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Performs bulk insert operation into table, identified by <paramref name="table"/>.
            </summary>
            <typeparam name="T">Mapping type of inserted record.</typeparam>
            <param name="table">Target table.</param>
            <param name="source">Records to insert.</param>
            <returns>Bulk insert operation status.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.BulkCopyAsync``1(LinqToDB.Data.DataConnection,LinqToDB.Data.BulkCopyOptions,System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously performs bulk insert operation.
            </summary>
            <typeparam name="T">Mapping type of inserted record.</typeparam>
            <param name="dataConnection">Database connection.</param>
            <param name="options">Operation options.</param>
            <param name="source">Records to insert.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Task with bulk insert operation status.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.BulkCopyAsync``1(LinqToDB.Data.DataConnection,System.Int32,System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously performs bulk insert operation.
            </summary>
            <typeparam name="T">Mapping type of inserted record.</typeparam>
            <param name="dataConnection">Database connection.</param>
            <param name="maxBatchSize">Number of rows in each batch. At the end of each batch, the rows in the batch are sent to the server. </param>
            <param name="source">Records to insert.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Task with bulk insert operation status.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.BulkCopyAsync``1(LinqToDB.Data.DataConnection,System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously performs bulk insert operation.
            </summary>
            <typeparam name="T">Mapping type of inserted record.</typeparam>
            <param name="dataConnection">Database connection.</param>
            <param name="source">Records to insert.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Task with bulk insert operation status.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.BulkCopyAsync``1(LinqToDB.ITable{``0},LinqToDB.Data.BulkCopyOptions,System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously performs bulk insert operation into table specified in <paramref name="options"/> parameter or into table, identified by <paramref name="table"/>.
            </summary>
            <typeparam name="T">Mapping type of inserted record.</typeparam>
            <param name="table">Target table.</param>
            <param name="options">Operation options.</param>
            <param name="source">Records to insert.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Task with bulk insert operation status.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.BulkCopyAsync``1(LinqToDB.ITable{``0},System.Int32,System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously performs bulk insert operation into table, identified by <paramref name="table"/>.
            </summary>
            <typeparam name="T">Mapping type of inserted record.</typeparam>
            <param name="table">Target table.</param>
            <param name="maxBatchSize">Number of rows in each batch. At the end of each batch, the rows in the batch are sent to the server. </param>
            <param name="source">Records to insert.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Task with bulk insert operation status.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.BulkCopyAsync``1(LinqToDB.ITable{``0},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously performs bulk insert operation into table, identified by <paramref name="table"/>.
            </summary>
            <typeparam name="T">Mapping type of inserted record.</typeparam>
            <param name="table">Target table.</param>
            <param name="source">Records to insert.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Task with bulk insert operation status.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.BulkCopyAsync``1(LinqToDB.Data.DataConnection,LinqToDB.Data.BulkCopyOptions,System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously performs bulk insert operation.
            </summary>
            <typeparam name="T">Mapping type of inserted record.</typeparam>
            <param name="dataConnection">Database connection.</param>
            <param name="options">Operation options.</param>
            <param name="source">Records to insert.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Task with bulk insert operation status.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.BulkCopyAsync``1(LinqToDB.Data.DataConnection,System.Int32,System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously performs bulk insert operation.
            </summary>
            <typeparam name="T">Mapping type of inserted record.</typeparam>
            <param name="dataConnection">Database connection.</param>
            <param name="maxBatchSize">Number of rows in each batch. At the end of each batch, the rows in the batch are sent to the server. </param>
            <param name="source">Records to insert.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Task with bulk insert operation status.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.BulkCopyAsync``1(LinqToDB.Data.DataConnection,System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously performs bulk insert operation.
            </summary>
            <typeparam name="T">Mapping type of inserted record.</typeparam>
            <param name="dataConnection">Database connection.</param>
            <param name="source">Records to insert.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Task with bulk insert operation status.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.BulkCopyAsync``1(LinqToDB.ITable{``0},LinqToDB.Data.BulkCopyOptions,System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously performs bulk insert operation into table specified in <paramref name="options"/> parameter or into table, identified by <paramref name="table"/>.
            </summary>
            <typeparam name="T">Mapping type of inserted record.</typeparam>
            <param name="table">Target table.</param>
            <param name="options">Operation options.</param>
            <param name="source">Records to insert.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Task with bulk insert operation status.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.BulkCopyAsync``1(LinqToDB.ITable{``0},System.Int32,System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously performs bulk insert operation into table, identified by <paramref name="table"/>.
            </summary>
            <typeparam name="T">Mapping type of inserted record.</typeparam>
            <param name="table">Target table.</param>
            <param name="maxBatchSize">Number of rows in each batch. At the end of each batch, the rows in the batch are sent to the server. </param>
            <param name="source">Records to insert.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Task with bulk insert operation status.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.BulkCopyAsync``1(LinqToDB.ITable{``0},System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously performs bulk insert operation into table, identified by <paramref name="table"/>.
            </summary>
            <typeparam name="T">Mapping type of inserted record.</typeparam>
            <param name="table">Target table.</param>
            <param name="source">Records to insert.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Task with bulk insert operation status.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.Merge``1(LinqToDB.Data.DataConnection,System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.String,System.String,System.String,LinqToDB.TableOptions)">
            <summary>
            Executes following merge operations in specified order:
            - Update
            - Insert
            - Delete By Source.
            Method could be used only with SQL Server.
            </summary>
            <typeparam name="T">Target table mapping class.</typeparam>
            <param name="dataConnection">Data connection instance.</param>
            <param name="source">Source data to merge into target table. All source data will be loaded from server for command generation.</param>
            <param name="predicate">Filter, applied both to source and delete operation. Required.</param>
            <param name="tableName">Optional target table name.</param>
            <param name="databaseName">Optional target table's database name.</param>
            <param name="schemaName">Optional target table's schema name.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <returns>Returns number of affected target records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.Merge``1(LinqToDB.Data.DataConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String,System.String,LinqToDB.TableOptions)">
            <summary>
            Executes following merge operations in specified order:
            - Update
            - Insert
            - Delete By Source.
            Method could be used only with SQL Server.
            </summary>
            <typeparam name="T">Target table mapping class.</typeparam>
            <param name="dataConnection">Data connection instance.</param>
            <param name="predicate">Filter, applied to delete operation. Optional.</param>
            <param name="source">Source data to merge into target table.</param>
            <param name="tableName">Optional target table name.</param>
            <param name="databaseName">Optional target table's database name.</param>
            <param name="schemaName">Optional target table's schema name.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <returns>Returns number of affected target records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.Merge``1(LinqToDB.Data.DataConnection,System.Boolean,System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String,System.String,LinqToDB.TableOptions)">
            <summary>
            Executes following merge operations in specified order:
            - Update
            - Insert
            - Delete By Source (optional).
            If delete operation enabled by <paramref name="delete"/> parameter - method could be used only for with Server.
            </summary>
            <typeparam name="T">Target table mapping class.</typeparam>
            <param name="dataConnection">Data connection instance.</param>
            <param name="delete">If true, merge command will include delete by source operation without condition.</param>
            <param name="source">Source data to merge into target table.</param>
            <param name="tableName">Optional target table name.</param>
            <param name="databaseName">Optional target table's database name.</param>
            <param name="schemaName">Optional target table's schema name.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <returns>Returns number of affected target records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.Merge``1(LinqToDB.Data.DataConnection,System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String,System.String,LinqToDB.TableOptions)">
            <summary>
            Executes following merge operations in specified order:
            - Update
            - Insert.
            </summary>
            <typeparam name="T">Target table mapping class.</typeparam>
            <param name="dataConnection">Data connection instance.</param>
            <param name="source">Source data to merge into target table.</param>
            <param name="tableName">Optional target table name.</param>
            <param name="databaseName">Optional target table's database name.</param>
            <param name="schemaName">Optional target table's schema name.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <returns>Returns number of affected target records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.Merge``1(LinqToDB.ITable{``0},System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.String,System.String,System.String,LinqToDB.TableOptions)">
            <summary>
            Executes following merge operations in specified order:
            - Update
            - Insert
            - Delete By Source.
            Method could be used only with SQL Server.
            </summary>
            <typeparam name="T">Target table mapping class.</typeparam>
            <param name="table">Target table.</param>
            <param name="source">Source data to merge into target table. All source data will be loaded from server for command generation.</param>
            <param name="predicate">Filter, applied both to source and delete operation. Required.</param>
            <param name="tableName">Optional target table name.</param>
            <param name="databaseName">Optional target table's database name.</param>
            <param name="schemaName">Optional target table's schema name.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <returns>Returns number of affected target records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.Merge``1(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String,System.String,LinqToDB.TableOptions)">
            <summary>
            Executes following merge operations in specified order:
            - Update
            - Insert
            - Delete By Source.
            Method could be used only with SQL Server.
            </summary>
            <typeparam name="T">Target table mapping class.</typeparam>
            <param name="table">Target table.</param>
            <param name="predicate">Filter, applied to delete operation. Optional.</param>
            <param name="source">Source data to merge into target table.</param>
            <param name="tableName">Optional target table name.</param>
            <param name="databaseName">Optional target table's database name.</param>
            <param name="schemaName">Optional target table's schema name.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <returns>Returns number of affected target records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.Merge``1(LinqToDB.ITable{``0},System.Boolean,System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String,System.String,LinqToDB.TableOptions)">
            <summary>
            Executes following merge operations in specified order:
            - Update
            - Insert
            - Delete By Source (optional).
            If delete operation enabled by <paramref name="delete"/> parameter - method could be used only with SQL Server.
            </summary>
            <typeparam name="T">Target table mapping class.</typeparam>
            <param name="table">Target table.</param>
            <param name="delete">If true, merge command will include delete by source operation without condition.</param>
            <param name="source">Source data to merge into target table.</param>
            <param name="tableName">Optional target table name.</param>
            <param name="databaseName">Optional target table's database name.</param>
            <param name="schemaName">Optional target table's schema name.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <returns>Returns number of affected target records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.Merge``1(LinqToDB.ITable{``0},System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String,System.String,LinqToDB.TableOptions)">
            <summary>
            Executes following merge operations in specified order:
            - Update
            - Insert.
            </summary>
            <typeparam name="T">Target table mapping class.</typeparam>
            <param name="table">Target table.</param>
            <param name="source">Source data to merge into target table.</param>
            <param name="tableName">Optional target table name.</param>
            <param name="databaseName">Optional target table's database name.</param>
            <param name="schemaName">Optional target table's schema name.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <returns>Returns number of affected target records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.MergeAsync``1(LinqToDB.Data.DataConnection,System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.String,System.String,System.String,LinqToDB.TableOptions,System.Threading.CancellationToken)">
            <summary>
            Executes following merge operations asynchronously in specified order:
            - Update
            - Insert
            - Delete By Source.
            Method could be used only with SQL Server.
            </summary>
            <typeparam name="T">Target table mapping class.</typeparam>
            <param name="dataConnection">Data connection instance.</param>
            <param name="source">Source data to merge into target table. All source data will be loaded from server for command generation.</param>
            <param name="predicate">Filter, applied both to source and delete operation. Required.</param>
            <param name="tableName">Optional target table name.</param>
            <param name="databaseName">Optional target table's database name.</param>
            <param name="schemaName">Optional target table's schema name.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <param name="cancellationToken">Optional asynchronous operation cancellation token.</param>
            <returns>Task with number of affected target records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.MergeAsync``1(LinqToDB.Data.DataConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String,System.String,LinqToDB.TableOptions,System.Threading.CancellationToken)">
            <summary>
            Executes following merge operations asynchronously in specified order:
            - Update
            - Insert
            - Delete By Source.
            Method could be used only with SQL Server.
            </summary>
            <typeparam name="T">Target table mapping class.</typeparam>
            <param name="dataConnection">Data connection instance.</param>
            <param name="predicate">Filter, applied to delete operation. Optional.</param>
            <param name="source">Source data to merge into target table.</param>
            <param name="tableName">Optional target table name.</param>
            <param name="databaseName">Optional target table's database name.</param>
            <param name="schemaName">Optional target table's schema name.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <param name="cancellationToken">Optional asynchronous operation cancellation token.</param>
            <returns>Task with number of affected target records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.MergeAsync``1(LinqToDB.Data.DataConnection,System.Boolean,System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String,System.String,LinqToDB.TableOptions,System.Threading.CancellationToken)">
            <summary>
            Executes following merge operations asynchronously in specified order:
            - Update
            - Insert
            - Delete By Source (optional).
            If delete operation enabled by <paramref name="delete"/> parameter - method could be used only with SQL Server.
            </summary>
            <typeparam name="T">Target table mapping class.</typeparam>
            <param name="dataConnection">Data connection instance.</param>
            <param name="delete">If true, merge command will include delete by source operation without condition.</param>
            <param name="source">Source data to merge into target table.</param>
            <param name="tableName">Optional target table name.</param>
            <param name="databaseName">Optional target table's database name.</param>
            <param name="schemaName">Optional target table's schema name.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <param name="cancellationToken">Optional asynchronous operation cancellation token.</param>
            <returns>Task with number of affected target records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.MergeAsync``1(LinqToDB.Data.DataConnection,System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String,System.String,LinqToDB.TableOptions,System.Threading.CancellationToken)">
            <summary>
            Executes following merge operations asynchronously in specified order:
            - Update
            - Insert.
            </summary>
            <typeparam name="T">Target table mapping class.</typeparam>
            <param name="dataConnection">Data connection instance.</param>
            <param name="source">Source data to merge into target table.</param>
            <param name="tableName">Optional target table name.</param>
            <param name="databaseName">Optional target table's database name.</param>
            <param name="schemaName">Optional target table's schema name.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <param name="cancellationToken">Optional asynchronous operation cancellation token.</param>
            <returns>Task with number of affected target records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.MergeAsync``1(LinqToDB.ITable{``0},System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.String,System.String,System.String,LinqToDB.TableOptions,System.Threading.CancellationToken)">
            <summary>
            Executes following merge operations asynchronously in specified order:
            - Update
            - Insert
            - Delete By Source.
            Method could be used only with SQL Server.
            </summary>
            <typeparam name="T">Target table mapping class.</typeparam>
            <param name="table">Target table.</param>
            <param name="source">Source data to merge into target table. All source data will be loaded from server for command generation.</param>
            <param name="predicate">Filter, applied both to source and delete operation. Required.</param>
            <param name="tableName">Optional target table name.</param>
            <param name="databaseName">Optional target table's database name.</param>
            <param name="schemaName">Optional target table's schema name.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <param name="cancellationToken">Optional asynchronous operation cancellation token.</param>
            <returns>Task with number of affected target records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.MergeAsync``1(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String,System.String,LinqToDB.TableOptions,System.Threading.CancellationToken)">
            <summary>
            Executes following merge operations asynchronously in specified order:
            - Update
            - Insert
            - Delete By Source.
            Method could be used only with SQL Server.
            </summary>
            <typeparam name="T">Target table mapping class.</typeparam>
            <param name="table">Target table.</param>
            <param name="predicate">Filter, applied to delete operation. Optional.</param>
            <param name="source">Source data to merge into target table.</param>
            <param name="tableName">Optional target table name.</param>
            <param name="databaseName">Optional target table's database name.</param>
            <param name="schemaName">Optional target table's schema name.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <param name="cancellationToken">Optional asynchronous operation cancellation token.</param>
            <returns>Task with number of affected target records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.MergeAsync``1(LinqToDB.ITable{``0},System.Boolean,System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String,System.String,LinqToDB.TableOptions,System.Threading.CancellationToken)">
            <summary>
            Executes following merge operations asynchronously in specified order:
            - Update
            - Insert
            - Delete By Source (optional).
            If delete operation enabled by <paramref name="delete"/> parameter - method could be used only with SQL Server.
            </summary>
            <typeparam name="T">Target table mapping class.</typeparam>
            <param name="table">Target table.</param>
            <param name="delete">If true, merge command will include delete by source operation without condition.</param>
            <param name="source">Source data to merge into target table.</param>
            <param name="tableName">Optional target table name.</param>
            <param name="databaseName">Optional target table's database name.</param>
            <param name="schemaName">Optional target table's schema name.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <param name="cancellationToken">Optional asynchronous operation cancellation token.</param>
            <returns>Task with number of affected target records.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionExtensions.MergeAsync``1(LinqToDB.ITable{``0},System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String,System.String,LinqToDB.TableOptions,System.Threading.CancellationToken)">
            <summary>
            Executes following merge operations asynchronously in specified order:
            - Update
            - Insert.
            </summary>
            <typeparam name="T">Target table mapping class.</typeparam>
            <param name="table">Target table.</param>
            <param name="source">Source data to merge into target table.</param>
            <param name="tableName">Optional target table name.</param>
            <param name="databaseName">Optional target table's database name.</param>
            <param name="schemaName">Optional target table's schema name.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Table options. See <see cref="T:LinqToDB.TableOptions"/> enum for support information per provider.</param>
            <param name="cancellationToken">Optional asynchronous operation cancellation token.</param>
            <returns>Task with number of affected target records.</returns>
        </member>
        <member name="T:LinqToDB.Data.DataConnectionTransaction">
            <summary>
            Data connection transaction controller.
            </summary>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionTransaction.#ctor(LinqToDB.Data.DataConnection)">
            <summary>
            Creates new transaction controller for data connection.
            </summary>
            <param name="dataConnection">Data connection instance.</param>
        </member>
        <member name="P:LinqToDB.Data.DataConnectionTransaction.DataConnection">
            <summary>
            Returns associated data connection instance.
            </summary>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionTransaction.Commit">
            <summary>
            Commits current transaction for data connection.
            </summary>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionTransaction.Rollback">
            <summary>
            Rolllbacks current transaction for data connection.
            </summary>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionTransaction.CommitAsync(System.Threading.CancellationToken)">
            <summary>
            Commits current transaction for data connection asynchonously.
            If underlying provider doesn't support asynchonous commit, it will be performed synchonously.
            </summary>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Asynchronous operation completion task.</returns>
        </member>
        <member name="M:LinqToDB.Data.DataConnectionTransaction.RollbackAsync(System.Threading.CancellationToken)">
            <summary>
            Rollbacks current transaction for data connection asynchonously.
            If underlying provider doesn't support asynchonous rollback, it will be performed synchonously.
            </summary>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Asynchronous operation completion task.</returns>
        </member>
        <member name="P:LinqToDB.Data.DataParameter.DataType">
            <summary>
            Gets or sets the <see cref="T:LinqToDB.DataType"/> of the parameter.
            </summary>
            <returns>
            One of the <see cref="T:LinqToDB.DataType"/> values. The default is <see cref="F:LinqToDB.DataType.Undefined"/>.
            </returns>
        </member>
        <member name="P:LinqToDB.Data.DataParameter.DbType">
            <summary>
            Gets or sets Database Type name of the parameter.
            </summary>
            <returns>
            Name of Database Type or empty string.
            </returns>
        </member>
        <member name="P:LinqToDB.Data.DataParameter.Direction">
            <summary>
            Gets or sets a value indicating whether the parameter is input-only, output-only, bidirectional, or a stored procedure return value parameter.
            </summary>
            <returns>
            One of the <see cref="T:System.Data.ParameterDirection"/> values. The default is Input.
            </returns>
        </member>
        <member name="P:LinqToDB.Data.DataParameter.Name">
            <summary>
            Gets or sets the name of the <see cref="T:LinqToDB.Data.DataParameter"/>.
            </summary>
            <returns>
            The name of the <see cref="T:LinqToDB.Data.DataParameter"/>. The default is an empty string.
            </returns>
        </member>
        <member name="P:LinqToDB.Data.DataParameter.Precision">
            <summary>
            Gets or sets precision for parameter type.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.DataParameter.Scale">
            <summary>
            Gets or sets scale for parameter type.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.DataParameter.Size">
             <summary>
             Gets or sets the maximum size, in bytes, of the data within the column.
             </summary>
            
             <returns>
             The maximum size, in bytes, of the data within the column. The default value is inferred from the parameter value.
             </returns>
        </member>
        <member name="P:LinqToDB.Data.DataParameter.Value">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that is the value of the parameter. The default value is null.
            </returns>
        </member>
        <member name="P:LinqToDB.Data.DataParameter.Output">
            <summary>
            Provider's parameter instance for out, in-out, return parameters.
            Could be used to read parameter value for complex types like Oracle's BFile.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.DataParameter.DbDataType">
            <summary>
            Shortcut to get/set full-type. Used internally.
            </summary>
        </member>
        <member name="T:LinqToDB.Data.DataReaderWrapper">
            <summary>
            Disposable wrapper over <see cref="T:System.Data.Common.DbDataReader"/> instance, which properly disposes associated objects.
            </summary>
        </member>
        <member name="M:LinqToDB.Data.RetryPolicy.IRetryPolicy.Execute``1(System.Func{``0})">
            <summary>
                Executes the specified operation and returns the result.
            </summary>
            <param name="operation">
                A delegate representing an executable operation that returns the result of type <typeparamref name="TResult" />.
            </param>
            <typeparam name="TResult"> The return type of <paramref name="operation" />. </typeparam>
            <returns> The result from the operation. </returns>
        </member>
        <member name="M:LinqToDB.Data.RetryPolicy.IRetryPolicy.ExecuteAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
                Executes the specified asynchronous operation and returns the result.
            </summary>
            <param name="operation">
                A function that returns a started task of type <typeparamref name="TResult" />.
            </param>
            <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
            <typeparam name="TResult">
              The result type of the <see cref="T:System.Threading.Tasks.Task`1" /> returned by <paramref name="operation" />.
            </typeparam>
            <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
        </member>
        <member name="M:LinqToDB.Data.RetryPolicy.RetryPolicyBase.#ctor(System.Int32,System.TimeSpan)">
            <summary>
            Creates a new instance of <see cref="T:LinqToDB.Data.RetryPolicy.RetryPolicyBase" />.
            </summary>
            <param name="maxRetryCount">The maximum number of retry attempts. </param>
            <param name="maxRetryDelay">The maximum delay in milliseconds between retries. </param>
        </member>
        <member name="P:LinqToDB.Data.RetryPolicy.RetryPolicyBase.ExceptionsEncountered">
            <summary>
            The list of exceptions that caused the operation to be retried so far.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.RetryPolicy.RetryPolicyBase.Random">
            <summary>
            A pseudo-random number generater that can be used to vary the delay between retries.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.RetryPolicy.RetryPolicyBase.MaxRetryCount">
            <summary>
            The maximum number of retry attempts.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.RetryPolicy.RetryPolicyBase.MaxRetryDelay">
            <summary>
            The maximum delay in milliseconds between retries.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.RetryPolicy.RetryPolicyBase.Suspended">
            <summary>
            Indicates whether the strategy is suspended. The strategy is typically suspending while executing to avoid
            recursive execution from nested operations.
            </summary>
        </member>
        <member name="M:LinqToDB.Data.RetryPolicy.RetryPolicyBase.Execute``1(System.Func{``0})">
            <summary>
            Executes the specified operation and returns the result.
            </summary>
            <param name="operation">
            A delegate representing an executable operation that returns the result of type <typeparamref name="TResult" />.
            </param>
            <typeparam name="TResult">The return type of <paramref name="operation" />.</typeparam>
            <returns>The result from the operation. </returns>
        </member>
        <member name="M:LinqToDB.Data.RetryPolicy.RetryPolicyBase.ExecuteAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
                Executes the specified asynchronous operation and returns the result.
            </summary>
            <param name="operation">
                A function that returns a started task of type <typeparamref name="TResult" />.
            </param>
            <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
            <typeparam name="TResult"> The result type of the <see cref="T:System.Threading.Tasks.Task`1" /> returned by <paramref name="operation" />. </typeparam>
            <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
        </member>
        <member name="M:LinqToDB.Data.RetryPolicy.RetryPolicyBase.OnFirstExecution">
            <summary>
                Method called before the first operation execution
            </summary>
        </member>
        <member name="M:LinqToDB.Data.RetryPolicy.RetryPolicyBase.OnRetry">
            <summary>
                Method called before retrying the operation execution
            </summary>
        </member>
        <member name="M:LinqToDB.Data.RetryPolicy.RetryPolicyBase.GetNextDelay(System.Exception)">
            <summary>
                Determines whether the operation should be retried and the delay before the next attempt.
            </summary>
            <param name="lastException"> The exception thrown during the last execution attempt. </param>
            <returns>
                Returns the delay indicating how long to wait for before the next execution attempt if the operation should be retried;
                <c>null</c> otherwise
            </returns>
        </member>
        <member name="M:LinqToDB.Data.RetryPolicy.RetryPolicyBase.ShouldRetryOn(System.Exception)">
            <summary>
                Determines whether the specified exception represents a transient failure that can be compensated by a retry.
            </summary>
            <param name="exception"> The exception object to be verified. </param>
            <returns>
                <c>true</c> if the specified exception is considered as transient, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:LinqToDB.Data.TraceInfo">
            <summary>
            Tracing information for the <see cref="P:LinqToDB.Data.TraceInfo.DataConnection"/> events.
            </summary>
        </member>
        <member name="M:LinqToDB.Data.TraceInfo.#ctor(LinqToDB.Data.DataConnection,LinqToDB.Data.TraceInfoStep,LinqToDB.Data.TraceOperation,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LinqToDB.Data.TraceInfo"/> class.
            </summary>
            <param name="dataConnection"><see cref="P:LinqToDB.Data.TraceInfo.DataConnection"/> instance, generated this trace.</param>
            <param name="traceInfoStep">Trace execution step.</param>
            <param name="operation">Operation associated with trace event.</param>
            <param name="isAsync">Flag indicating whether operation was executed asynchronously.</param>
        </member>
        <member name="P:LinqToDB.Data.TraceInfo.TraceInfoStep">
            <summary>
            Gets the tracing execution step, <see cref="P:LinqToDB.Data.TraceInfo.TraceInfoStep"/>.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.TraceInfo.Operation">
            <summary>
            Gets the operation, for which tracing event generated, <see cref="T:LinqToDB.Data.TraceOperation"/>.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.TraceInfo.TraceLevel">
            <summary>
            Gets or sets the tracing detail level, <see cref="P:LinqToDB.Data.TraceInfo.TraceLevel"/>.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.TraceInfo.DataConnection">
            <summary>
            Gets or sets the <see cref="P:LinqToDB.Data.TraceInfo.DataConnection"/> that produced the tracing event.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.TraceInfo.Command">
            <summary>
            Gets or sets the <see cref="T:System.Data.Common.DbCommand"/> associated with the tracing event.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.TraceInfo.StartTime">
            <summary>
            Gets or sets the starting <see cref="T:System.DateTime"/> of the operation (UTC).
            </summary>
        </member>
        <member name="P:LinqToDB.Data.TraceInfo.ExecutionTime">
            <summary>
            Gets or sets the execution time for <see cref="F:LinqToDB.Data.TraceInfoStep.AfterExecute"/>,
            <see cref="F:LinqToDB.Data.TraceInfoStep.Completed"/>, and <see cref="F:LinqToDB.Data.TraceInfoStep.Error"/> steps.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.TraceInfo.RecordsAffected">
            <summary>
            Gets or sets the number of rows affected by the command
            or the number of rows produced by the <see cref="T:LinqToDB.Data.DataReader"/>.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.TraceInfo.Exception">
            <summary>
            Gets or sets the <see cref="P:LinqToDB.Data.TraceInfo.Exception"/> for <see cref="F:LinqToDB.Data.TraceInfoStep.Error"/> step.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.TraceInfo.CommandText">
            <summary>
            Gets or sets the text of the command.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.TraceInfo.MapperExpression">
            <summary>
            Gets or sets the expression used by the results mapper.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.TraceInfo.IsAsync">
            <summary>
            Gets a flag indicating whether operation was executed asynchronously.
            </summary>
        </member>
        <member name="P:LinqToDB.Data.TraceInfo.SqlText">
            <summary>
            Gets the formatted SQL text of the command.
            </summary>
        </member>
        <member name="T:LinqToDB.Data.TraceInfoStep">
            <summary>
            Tracing steps for the <see cref="T:LinqToDB.Data.DataConnection"/> trace events.
            </summary>
            <seealso cref="T:LinqToDB.Data.TraceInfo"/>
        </member>
        <member name="F:LinqToDB.Data.TraceInfoStep.BeforeExecute">
            <summary>
            Occurs before executing a command.
            </summary>
        </member>
        <member name="F:LinqToDB.Data.TraceInfoStep.AfterExecute">
            <summary>
            Occurs after a command is executed.
            </summary>
        </member>
        <member name="F:LinqToDB.Data.TraceInfoStep.Error">
            <summary>
            Occurs when an error happened during the command execution.
            </summary>
        </member>
        <member name="F:LinqToDB.Data.TraceInfoStep.MapperCreated">
            <summary>
            Occurs when the result mapper was created.
            </summary>
        </member>
        <member name="F:LinqToDB.Data.TraceInfoStep.Completed">
            <summary>
            Occurs when an operation is completed and its associated <see cref="T:LinqToDB.Data.DataReader"/> is closed.
            </summary>
        </member>
        <member name="T:LinqToDB.Data.TraceOperation">
            <summary>
            Type of operation associated with specific trace event.
            </summary>
            <seealso cref="T:LinqToDB.Data.TraceInfo"/>
        </member>
        <member name="F:LinqToDB.Data.TraceOperation.ExecuteNonQuery">
            <summary>
            <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery"/> or <see cref="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)"/> operation.
            See also <seealso cref="P:LinqToDB.Data.TraceInfo.IsAsync"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.Data.TraceOperation.ExecuteReader">
            <summary>
            <see cref="M:System.Data.Common.DbCommand.ExecuteReader(System.Data.CommandBehavior)"/> or <see cref="M:System.Data.Common.DbCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)"/> operation.
            See also <seealso cref="P:LinqToDB.Data.TraceInfo.IsAsync"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.Data.TraceOperation.ExecuteScalar">
            <summary>
            <see cref="M:System.Data.Common.DbCommand.ExecuteScalar"/> or <see cref="M:System.Data.Common.DbCommand.ExecuteScalarAsync(System.Threading.CancellationToken)"/> operation.
            See also <seealso cref="P:LinqToDB.Data.TraceInfo.IsAsync"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.Data.TraceOperation.BulkCopy">
            <summary>
            <see cref="M:LinqToDB.Data.DataConnectionExtensions.BulkCopy``1(LinqToDB.ITable{``0},System.Collections.Generic.IEnumerable{``0})"/> or <see cref="M:LinqToDB.Data.DataConnectionExtensions.BulkCopyAsync``1(LinqToDB.Data.DataConnection,System.Int32,System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)"/> operation.
            See also <seealso cref="P:LinqToDB.Data.TraceInfo.IsAsync"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.Data.TraceOperation.Open">
            <summary>
            <see cref="M:System.Data.Common.DbConnection.Open"/> or <see cref="M:System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)"/> operation.
            See also <seealso cref="P:LinqToDB.Data.TraceInfo.IsAsync"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.Data.TraceOperation.BuildMapping">
            <summary>
            Mapper build operation.
            See also <seealso cref="P:LinqToDB.Data.TraceInfo.IsAsync"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.Data.TraceOperation.DisposeQuery">
            <summary>
            Query runner disposal operation.
            See also <seealso cref="P:LinqToDB.Data.TraceInfo.IsAsync"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.Data.TraceOperation.BeginTransaction">
            <summary>
            <see cref="M:LinqToDB.Data.DataConnection.BeginTransaction"/> or <see cref="M:LinqToDB.Data.DataConnection.BeginTransaction(System.Data.IsolationLevel)"/> or
            <see cref="M:LinqToDB.Data.DataConnection.BeginTransactionAsync(System.Threading.CancellationToken)"/> or <see cref="M:LinqToDB.Data.DataConnection.BeginTransactionAsync(System.Data.IsolationLevel,System.Threading.CancellationToken)"/>operation.
            See also <seealso cref="P:LinqToDB.Data.TraceInfo.IsAsync"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.Data.TraceOperation.CommitTransaction">
            <summary>
            <see cref="M:LinqToDB.Data.DataConnection.CommitTransaction"/> or <see cref="M:LinqToDB.Data.DataConnection.CommitTransactionAsync(System.Threading.CancellationToken)"/> operation.
            See also <seealso cref="P:LinqToDB.Data.TraceInfo.IsAsync"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.Data.TraceOperation.RollbackTransaction">
            <summary>
            <see cref="M:LinqToDB.Data.DataConnection.RollbackTransaction"/> or <see cref="M:LinqToDB.Data.DataConnection.RollbackTransactionAsync(System.Threading.CancellationToken)"/> operation.
            See also <seealso cref="P:LinqToDB.Data.TraceInfo.IsAsync"/>.
            </summary>
        </member>
        <member name="T:LinqToDB.InsertColumnFilter`1">
            <summary>
            Defines signature for column filter for insert operations.
            </summary>
            <typeparam name="T">Entity type.</typeparam>
            <param name="entity">Entity instance.</param>
            <param name="column">Descriptor of column.</param>
            <returns><c>true</c>, if column should be included in operation and <c>false</c> otherwise.</returns>
        </member>
        <member name="T:LinqToDB.UpdateColumnFilter`1">
            <summary>
            Defines signature for column filter for update operations.
            </summary>
            <typeparam name="T">Entity type.</typeparam>
            <param name="entity">Entity instance.</param>
            <param name="column">Descriptor of column.</param>
            <returns><c>true</c>, if column should be included in operation and <c>false</c> otherwise.</returns>
        </member>
        <member name="T:LinqToDB.InsertOrUpdateColumnFilter`1">
            <summary>
            Defines signature for column filter for insert or update/replace operations.
            </summary>
            <typeparam name="T">Entity type.</typeparam>
            <param name="entity">Entity instance.</param>
            <param name="column">Descriptor of column.</param>
            <param name="isInsert">If <c>true</c>, filter applied to insert operation, otherwise to update/replace.</param>
            <returns><c>true</c>, if column should be included in operation and <c>false</c> otherwise.</returns>
        </member>
        <member name="T:LinqToDB.ExpressionMethodAttribute">
             <summary>
             When applied to method or property, tells linq2db to replace them in queryable LINQ expression with another expression,
             returned by method, specified in this attribute.
            
             Requirements to expression method:
             <para>
             - expression method should be in the same class and replaced property of method;
             - method could be private.
             </para>
             <para>
             When applied to property, expression:
             - method should return function expression with the same return type as property type;
             - expression method could take up to two parameters in any order - current object parameter and database connection context object.
             </para>
             <para>
             When applied to method:
             - expression method should return function expression with the same return type as method return type;
             - method cannot have void return type;
             - parameters in expression method should go in the same order as in substituted method;
             - expression could take method instance object as first parameter;
             - expression could take database connection context object as last parameter;
             - last method parameters could be ommited from expression method, but only if you don't add database connection context parameter.
             </para>
             </summary>
        </member>
        <member name="M:LinqToDB.ExpressionMethodAttribute.#ctor(System.String)">
            <summary>
            Creates instance of attribute.
            </summary>
            <param name="methodName">Name of method in the same class that returns substitution expression.</param>
        </member>
        <member name="M:LinqToDB.ExpressionMethodAttribute.#ctor(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Creates instance of attribute.
            </summary>
            <param name="expression">Substitution expression.</param>
        </member>
        <member name="M:LinqToDB.ExpressionMethodAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates instance of attribute.
            </summary>
            <param name="configuration">Connection configuration, for which this attribute should be taken into account.</param>
            <param name="methodName">Name of method in the same class that returns substitution expression.</param>
        </member>
        <member name="P:LinqToDB.ExpressionMethodAttribute.Configuration">
            <summary>
            Mapping schema configuration name, for which this attribute should be taken into account.
            <see cref="T:LinqToDB.ProviderName"/> for standard names.
            Attributes with <c>null</c> or empty string <see cref="P:LinqToDB.ExpressionMethodAttribute.Configuration"/> value applied to all configurations (if no attribute found for current configuration).
            </summary>
        </member>
        <member name="P:LinqToDB.ExpressionMethodAttribute.MethodName">
            <summary>
            Name of method in the same class that returns substitution expression.
            </summary>
        </member>
        <member name="P:LinqToDB.ExpressionMethodAttribute.Expression">
            <summary>
            Substitution expression.
            </summary>
        </member>
        <member name="P:LinqToDB.ExpressionMethodAttribute.IsColumn">
            <summary>
            Gets or sets calculated column flag. When applied to property and set to <c>true</c>, Linq To DB will
            load data into property using expression during entity materialization.
            </summary>
        </member>
        <member name="P:LinqToDB.ExpressionMethodAttribute.Alias">
            <summary>
            Gets or sets alias for substitution expression.
            <remarks>
            Note that alias can be overriden by projection member name.
            </remarks>
            </summary>
        </member>
        <member name="M:LinqToDB.Expressions.ConvertFromDataReaderExpression.ColumnReader.RawValuePlaceholder">
            <summary>
            This method is used as placeholder, which will be replaced with raw value variable.
            </summary>
            <returns></returns>
        </member>
        <member name="T:LinqToDB.Expressions.ExpressionEqualityComparer">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:LinqToDB.Expressions.ExpressionEqualityComparer.GetHashCode(System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:LinqToDB.Expressions.ExpressionEqualityComparer.Equals(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:LinqToDB.Expressions.ExpressionEvaluator">
            <summary>
            Internal API.
            </summary>
        </member>
        <member name="M:LinqToDB.Expressions.ExpressionExtensions.GetDebugView(System.Linq.Expressions.Expression)">
            <summary>
            Gets the DebugView internal property value of provided expression.
            </summary>
            <param name="expression">Expression to get DebugView.</param>
            <returns>DebugView value.</returns>
        </member>
        <member name="M:LinqToDB.Expressions.ExpressionExtensions.GetCount``1(System.Linq.Expressions.Expression,``0,System.Func{``0,System.Linq.Expressions.Expression,System.Boolean})">
            <summary>
            Returns the total number of expression items which are matching the given.
            <paramref name="func"/>.
            </summary>
            <param name="expr">Expression-Tree which gets counted.</param>
            <param name="context">Expression-Tree visitor context.</param>
            <param name="func">Predicate which is used to test if the given expression should be counted.</param>
        </member>
        <member name="M:LinqToDB.Expressions.ExpressionExtensions.Visit``1(System.Linq.Expressions.Expression,``0,System.Action{``0,System.Linq.Expressions.Expression})">
            <summary>
            Calls the given <paramref name="func"/> for each child node of the <paramref name="expr"/>.
            </summary>
        </member>
        <member name="M:LinqToDB.Expressions.ExpressionExtensions.Visit``1(System.Linq.Expressions.Expression,``0,System.Func{``0,System.Linq.Expressions.Expression,System.Boolean})">
            <summary>
            Calls the given <paramref name="func"/> for each node of the <paramref name="expr"/>.
            If the <paramref name="func"/> returns false, no childs of the tested expression will be enumerated.
            </summary>
        </member>
        <member name="M:LinqToDB.Expressions.ExpressionExtensions.Find(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Enumerates the expression tree and returns the <paramref name="exprToFind"/> if it's
            contained within the <paramref name="expr"/>.
            </summary>
        </member>
        <member name="M:LinqToDB.Expressions.ExpressionExtensions.Find``1(System.Linq.Expressions.Expression,``0,System.Func{``0,System.Linq.Expressions.Expression,System.Boolean})">
            <summary>
            Enumerates the given <paramref name="expr"/> and returns the first sub-expression
            which matches the given <paramref name="func"/>. If no expression was found, null is returned.
            </summary>
        </member>
        <member name="M:LinqToDB.Expressions.ExpressionExtensions.GetBody(System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)">
            <summary>
            Returns the body of <paramref name="lambda"/> but replaces the first parameter of that
            lambda expression with the <paramref name="exprToReplaceParameter"/> expression.
            </summary>
        </member>
        <member name="M:LinqToDB.Expressions.ExpressionExtensions.GetBody(System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Returns the body of <paramref name="lambda"/> but replaces the first two parameters of
            that lambda expression with the given replace expressions.
            </summary>
        </member>
        <member name="M:LinqToDB.Expressions.ExpressionExtensions.GetBody(System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Returns the body of <paramref name="lambda"/> but replaces the first three parameters of
            that lambda expression with the given replace expressions.
            </summary>
        </member>
        <member name="M:LinqToDB.Expressions.ExpressionExtensions.Transform``1(System.Linq.Expressions.Expression,``0,System.Func{``0,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            Enumerates the expression tree of <paramref name="expr"/> and might
            replace expression with the returned value of the given <paramref name="func"/>.
            </summary>
            <returns>The modified expression.</returns>
        </member>
        <member name="M:LinqToDB.Expressions.ExpressionExtensions.Transform(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            Enumerates the expression tree of <paramref name="expr"/> and might
            replace expression with the returned value of the given <paramref name="func"/>.
            </summary>
            <returns>The modified expression.</returns>
        </member>
        <member name="M:LinqToDB.Expressions.ExpressionHelper.Field(System.Linq.Expressions.Expression,System.String)">
            <summary>
            Compared to <see cref="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)"/>, performs case-sensitive field search.
            </summary>
        </member>
        <member name="M:LinqToDB.Expressions.ExpressionHelper.Field(System.Type,System.String)">
            <summary>
            Compared to <see cref="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)"/>, performs case-sensitive field search and search
            only for static fields.
            </summary>
        </member>
        <member name="M:LinqToDB.Expressions.ExpressionHelper.Property(System.Linq.Expressions.Expression,System.String)">
            <summary>
            Compared to <see cref="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)"/>, performs case-sensitive property search.
            </summary>
        </member>
        <member name="M:LinqToDB.Expressions.ExpressionHelper.Property(System.Type,System.String)">
            <summary>
            Compared to <see cref="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)"/>, performs case-sensitive property search and search
            only for static properties.
            </summary>
        </member>
        <member name="M:LinqToDB.Expressions.ExpressionHelper.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
            <summary>
            Compared to <see cref="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)"/>, performs case-sensitive member search.
            </summary>
        </member>
        <member name="M:LinqToDB.Expressions.ExpressionHelper.PropertyOrField(System.Type,System.String,System.Boolean)">
            <summary>
            Compared to <see cref="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)"/>, performs case-sensitive member search.
            </summary>
        </member>
        <member name="T:LinqToDB.Expressions.ExpressionInstances">
            <summary>
            Contains pre-created instances of <see cref="T:System.Linq.Expressions.ConstantExpression"/> object for often used constants.
            Using those instances we avoid unnecessary allocations of same constant instances and avoid boxing for
            value constants (e.g. booleans, integers).
            </summary>
        </member>
        <member name="M:LinqToDB.Expressions.EqualsToVisitor.PrepareEqualsInfo(LinqToDB.IDataContext,System.Collections.Generic.IReadOnlyDictionary{System.Linq.Expressions.Expression,LinqToDB.Linq.QueryableAccessor},System.Collections.Generic.IReadOnlyDictionary{System.Reflection.MemberInfo,LinqToDB.Linq.QueryableMemberAccessor},System.Collections.Generic.IReadOnlyDictionary{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression},System.Boolean)">
            <summary>
            Creates reusable equality context.
            </summary>
        </member>
        <member name="M:LinqToDB.Expressions.FindVisitor`1.Create(`0,System.Func{`0,System.Linq.Expressions.Expression,System.Boolean})">
            <summary>
            Creates reusable find visitor for calls with same context.
            </summary>
        </member>
        <member name="M:LinqToDB.Expressions.FindVisitor`1.Create(System.Func{System.Linq.Expressions.Expression,System.Boolean})">
            <summary>
            Creates reusable static find visitor.
            </summary>
        </member>
        <member name="M:LinqToDB.Expressions.FindVisitor`1.#ctor(`0,System.Func{`0,System.Linq.Expressions.Expression,System.Boolean})">
            <summary>
            Creates contextful visitor instance. Such instances cannot be cached.
            </summary>
            <param name="context">Context for current visitor call.</param>
            <param name="func">Visit action.</param>
        </member>
        <member name="M:LinqToDB.Expressions.FindVisitor`1.#ctor(System.Func{System.Linq.Expressions.Expression,System.Boolean})">
            <summary>
            Creates context-less visitor instance. Such instances should be cached and reused by caller as they
            don't have per-call context but only if they use static actions.
            </summary>
            <param name="func">Visit action.</param>
        </member>
        <member name="M:LinqToDB.Expressions.TransformInfoVisitor`1.Create(System.Func{System.Linq.Expressions.Expression,LinqToDB.Expressions.TransformInfo})">
            <summary>
            Creates reusable static visitor.
            </summary>
        </member>
        <member name="M:LinqToDB.Expressions.TransformInfoVisitor`1.Create(`0,System.Func{`0,System.Linq.Expressions.Expression,LinqToDB.Expressions.TransformInfo})">
            <summary>
            Creates reusable visitor with static context.
            </summary>
        </member>
        <member name="M:LinqToDB.Expressions.TransformVisitor`1.Create(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            Creates reusable static visitor.
            </summary>
        </member>
        <member name="M:LinqToDB.Expressions.TransformVisitor`1.Create(`0,System.Func{`0,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            Creates reusable visitor with static context.
            </summary>
        </member>
        <member name="M:LinqToDB.Expressions.VisitActionVisitor`1.Create(System.Action{System.Linq.Expressions.Expression})">
            <summary>
            Creates reusable static visitor.
            </summary>
        </member>
        <member name="M:LinqToDB.Expressions.VisitActionVisitor`1.Create(`0,System.Action{`0,System.Linq.Expressions.Expression})">
            <summary>
            Creates reusable visitor with static context.
            </summary>
        </member>
        <member name="M:LinqToDB.Expressions.VisitFuncVisitor`1.Create(System.Func{System.Linq.Expressions.Expression,System.Boolean})">
            <summary>
            Creates reusable static visitor.
            </summary>
        </member>
        <member name="M:LinqToDB.Expressions.VisitFuncVisitor`1.Create(`0,System.Func{`0,System.Linq.Expressions.Expression,System.Boolean})">
            <summary>
            Creates reusable visitor with static context.
            </summary>
        </member>
        <member name="T:LinqToDB.Expressions.IGenericInfoProvider">
            <summary>
            Generic conversions provider.
            Implementation class must be generic, as type parameters will be used for conversion initialization in
            <see cref="M:LinqToDB.Expressions.IGenericInfoProvider.SetInfo(LinqToDB.Mapping.MappingSchema)"/> method.
            <example>
            <code>
            // this conversion provider adds conversion from IEnumerable&lt;T&gt; to ImmutableList&lt;T&gt; for specific T type parameter
            class EnumerableToImmutableListConvertProvider&lt;T&gt; : IGenericInfoProvider
            {
                public void SetInfo(MappingSchema mappingSchema)
                {
                    mappingSchema.SetConvertExpression&lt;IEnumerable&lt;T&gt;,ImmutableList&lt;T&gt;&gt;(
                        t =&gt; ImmutableList.Create(t.ToArray()));
                }
            }
            </code>
            </example>
            <see cref="M:LinqToDB.Mapping.MappingSchema.SetGenericConvertProvider(System.Type)"/> for more details.
            </summary>
        </member>
        <member name="M:LinqToDB.Expressions.IGenericInfoProvider.SetInfo(LinqToDB.Mapping.MappingSchema)">
            <summary>
            Implementation should use this method to provide conversions for generic types with type parameters, used
            to instantiate instance of current class.
            </summary>
            <param name="mappingSchema">Mapping schema, to which conversions should be added.</param>
        </member>
        <member name="T:LinqToDB.Expressions.InternalExtensions">
            <summary>
            Internal API.
            </summary>
        </member>
        <member name="M:LinqToDB.Expressions.InternalExtensions.GetLevelExpression(System.Linq.Expressions.Expression,LinqToDB.Mapping.MappingSchema,System.Int32)">
            <summary>
            Returns part of expression based on its level.
            </summary>
            <param name="expression">Base expression that needs decomposition.</param>
            <param name="mapping">Maping schema.</param>
            <param name="level">Level that should be to be extracted.</param>
            <returns>Exstracted expression.</returns>
            <example>
            This sample shows what method returns for expression [c.ParentId].
            <code>
            expression.GetLevelExpression(mapping, 0) == [c]
            expression.GetLevelExpression(mapping, 1) == [c.ParentId]
            </code>
            </example>
        </member>
        <member name="M:LinqToDB.Expressions.InternalExtensions.OptimizeExpression(System.Linq.Expressions.Expression,LinqToDB.Mapping.MappingSchema)">
            <summary>
            Optimizes expression context by evaluating constants and simplifying boolean operations.
            </summary>
            <param name="expression">Expression to optimize.</param>
            <returns>Optimized expression.</returns>
        </member>
        <member name="M:LinqToDB.Expressions.MemberHelper.GetMemberInfo(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Gets the member information from given lambda expression. <seealso cref="M:LinqToDB.Expressions.MemberHelper.GetMemberInfo(System.Linq.Expressions.Expression)" />
            </summary>
            <param name="func">The lambda expression.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Only simple, non-navigational, member names are supported in this context (e.g.: x =&gt; Sql.Property(x, \"SomeProperty\")).</exception>
        </member>
        <member name="M:LinqToDB.Expressions.MemberHelper.GetMemberInfoWithType(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Gets the member information with type from given lambda expression. <seealso cref="M:LinqToDB.Expressions.MemberHelper.GetMemberInfo(System.Linq.Expressions.Expression)" />
            </summary>
            <param name="func">The lambda expression.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Only simple, non-navigational, member names are supported in this context (e.g.: x =&gt; Sql.Property(x, \"SomeProperty\")).</exception>
        </member>
        <member name="M:LinqToDB.Expressions.MemberHelper.GetMemberInfo(System.Linq.Expressions.Expression)">
            <summary>
            Gets the member information from given expression.
            </summary>
            <remarks>
            Returns member information for given expressions, e.g.:
            <list type="bullet">
            <item><description>For: x =&gt; x.SomeProperty, returns MemberInfo of SomeProperty.</description></item>
            <item><description>For: x =&gt; x.SomeMethod(), returns MethodInfo of SomeMethod.</description></item>
            <item><description>For: x =&gt; new { X = x.Name }, return ConstructorInfo of anonymous type.</description></item>
            <item><description>For: x =&gt; Sql.Property&lt;int&gt;(x, "SomeProperty"), returns MemberInfo of "SomeProperty" if exists on type, otherwise returns DynamicColumnInfo for SomeProperty on given type.</description></item>
            </list>
            </remarks>
            <param name="expr">The expression.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Only simple, non-navigational, member names are supported in this context (e.g.: x =&gt; Sql.Property(x, \"SomeProperty\")).</exception>
        </member>
        <member name="M:LinqToDB.Expressions.MemberHelper.GetMemberInfoWithType(System.Linq.Expressions.Expression)">
            <summary>
            Gets the member information with type from given expression.
            </summary>
            <remarks>
            Returns member information for given expressions, e.g.:
            <list type="bullet">
            <item><description>For: x =&gt; x.SomeProperty, returns MemberInfo of SomeProperty.</description></item>
            <item><description>For: x =&gt; x.SomeMethod(), returns MethodInfo of SomeMethod.</description></item>
            <item><description>For: x =&gt; new { X = x.Name }, return ConstructorInfo of anonymous type.</description></item>
            <item><description>For: x =&gt; Sql.Property&lt;int&gt;(x, "SomeProperty"), returns MemberInfo of "SomeProperty" if exists on type, otherwise returns DynamicColumnInfo for SomeProperty on given type.</description></item>
            </list>
            </remarks>
            <param name="expr">The expression.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Only simple, non-navigational, member names are supported in this context (e.g.: x =&gt; Sql.Property(x, \"SomeProperty\")).</exception>
        </member>
        <member name="T:LinqToDB.Expressions.SkipIfConstantAttribute">
            <summary>
            Used to tell query expression comparer to skip method call argument comparison if it is constant.
            Method parameter parameterization should be also implemented in method builder.
            </summary>
        </member>
        <member name="T:LinqToDB.Expressions.SqlQueryDependentAttribute">
            <summary>
            Used for controlling query caching of custom SQL Functions.
            Parameter with this attribute will be evaluated on client side before generating SQL.
            </summary>
        </member>
        <member name="M:LinqToDB.Expressions.SqlQueryDependentAttribute.ObjectsEqual(System.Object,System.Object)">
            <summary>
            Compares two objects during expression tree comparison. Handles sequences also.
            Has to be overriden if specific comparison required.
            </summary>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <returns>Result of comparison</returns>
        </member>
        <member name="M:LinqToDB.Expressions.SqlQueryDependentAttribute.ExpressionsEqual``1(``0,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Func{``0,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean})">
            <summary>
            Compares two expressions during expression tree comparison.
            Has to be overriden if specific comparison required.
            </summary>
            <param name="context"></param>
            <param name="expr1"></param>
            <param name="expr2"></param>
            <param name="comparer">Default function for comparing expressions.</param>
            <returns>Result of comparison</returns>
        </member>
        <member name="M:LinqToDB.Expressions.SqlQueryDependentAttribute.PrepareForCache(System.Linq.Expressions.Expression)">
            <summary>
            Used for preparation method argument to cached expression value.
            </summary>
            <param name="expression">Expression for caching.</param>
            <returns>Ready to cache expression.</returns>
        </member>
        <member name="M:LinqToDB.Expressions.SqlQueryDependentAttribute.SplitExpression(System.Linq.Expressions.Expression)">
            <summary>
            Returns sub-expressions, if attribute applied to composite expression.
            Default (non-composite) implementation returns <paramref name="expression"/>.
            </summary>
            <param name="expression">Expression to split.</param>
            <returns>Passed expression of sub-expressions for composite expression.</returns>
        </member>
        <member name="T:LinqToDB.Expressions.SqlQueryDependentParamsAttribute">
            <summary>
            Used for controlling query caching of custom SQL Functions.
            Parameter with this attribute will be evaluated on client side before generating SQL.
            </summary>
        </member>
        <member name="T:LinqToDB.Expressions.TypeMapper">
            <summary>
            Implements typed mappings support for dynamically loaded types.
            </summary>
        </member>
        <member name="T:LinqToDB.Expressions.TypeWrapper">
            <summary>
            Implements base class for typed wrappers over provider-specific type.
            </summary>
        </member>
        <member name="P:LinqToDB.Expressions.TypeWrapper.instance_">
            <summary>
            Gets underlying provider-specific object, used by wrapper.
            </summary>
        </member>
        <member name="P:LinqToDB.Expressions.TypeWrapper.CompiledWrappers">
            <summary>
            Provides access to delegates, created from expressions, defined in wrapper class using
            following property and type mappings, configured for <see cref="T:LinqToDB.Expressions.TypeMapper"/>:
            <code>
            private static IEumerable&lt;T&gt; Wrappers { get; }
            </code>
            where T could be <see cref="T:System.Linq.Expressions.LambdaExpression"/> or <see>Tuple&lt;LambdaExpression, bool&gt;</see>.
            Boolean flag means that mapping expression compilation allowed to fail if it is set to <c>true</c>.
            This could be used to map optional API, that present only in specific versions of provider.
            If wrapper doesn't need any wrapper delegates, this property could be ommited.
            </summary>
        </member>
        <member name="M:LinqToDB.Expressions.TypeWrapper.#ctor">
            <summary>
            This constructor is never called and used only as base constructor for constructor signatures
            in child class.
            </summary>
        </member>
        <member name="M:LinqToDB.Expressions.TypeWrapper.#ctor(System.Object,System.Delegate[])">
            <summary>
            This is real constructor for wrapper class.
            </summary>
            <param name="instance">Instance of wrapped provider-specific type.</param>
            <param name="wrappers">Built delegates for wrapper to call base wrapped type functionality.</param>
        </member>
        <member name="M:LinqToDB.Expressions.TypeWrapper.PropertySetter``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Creates property setter expression from property getter.
            Limitation: property should have getter.
            </summary>
        </member>
        <member name="T:LinqToDB.Expressions.GenericTaskToTaskMapper">
            <summary>
            Converts <see cref="T:System.Threading.Tasks.Task`1"/> or ValueTask&lt;TResult&gt; to <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
        </member>
        <member name="M:LinqToDB.Extensions.ReflectionExtensions.GetMemberEx(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Returns <see cref="T:System.Reflection.MemberInfo"/> of <paramref name="type"/> described by <paramref name="memberInfo"/>
            It us useful when member's declared and reflected types are not the same.
            </summary>
            <remarks>This method searches only properties, fields and methods</remarks>
            <param name="type"><see cref="T:System.Type"/> to find member info</param>
            <param name="memberInfo"><see cref="T:System.Reflection.MemberInfo"/> </param>
            <returns><see cref="T:System.Reflection.MemberInfo"/> or null</returns>
        </member>
        <member name="M:LinqToDB.Extensions.ReflectionExtensions.GetMethodEx(System.Type,System.Type,System.String,System.Type[])">
            <summary>
            Gets method by name, input parameters and return type.
            Usefull for method overloads by return type, like op_Explicit/op_Implicit conversions.
            </summary>
        </member>
        <member name="M:LinqToDB.Extensions.ReflectionExtensions.GetMethodEx(System.Type,System.String,System.Int32,System.Type[])">
            <summary>
            Gets generic method.
            </summary>
        </member>
        <member name="M:LinqToDB.Extensions.ReflectionExtensions.IsSqlPropertyMethodEx(System.Reflection.MemberInfo)">
            <summary>
            Determines whether member info represent a Sql.Property method.
            </summary>
            <param name="memberInfo">The member information.</param>
            <returns>
              <c>true</c> if member info is Sql.Property method; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:LinqToDB.Extensions.ReflectionExtensions.IsDynamicColumnPropertyEx(System.Reflection.MemberInfo)">
            <summary>
            Determines whether member info is dynamic column property.
            </summary>
            <param name="memberInfo">The member information.</param>
            <returns>
              <c>true</c> if member info is dynamic column property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:LinqToDB.Extensions.ReflectionExtensions.GetAttributes``1(System.Type)">
            <summary>
            Returns an array of custom attributes applied to a type.
            </summary>
            <param name="type">A type instance.</param>
            <typeparam name="T">The type of attribute to search for.
            Only attributes that are assignable to this type are returned.</typeparam>
            <returns>An array of custom attributes applied to this type,
            or an array with zero (0) elements if no attributes have been applied.</returns>
        </member>
        <member name="M:LinqToDB.Extensions.ReflectionExtensions.GetFirstAttribute``1(System.Type)">
            <summary>
            Retrieves a custom attribute applied to a type.
            </summary>
            <param name="type">A type instance.</param>
            <typeparam name="T">The type of attribute to search for.
            Only attributes that are assignable to this type are returned.</typeparam>
            <returns>A reference to the first custom attribute of type attributeType
            that is applied to element, or null if there is no such attribute.</returns>
        </member>
        <member name="M:LinqToDB.Extensions.ReflectionExtensions.IsNullable(System.Type)">
            <summary>
            Returns true, if type is <see cref="T:System.Nullable`1"/> type.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> instance. </param>
            <returns><c>true</c>, if <paramref name="type"/> represents <see cref="T:System.Nullable`1"/> type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LinqToDB.Extensions.ReflectionExtensions.ToUnderlying(System.Type)">
            <summary>
            Returns the underlying type argument of the specified type.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> instance. </param>
            <returns><list>
            <item>The type argument of the type parameter,
            if the type parameter is a closed generic nullable type.</item>
            <item>The underlying Type if the type parameter is an enum type.</item>
            <item>Otherwise, the type itself.</item>
            </list>
            </returns>
        </member>
        <member name="M:LinqToDB.Extensions.ReflectionExtensions.AsNullable(System.Type)">
            <summary>
            Wraps type into <see cref="T:System.Nullable`1"/> class.
            </summary>
            <param name="type">Value type to wrap. Must be value type (except <see cref="T:System.Nullable`1"/> itself).</param>
            <returns>Type, wrapped by <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:LinqToDB.Extensions.ReflectionExtensions.IsSameOrParentOf(System.Type,System.Type)">
            <summary>
            Determines whether the specified types are considered equal.
            </summary>
            <param name="parent">A <see cref="T:System.Type"/> instance. </param>
            <param name="child">A type possible derived from the <c>parent</c> type</param>
            <returns>True, when an object instance of the type <c>child</c>
            can be used as an object of the type <c>parent</c>; otherwise, false.</returns>
            <remarks>Note that nullable types does not have a parent-child relation to it's underlying type.
            For example, the 'int?' type (nullable int) and the 'int' type
            aren't a parent and it's child.</remarks>
        </member>
        <member name="M:LinqToDB.Extensions.ReflectionExtensions.IsSubClassOf(System.Type,System.Type)">
            <summary>
            Determines whether the <paramref name="type"/> derives from the specified <paramref name="check"/>.
            </summary>
            <remarks>
            This method also returns false if <paramref name="type"/> and the <paramref name="check"/> are equal.
            </remarks>
            <param name="type">The type to test.</param>
            <param name="check">The type to compare with. </param>
            <returns>
            true if the <paramref name="type"/> derives from <paramref name="check"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:LinqToDB.Extensions.ReflectionExtensions.GetListItemType(System.Collections.IEnumerable)">
            <summary>
             Gets the Type of a list item.
            </summary>
             <param name="list">A <see cref="T:System.Object"/> instance. </param>
            <returns>The Type instance that represents the exact runtime type of a list item.</returns>
        </member>
        <member name="M:LinqToDB.Extensions.ReflectionExtensions.GetListItemType(System.Type)">
            <summary>
             Gets the Type of a list item.
            </summary>
             <param name="listType">A <see cref="T:System.Type"/> instance. </param>
            <returns>The Type instance that represents the exact runtime type of a list item.</returns>
        </member>
        <member name="M:LinqToDB.Extensions.ReflectionExtensions.IsScalar(System.Type,System.Boolean)">
            <summary>
            Gets a value indicating whether a type can be used as a db primitive.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> instance. </param>
            <param name="checkArrayElementType">True if needed to check element type for arrays</param>
            <returns> True, if the type parameter is a primitive type; otherwise, False.</returns>
            <remarks><see cref="T:System.String"/>. <see cref="T:System.IO.Stream"/>.
            <see cref="T:System.Xml.XmlReader"/>. <see cref="T:System.Xml.XmlDocument"/>. are specially handled by the library
            and, therefore, can be treated as scalar types.</remarks>
        </member>
        <member name="M:LinqToDB.Extensions.ReflectionExtensions.GetGenericArguments(System.Type,System.Type)">
            <summary>
             Returns an array of Type objects that represent the type arguments
             of a generic type or the type parameters of a generic type definition.
            </summary>
             <param name="type">A <see cref="T:System.Type"/> instance.</param>
            <param name="baseType">Non generic base type.</param>
            <returns>An array of Type objects that represent the type arguments
             of a generic type. Returns an empty array if the current type is not a generic type.</returns>
        </member>
        <member name="T:LinqToDB.Extensions.ValueExtensions">
            <summary>
            Contains data manipulation helpers (e.g. for use in query parameters).
            </summary>
        </member>
        <member name="T:LinqToDB.DataContextExtensions">
            <summary>
            Internal data context helpers.
            </summary>
        </member>
        <member name="T:LinqToDB.IDataContext">
            <summary>
            Database connection abstraction interface.
            </summary>
        </member>
        <member name="P:LinqToDB.IDataContext.ContextName">
            <summary>
            Provider identifier.
            </summary>
        </member>
        <member name="P:LinqToDB.IDataContext.CreateSqlProvider">
            <summary>
            Gets SQL builder service factory method for current context data provider.
            </summary>
        </member>
        <member name="P:LinqToDB.IDataContext.GetSqlOptimizer">
            <summary>
            Gets SQL optimizer service factory method for current context data provider.
            </summary>
        </member>
        <member name="P:LinqToDB.IDataContext.SqlProviderFlags">
            <summary>
            Gets SQL support flags for current context data provider.
            </summary>
        </member>
        <member name="P:LinqToDB.IDataContext.SupportedTableOptions">
            <summary>
            Gets supported table options for current context data provider.
            </summary>
        </member>
        <member name="P:LinqToDB.IDataContext.DataReaderType">
            <summary>
            Gets data reader implementation type for current context data provider.
            </summary>
        </member>
        <member name="P:LinqToDB.IDataContext.MappingSchema">
            <summary>
            Gets mapping schema, used for current context.
            </summary>
        </member>
        <member name="P:LinqToDB.IDataContext.InlineParameters">
            <summary>
            Gets or sets option to force inline parameter values as literals into command text. If parameter inlining not supported
            for specific value type, it will be used as parameter.
            </summary>
        </member>
        <member name="P:LinqToDB.IDataContext.QueryHints">
            <summary>
            Gets list of query hints (writable collection), that will be used for all queries, executed using current context.
            </summary>
        </member>
        <member name="P:LinqToDB.IDataContext.NextQueryHints">
            <summary>
            Gets list of query hints (writable collection), that will be used only for next query, executed using current context.
            </summary>
        </member>
        <member name="P:LinqToDB.IDataContext.CloseAfterUse">
            <summary>
            Gets or sets flag to close context after query execution or leave it open.
            </summary>
        </member>
        <member name="M:LinqToDB.IDataContext.GetReaderExpression(System.Data.Common.DbDataReader,System.Int32,System.Linq.Expressions.Expression,System.Type)">
            <summary>
            Returns column value reader expression.
            </summary>
            <param name="reader">Data reader instance.</param>
            <param name="idx">Column index.</param>
            <param name="readerExpression">Data reader accessor expression.</param>
            <param name="toType">Expected value type.</param>
            <returns>Column read expression.</returns>
        </member>
        <member name="M:LinqToDB.IDataContext.IsDBNullAllowed(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            Returns true, of data reader column could contain <see cref="T:System.DBNull"/> value.
            </summary>
            <param name="reader">Data reader instance.</param>
            <param name="idx">Column index.</param>
            <returns><c>true</c> or <c>null</c> if column could contain <see cref="T:System.DBNull"/>.</returns>
        </member>
        <member name="M:LinqToDB.IDataContext.Clone(System.Boolean)">
            <summary>
            Clones current context.
            </summary>
            <returns>Cloned context.</returns>
        </member>
        <member name="M:LinqToDB.IDataContext.Close">
            <summary>
            Closes context connection and disposes underlying resources.
            </summary>
        </member>
        <member name="M:LinqToDB.IDataContext.CloseAsync">
            <summary>
            Closes context connection and disposes underlying resources.
            </summary>
        </member>
        <member name="M:LinqToDB.IDataContext.GetQueryRunner(LinqToDB.Linq.Query,System.Int32,System.Linq.Expressions.Expression,System.Object[],System.Object[])">
            <summary>
            Returns query runner service for current context.
            </summary>
            <param name="query">Query batch object.</param>
            <param name="queryNumber">Index of query in query batch.</param>
            <param name="expression">Query results mapping expression.</param>
            <param name="parameters">Query parameters.</param>
            <param name="preambles">Query preambles</param>
            <returns>Query runner service.</returns>
        </member>
        <member name="M:LinqToDB.IDataContext.AddInterceptor(LinqToDB.Interceptors.IInterceptor)">
            <summary>
            Adds interceptor instance to context.
            </summary>
            <param name="interceptor">Interceptor.</param>
        </member>
        <member name="T:LinqToDB.IExtensionsAdapter">
            <summary>
            Interface to override default implementation of LINQ To DB async operations.
            </summary>
        </member>
        <member name="T:LinqToDB.ILoadWithQueryable`2">
            <summary>
            Provides support for queryable LoadWith/ThenLoad chaining operators.
            </summary>
            <typeparam name="TEntity">The entity type.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
        </member>
        <member name="T:LinqToDB.Interceptors.CommandEventData">
            <summary>
            Event arguments for <see cref="T:LinqToDB.Interceptors.ICommandInterceptor"/> events.
            </summary>
        </member>
        <member name="P:LinqToDB.Interceptors.CommandEventData.DataConnection">
            <summary>
            Gets data connection associated with event.
            </summary>
        </member>
        <member name="T:LinqToDB.Interceptors.ConnectionEventData">
            <summary>
            Event arguments for <see cref="T:LinqToDB.Interceptors.IConnectionInterceptor"/> events.
            </summary>
        </member>
        <member name="P:LinqToDB.Interceptors.ConnectionEventData.DataConnection">
            <summary>
            Gets data connection associated with event.
            </summary>
        </member>
        <member name="T:LinqToDB.Interceptors.DataContextEventData">
            <summary>
            Event arguments for <see cref="T:LinqToDB.Interceptors.IDataContextInterceptor"/> events.
            </summary>
        </member>
        <member name="P:LinqToDB.Interceptors.DataContextEventData.Context">
            <summary>
            Gets data context, associated with event.
            </summary>
        </member>
        <member name="T:LinqToDB.Interceptors.EntityCreatedEventData">
            <summary>
            Event arguments for <see cref="M:LinqToDB.Interceptors.IEntityServiceInterceptor.EntityCreated(LinqToDB.Interceptors.EntityCreatedEventData,System.Object)"/> event.
            </summary>
        </member>
        <member name="P:LinqToDB.Interceptors.EntityCreatedEventData.Context">
            <summary>
            Gets data context, associated with event.
            </summary>
        </member>
        <member name="P:LinqToDB.Interceptors.EntityCreatedEventData.TableOptions">
            <summary>
            Gets entity table options.
            </summary>
        </member>
        <member name="P:LinqToDB.Interceptors.EntityCreatedEventData.TableName">
            <summary>
            Gets entity table name.
            </summary>
        </member>
        <member name="P:LinqToDB.Interceptors.EntityCreatedEventData.SchemaName">
            <summary>
            Gets entity schema name.
            </summary>
        </member>
        <member name="P:LinqToDB.Interceptors.EntityCreatedEventData.DatabaseName">
            <summary>
            Gets entity database name.
            </summary>
        </member>
        <member name="P:LinqToDB.Interceptors.EntityCreatedEventData.ServerName">
            <summary>
            Gets entity linked server name.
            </summary>
        </member>
        <member name="M:LinqToDB.Interceptors.ICommandInterceptor.CommandInitialized(LinqToDB.Interceptors.CommandEventData,System.Data.Common.DbCommand)">
            <summary>
            Event, triggered after command prepared for execution with both command text and parameters set.
            </summary>
            <param name="eventData">Additional data for event.</param>
            <param name="command">Initialized command instance.</param>
            <returns>Returns command instance for execution.</returns>
        </member>
        <member name="M:LinqToDB.Interceptors.ICommandInterceptor.ExecuteScalar(LinqToDB.Interceptors.CommandEventData,System.Data.Common.DbCommand,LinqToDB.Common.Option{System.Object})">
            <summary>
            Event, triggered before command execution using <see cref="M:System.Data.Common.DbCommand.ExecuteScalar"/> method.
            </summary>
            <param name="eventData">Additional data for event.</param>
            <param name="command">Command, prepared for execution.</param>
            <param name="result">Value, returned by previous interceptor when multiple <see cref="T:LinqToDB.Interceptors.ICommandInterceptor"/> instances registered or <see cref="F:LinqToDB.Common.Option`1.None"/>.</param>
            <returns>
            When event returns <see cref="F:LinqToDB.Common.Option`1.None"/>, Linq To DB will execute command, otherwise it will use returned value as execution result.
            </returns>
        </member>
        <member name="M:LinqToDB.Interceptors.ICommandInterceptor.ExecuteScalarAsync(LinqToDB.Interceptors.CommandEventData,System.Data.Common.DbCommand,LinqToDB.Common.Option{System.Object},System.Threading.CancellationToken)">
            <summary>
            Event, triggered before command execution using <see cref="M:System.Data.Common.DbCommand.ExecuteScalarAsync(System.Threading.CancellationToken)"/> method.
            </summary>
            <param name="eventData">Additional data for event.</param>
            <param name="command">Command, prepared for execution.</param>
            <param name="result">Value, returned by previous interceptor when multiple <see cref="T:LinqToDB.Interceptors.ICommandInterceptor"/> instances registered or <see cref="F:LinqToDB.Common.Option`1.None"/>.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>
            When event returns <see cref="F:LinqToDB.Common.Option`1.None"/>, Linq To DB will execute command, otherwise it will use returned value as execution result.
            </returns>
        </member>
        <member name="M:LinqToDB.Interceptors.ICommandInterceptor.ExecuteNonQuery(LinqToDB.Interceptors.CommandEventData,System.Data.Common.DbCommand,LinqToDB.Common.Option{System.Int32})">
            <summary>
            Event, triggered before command execution using <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery"/> method.
            </summary>
            <param name="eventData">Additional data for event.</param>
            <param name="command">Command, prepared for execution.</param>
            <param name="result">Value, returned by previous interceptor when multiple <see cref="T:LinqToDB.Interceptors.ICommandInterceptor"/> instances registered or <see cref="F:LinqToDB.Common.Option`1.None"/>.</param>
            <returns>
            When event returns <see cref="F:LinqToDB.Common.Option`1.None"/>, Linq To DB will execute command, otherwise it will use returned value as execution result.
            </returns>
        </member>
        <member name="M:LinqToDB.Interceptors.ICommandInterceptor.ExecuteNonQueryAsync(LinqToDB.Interceptors.CommandEventData,System.Data.Common.DbCommand,LinqToDB.Common.Option{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Event, triggered before command execution using <see cref="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)"/> method.
            </summary>
            <param name="eventData">Additional data for event.</param>
            <param name="command">Command, prepared for execution.</param>
            <param name="result">Value, returned by previous interceptor when multiple <see cref="T:LinqToDB.Interceptors.ICommandInterceptor"/> instances registered or <see cref="F:LinqToDB.Common.Option`1.None"/>.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>
            When event returns <see cref="F:LinqToDB.Common.Option`1.None"/>, Linq To DB will execute command, otherwise it will use returned value as execution result.
            </returns>
        </member>
        <member name="M:LinqToDB.Interceptors.ICommandInterceptor.ExecuteReader(LinqToDB.Interceptors.CommandEventData,System.Data.Common.DbCommand,System.Data.CommandBehavior,LinqToDB.Common.Option{System.Data.Common.DbDataReader})">
            <summary>
            Event, triggered before command execution using <see cref="M:System.Data.Common.DbCommand.ExecuteReader(System.Data.CommandBehavior)"/> method.
            </summary>
            <param name="eventData">Additional data for event.</param>
            <param name="command">Command, prepared for execution.</param>
            <param name="commandBehavior">Behavior, used for command execution.</param>
            <param name="result">Value, returned by previous interceptor when multiple <see cref="T:LinqToDB.Interceptors.ICommandInterceptor"/> instances registered or <see cref="F:LinqToDB.Common.Option`1.None"/>.</param>
            <returns>
            When event returns <see cref="F:LinqToDB.Common.Option`1.None"/>, Linq To DB will execute command, otherwise it will use returned value as execution result.
            </returns>
        </member>
        <member name="M:LinqToDB.Interceptors.ICommandInterceptor.ExecuteReaderAsync(LinqToDB.Interceptors.CommandEventData,System.Data.Common.DbCommand,System.Data.CommandBehavior,LinqToDB.Common.Option{System.Data.Common.DbDataReader},System.Threading.CancellationToken)">
            <summary>
            Event, triggered before command execution using <see cref="M:System.Data.Common.DbCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)"/> method.
            </summary>
            <param name="eventData">Additional data for event.</param>
            <param name="command">Command, prepared for execution.</param>
            <param name="commandBehavior">Behavior, used for command execution.</param>
            <param name="result">Value, returned by previous interceptor when multiple <see cref="T:LinqToDB.Interceptors.ICommandInterceptor"/> instances registered or <see cref="F:LinqToDB.Common.Option`1.None"/>.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>
            When event returns <see cref="F:LinqToDB.Common.Option`1.None"/>, Linq To DB will execute command, otherwise it will use returned value as execution result.
            </returns>
        </member>
        <member name="M:LinqToDB.Interceptors.ICommandInterceptor.AfterExecuteReader(LinqToDB.Interceptors.CommandEventData,System.Data.Common.DbCommand,System.Data.CommandBehavior,System.Data.Common.DbDataReader)">
            <summary>
            Event, triggered after command execution using <see cref="M:System.Data.Common.DbCommand.ExecuteReader(System.Data.CommandBehavior)"/> or <see cref="M:System.Data.Common.DbCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)"/> methods.
            </summary>
            <param name="eventData">Additional data for event.</param>
            <param name="command">Executed command.</param>
            <param name="commandBehavior">Behavior, used for command execution.</param>
            <param name="dataReader"><see cref="T:System.Data.Common.DbDataReader"/> instance, returned by <see cref="M:System.Data.Common.DbCommand.ExecuteReader(System.Data.CommandBehavior)"/> or <see cref="M:System.Data.Common.DbCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)"/> methods.</param>
        </member>
        <member name="M:LinqToDB.Interceptors.ICommandInterceptor.BeforeReaderDispose(LinqToDB.Interceptors.CommandEventData,System.Data.Common.DbCommand,System.Data.Common.DbDataReader)">
            <summary>
            Event, triggered after all data is consumed from <see cref="T:System.Data.Common.DbDataReader"/> before <see cref="M:System.IDisposable.Dispose"/> call.
            </summary>
            <param name="eventData">Additional data for event.</param>
            <param name="command">Executed command. Could be <c>null</c>.</param>
            <param name="dataReader"><see cref="T:System.Data.Common.DbDataReader"/> instance.</param>
        </member>
        <member name="M:LinqToDB.Interceptors.ICommandInterceptor.BeforeReaderDisposeAsync(LinqToDB.Interceptors.CommandEventData,System.Data.Common.DbCommand,System.Data.Common.DbDataReader)">
            <summary>
            Event, triggered after all data is consumed from <see cref="T:System.Data.Common.DbDataReader"/> before <c>DisposeAsync</c> call.
            </summary>
            <param name="eventData">Additional data for event.</param>
            <param name="command">Executed command. Could be <c>null</c>.</param>
            <param name="dataReader"><see cref="T:System.Data.Common.DbDataReader"/> instance.</param>
        </member>
        <member name="M:LinqToDB.Interceptors.IConnectionInterceptor.ConnectionOpening(LinqToDB.Interceptors.ConnectionEventData,System.Data.Common.DbConnection)">
            <summary>
            Event, triggered before connection open.
            </summary>
            <param name="eventData">Additional data for event.</param>
            <param name="connection">Connection instance.</param>
        </member>
        <member name="M:LinqToDB.Interceptors.IConnectionInterceptor.ConnectionOpeningAsync(LinqToDB.Interceptors.ConnectionEventData,System.Data.Common.DbConnection,System.Threading.CancellationToken)">
            <summary>
            Event, triggered before asynchronous connection open.
            </summary>
            <param name="eventData">Additional data for event.</param>
            <param name="connection">Connection instance.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="M:LinqToDB.Interceptors.IConnectionInterceptor.ConnectionOpened(LinqToDB.Interceptors.ConnectionEventData,System.Data.Common.DbConnection)">
            <summary>
            Event, triggered after connection opened.
            </summary>
            <param name="eventData">Additional data for event.</param>
            <param name="connection">Connection instance.</param>
        </member>
        <member name="M:LinqToDB.Interceptors.IConnectionInterceptor.ConnectionOpenedAsync(LinqToDB.Interceptors.ConnectionEventData,System.Data.Common.DbConnection,System.Threading.CancellationToken)">
            <summary>
            Event, triggered after connection opened asynchronously.
            </summary>
            <param name="eventData">Additional data for event.</param>
            <param name="connection">Connection instance.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="M:LinqToDB.Interceptors.IDataContextInterceptor.OnClosing(LinqToDB.Interceptors.DataContextEventData)">
            <summary>
            Event, triggered before <see cref="T:LinqToDB.IDataContext" /> instance closed by <see cref="M:LinqToDB.IDataContext.Close"/> call.
            </summary>
            <param name="eventData">Additional data for event.</param>
        </member>
        <member name="M:LinqToDB.Interceptors.IDataContextInterceptor.OnClosed(LinqToDB.Interceptors.DataContextEventData)">
            <summary>
            Event, triggered after <see cref="T:LinqToDB.IDataContext" /> instance closed by <see cref="M:LinqToDB.IDataContext.Close"/> call.
            </summary>
            <param name="eventData">Additional data for event.</param>
        </member>
        <member name="M:LinqToDB.Interceptors.IDataContextInterceptor.OnClosingAsync(LinqToDB.Interceptors.DataContextEventData)">
            <summary>
            Event, triggered before <see cref="T:LinqToDB.IDataContext" /> instance closed by <see cref="M:LinqToDB.IDataContext.CloseAsync"/> call.
            </summary>
            <param name="eventData">Additional data for event.</param>
        </member>
        <member name="M:LinqToDB.Interceptors.IDataContextInterceptor.OnClosedAsync(LinqToDB.Interceptors.DataContextEventData)">
            <summary>
            Event, triggered after <see cref="T:LinqToDB.IDataContext" /> instance closed by <see cref="M:LinqToDB.IDataContext.CloseAsync"/> call.
            </summary>
            <param name="eventData">Additional data for event.</param>
        </member>
        <member name="M:LinqToDB.Interceptors.IEntityServiceInterceptor.EntityCreated(LinqToDB.Interceptors.EntityCreatedEventData,System.Object)">
            <summary>
            Event, triggered when a new entity is created during query materialization.
            Not triggered for explicitly constructed objects.
            <example>
             In code below event could be triggered only for first query:
             <code>
            // r created by linq2db implicitly
            <br />
            from r in db.table select r;
            <br />
            <br />
            // Entity constructor call specified explicitly by user (projection)
            <br />
            from r in db.table select new Entity() { field = r.field };
            </code>
            </example>.
            </summary>
            <param name="eventData">Additional data for event.</param>
            <param name="entity">Materialized entity instance.</param>
            <returns>Returns entity instance.</returns>
        </member>
        <member name="T:LinqToDB.InterceptorExtensions">
            <summary>
            Contains extensions that add one-time interceptors to connection.
            </summary>
        </member>
        <member name="M:LinqToDB.InterceptorExtensions.OnNextCommandInitialized(LinqToDB.Data.DataConnection,System.Func{LinqToDB.Interceptors.CommandEventData,System.Data.Common.DbCommand,System.Data.Common.DbCommand})">
            <summary>
            Adds <see cref="M:LinqToDB.Interceptors.ICommandInterceptor.CommandInitialized(LinqToDB.Interceptors.CommandEventData,System.Data.Common.DbCommand)"/> interceptor, fired on next command only.
            </summary>
            <param name="dataConnection">Data connection to apply interceptor to.</param>
            <param name="onCommandInitialized">Interceptor delegate.</param>
        </member>
        <member name="M:LinqToDB.InterceptorExtensions.OnNextCommandInitialized(LinqToDB.DataContext,System.Func{LinqToDB.Interceptors.CommandEventData,System.Data.Common.DbCommand,System.Data.Common.DbCommand})">
            <summary>
            Adds <see cref="M:LinqToDB.Interceptors.ICommandInterceptor.CommandInitialized(LinqToDB.Interceptors.CommandEventData,System.Data.Common.DbCommand)"/> interceptor, fired on next command only.
            </summary>
            <param name="dataContext">Data context to apply interceptor to.</param>
            <param name="onCommandInitialized">Interceptor delegate.</param>
        </member>
        <member name="T:LinqToDB.ITableMutable`1">
            <summary>
            This is internal API and is not intended for use by Linq To DB applications.
            It may change or be removed without further notice.
            </summary>
        </member>
        <member name="M:LinqToDB.ITableMutable`1.ChangeServerName(System.String)">
            <summary>
            This is internal API and is not intended for use by Linq To DB applications.
            It may change or be removed without further notice.
            </summary>
        </member>
        <member name="M:LinqToDB.ITableMutable`1.ChangeDatabaseName(System.String)">
            <summary>
            This is internal API and is not intended for use by Linq To DB applications.
            It may change or be removed without further notice.
            </summary>
        </member>
        <member name="M:LinqToDB.ITableMutable`1.ChangeSchemaName(System.String)">
            <summary>
            This is internal API and is not intended for use by Linq To DB applications.
            It may change or be removed without further notice.
            </summary>
        </member>
        <member name="M:LinqToDB.ITableMutable`1.ChangeTableName(System.String)">
            <summary>
            This is internal API and is not intended for use by Linq To DB applications.
            It may change or be removed without further notice.
            </summary>
        </member>
        <member name="M:LinqToDB.ITableMutable`1.ChangeTableOptions(LinqToDB.TableOptions)">
            <summary>
            This is internal API and is not intended for use by Linq To DB applications.
            It may change or be removed without further notice.
            </summary>
        </member>
        <member name="M:LinqToDB.ITableMutable`1.ChangeTableID(System.String)">
            <summary>
            This is internal API and is not intended for use by Linq To DB applications.
            It may change or be removed without further notice.
            </summary>
        </member>
        <member name="T:LinqToDB.ITable`1">
            <summary>
            Table-like queryable source, e.g. table, view or table-valued function.
            </summary>
            <typeparam name="T">Record mapping type.</typeparam>
        </member>
        <member name="T:LinqToDB.KeepConnectionAliveScope">
            <summary>
            Explicit <see cref="T:LinqToDB.DataContext"/> connection reuse scope.
            See <see cref="P:LinqToDB.DataContext.KeepConnectionAlive"/> for more details.
            </summary>
        </member>
        <member name="M:LinqToDB.KeepConnectionAliveScope.#ctor(LinqToDB.DataContext)">
            <summary>
            Creates connection reuse scope for <see cref="T:LinqToDB.DataContext"/>.
            </summary>
            <param name="dataContext">Data context.</param>
        </member>
        <member name="M:LinqToDB.KeepConnectionAliveScope.Dispose">
            <summary>
            Restores old connection reuse option.
            </summary>
        </member>
        <member name="T:LinqToDB.LinqExtensions">
            <summary>
            Contains extension methods for LINQ queries.
            </summary>
        </member>
        <member name="M:LinqToDB.LinqExtensions.TableID``1(LinqToDB.ITable{``0},System.String)">
            <summary>
            Assigns table id.
            </summary>
            <typeparam name="T">Table record mapping class.</typeparam>
            <param name="table">Table-like query source.</param>
            <param name="id">Table ID.</param>
            <returns>Table-like query source with new name.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.TableName``1(LinqToDB.ITable{``0},System.String)">
            <summary>
            Overrides table or view name with new name for current query.
            </summary>
            <typeparam name="T">Table record mapping class.</typeparam>
            <param name="table">Table-like query source.</param>
            <param name="name">Name of table.</param>
            <returns>Table-like query source with new name.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)">
            <summary>
            Overrides database name with new name for current query. This call will have effect only for databases that support
            database name in fully-qualified table name.
            <para>Supported by: Access, DB2, MySQL, PostgreSQL, SAP HANA, SQLite, Informix, SQL Server, Sybase ASE.</para>
            <para>Requires schema name (see <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/>): DB2, SAP HANA, PostgreSQL.</para>
            <para>PostgreSQL supports only name of current database.</para>
            </summary>
            <typeparam name="T">Table record mapping class.</typeparam>
            <param name="table">Table-like query source.</param>
            <param name="name">Name of database.</param>
            <returns>Table-like query source with new database name.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.ServerName``1(LinqToDB.ITable{``0},System.String)">
            <summary>
            Overrides linked server name with new name for current query. This call will have effect only for databases that support
            linked server name in fully-qualified table name.
            <para>Supported by: SQL Server, Informix, Oracle, SAP HANA2.</para>
            </summary>
            <typeparam name="T">Table record mapping class.</typeparam>
            <param name="table">Table-like query source.</param>
            <param name="name">Name of linked server.</param>
            <returns>Table-like query source with new linked server name.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)">
            <summary>
            Overrides owner/schema name with new name for current query. This call will have effect only for databases that support
            owner/schema name in fully-qualified table name.
            <para>Supported by: DB2, Oracle, PostgreSQL, Informix, SQL Server, Sybase ASE.</para>
            </summary>
            <typeparam name="T">Table record mapping class.</typeparam>
            <param name="table">Table-like query source.</param>
            <param name="name">Name of owner/schema.</param>
            <returns>Table-like query source with new owner/schema name.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.WithTableExpression``1(LinqToDB.ITable{``0},System.String)">
            <summary>
            Replaces access to a table in generated query with SQL expression.
            Example below adds hint to a table. Also see <see cref="M:LinqToDB.LinqExtensions.With``1(LinqToDB.ITable{``0},System.String)"/> method.
            <code>
            var tableWithHint = db.Table.WithTableExpression("{0} {1} with (UpdLock)");
            </code>
            </summary>
            <typeparam name="T">Table record mapping class.</typeparam>
            <param name="table">Table-like query source.</param>
            <param name="expression">SQL template to use instead of table name. Template supports two parameters:
            <para> - {0} original table name;</para>
            <para> - {1} table alias.</para>
            </param>
            <returns>Table-like query source with new table source expression.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.With``1(LinqToDB.ITable{``0},System.String)">
            <summary>
            Adds a table hint to a table in generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <param name="table">Table-like query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <returns>Table-like query source with table hints.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.TableHint``1(LinqToDB.ITable{``0},System.String)">
            <summary>
            Adds a table hint to a table in generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <param name="table">Table-like query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <returns>Table-like query source with table hints.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.TableHint``2(LinqToDB.ITable{``0},System.String,``1)">
            <summary>
            Adds a table hint to a table in generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <typeparam name="TParam">Table hint parameter type.</typeparam>
            <param name="table">Table-like query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <param name="hintParameter">Table hint parameter.</param>
            <returns>Table-like query source with table hints.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.TableHint``2(LinqToDB.ITable{``0},System.String,``1[])">
            <summary>
            Adds a table hint to a table in generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <typeparam name="TParam">Table hint parameter type.</typeparam>
            <param name="table">Table-like query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <param name="hintParameters">Table hint parameters.</param>
            <returns>Table-like query source with table hints.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.TablesInScopeHint``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Adds a table hint to all the tables in the method scope.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <returns>Query source with table hints.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.TablesInScopeHint``2(System.Linq.IQueryable{``0},System.String,``1)">
            <summary>
            Adds a table hint to all the tables in the method scope.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <typeparam name="TParam">Table hint parameter type.</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <param name="hintParameter">Table hint parameter.</param>
            <returns>Query source with table hints.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.TablesInScopeHint``1(System.Linq.IQueryable{``0},System.String,System.Object[])">
            <summary>
            Adds a table hint to all the tables in the method scope.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <param name="hintParameters">Table hint parameters.</param>
            <returns>Query source with table hints.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.IndexHint``1(LinqToDB.ITable{``0},System.String)">
            <summary>
            Adds an index hint to a table in generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <param name="table">Table-like query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <returns>Table-like query source with index hints.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.IndexHint``2(LinqToDB.ITable{``0},System.String,``1)">
            <summary>
            Adds an index hint to a table in generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <typeparam name="TParam">Table hint parameter type.</typeparam>
            <param name="table">Table-like query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <param name="hintParameter">Table hint parameter.</param>
            <returns>Table-like query source with index hints.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.IndexHint``2(LinqToDB.ITable{``0},System.String,``1[])">
            <summary>
            Adds an index hint to a table in generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <typeparam name="TParam">Table hint parameter type.</typeparam>
            <param name="table">Table-like query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <param name="hintParameters">Table hint parameters.</param>
            <returns>Table-like query source with index hints.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.JoinHint``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Adds a join hint to a generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <returns>Query source with join hints.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.SubQueryHint``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Adds a query hint to a generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <returns>Query source with hints.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.SubQueryHint``2(System.Linq.IQueryable{``0},System.String,``1)">
            <summary>
            Adds a query hint to the generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <typeparam name="TParam">Hint parameter type</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <param name="hintParameter">Hint parameter.</param>
            <returns>Query source with hints.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.SubQueryHint``2(System.Linq.IQueryable{``0},System.String,``1[])">
            <summary>
            Adds a query hint to the generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <typeparam name="TParam">Table hint parameter type.</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <param name="hintParameters">Table hint parameters.</param>
            <returns>Table-like query source with hints.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.QueryHint``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Adds a query hint to a generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <returns>Query source with hints.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.QueryHint``2(System.Linq.IQueryable{``0},System.String,``1)">
            <summary>
            Adds a query hint to the generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <typeparam name="TParam">Hint parameter type</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <param name="hintParameter">Hint parameter.</param>
            <returns>Query source with hints.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.QueryHint``2(System.Linq.IQueryable{``0},System.String,``1[])">
            <summary>
            Adds a query hint to the generated query.
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <typeparam name="TParam">Table hint parameter type.</typeparam>
            <param name="source">Query source.</param>
            <param name="hint">SQL text, added as a database specific hint to generated query.</param>
            <param name="hintParameters">Table hint parameters.</param>
            <returns>Table-like query source with hints.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Select``1(LinqToDB.IDataContext,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Loads scalar value or record from database without explicit table source.
            Could be usefull for function calls, querying of database variables or properties, subqueries, execution of code on server side.
            </summary>
            <typeparam name="T">Type of result.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="selector">Value selection expression.</param>
            <returns>Requested value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.SelectAsync``1(LinqToDB.IDataContext,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Loads scalar value or record from database without explicit table source asynchronously.
            Could be usefull for function calls, querying of database variables or properties, subqueries, execution of code on server side.
            </summary>
            <typeparam name="T">Type of result.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="selector">Value selection expression.</param>
            <returns>Requested value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Delete``1(System.Linq.IQueryable{``0})">
            <summary>
            Executes delete operation, using source query as filter for records, that should be deleted.
            </summary>
            <typeparam name="T">Mapping class for delete operation target table.</typeparam>
            <param name="source">Query that returns records to delete.</param>
            <returns>Number of deleted records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.DeleteAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Executes delete operation asynchronously, using source query as filter for records, that should be deleted.
            </summary>
            <typeparam name="T">Mapping class for delete operation target table.</typeparam>
            <param name="source">Query that returns records to delete.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of deleted records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Delete``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Executes delete operation, using source query as initial filter for records, that should be deleted, and predicate expression as additional filter.
            </summary>
            <typeparam name="T">Mapping class for delete operation target table.</typeparam>
            <param name="source">Query that returns records to delete.</param>
            <param name="predicate">Filter expression, to specify what records from source should be deleted.</param>
            <returns>Number of deleted records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.DeleteAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Executes delete operation asynchronously, using source query as initial filter for records, that should be deleted, and predicate expression as additional filter.
            </summary>
            <typeparam name="T">Mapping class for delete operation target table.</typeparam>
            <param name="source">Query that returns records to delete.</param>
            <param name="predicate">Filter expression, to specify what records from source should be deleted.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of deleted records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Update``2(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Executes update-from-source operation against target table.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table mapping class.</typeparam>
            <param name="source">Source data query.</param>
            <param name="target">Target table.</param>
            <param name="setter">Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers.</param>
            <returns>Number of updated records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateAsync``2(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            Executes update-from-source operation asynchronously against target table.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table mapping class.</typeparam>
            <param name="source">Source data query.</param>
            <param name="target">Target table.</param>
            <param name="setter">Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of updated records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Update``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0}})">
            <summary>
            Executes update operation using source query as record filter.
            </summary>
            <typeparam name="T">Updated table record type.</typeparam>
            <param name="source">Source data query.</param>
            <param name="setter">Update expression. Uses updated record as parameter. Expression supports only target table record new expression with field initializers.</param>
            <returns>Number of updated records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Threading.CancellationToken)">
            <summary>
            Executes update operation asynchronously using source query as record filter.
            </summary>
            <typeparam name="T">Updated table record type.</typeparam>
            <param name="source">Source data query.</param>
            <param name="setter">Update expression. Uses updated record as parameter. Expression supports only target table record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of updated records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Update``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``0}})">
            <summary>
            Executes update operation using source query as record filter with additional filter expression.
            </summary>
            <typeparam name="T">Updated table record type.</typeparam>
            <param name="source">Source data query.</param>
            <param name="predicate">Filter expression, to specify what records from source query should be updated.</param>
            <param name="setter">Update expression. Uses updated record as parameter. Expression supports only target table record new expression with field initializers.</param>
            <returns>Number of updated records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Threading.CancellationToken)">
            <summary>
            Executes update operation asynchronously using source query as record filter with additional filter expression.
            </summary>
            <typeparam name="T">Updated table record type.</typeparam>
            <param name="source">Source data query.</param>
            <param name="predicate">Filter expression, to specify what records from source query should be updated.</param>
            <param name="setter">Update expression. Uses updated record as parameter. Expression supports only target table record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of updated records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Update``1(LinqToDB.Linq.IUpdatable{``0})">
            <summary>
            Executes update operation for already configured update query.
            </summary>
            <typeparam name="T">Updated table record type.</typeparam>
            <param name="source">Update query.</param>
            <returns>Number of updated records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateAsync``1(LinqToDB.Linq.IUpdatable{``0},System.Threading.CancellationToken)">
            <summary>
            Executes update operation asynchronously for already configured update query.
            </summary>
            <typeparam name="T">Updated table record type.</typeparam>
            <param name="source">Update query.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of updated records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Update``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Executes update-from-source operation against target table.
            Also see <seealso cref="M:LinqToDB.LinqExtensions.Update``2(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}})"/> method.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table mapping class.</typeparam>
            <param name="source">Source data query.</param>
            <param name="target">Target table selection expression.</param>
            <param name="setter">Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers.</param>
            <returns>Number of updated records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            Executes update-from-source operation asynchronously against target table.
            Also see <seealso cref="M:LinqToDB.LinqExtensions.UpdateAsync``2(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)"/> method.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table mapping class.</typeparam>
            <param name="source">Source data query.</param>
            <param name="target">Target table selection expression.</param>
            <param name="setter">Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of updated records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.AsUpdatable``1(System.Linq.IQueryable{``0})">
            <summary>
            Casts <see cref="T:System.Linq.IQueryable`1"/> query to <see cref="T:LinqToDB.Linq.IUpdatable`1"/> query.
            </summary>
            <typeparam name="T">Query record type.</typeparam>
            <param name="source">Source <see cref="T:System.Linq.IQueryable`1"/> query.</param>
            <returns><see cref="T:LinqToDB.Linq.IUpdatable`1"/> query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Set``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Adds update field expression to query.
            </summary>
            <typeparam name="T">Updated record type.</typeparam>
            <typeparam name="TV">Updated field type.</typeparam>
            <param name="source">Source query with records to update.</param>
            <param name="extract">Updated field selector expression.</param>
            <param name="update">Updated field setter expression. Uses updated record as parameter.</param>
            <returns><see cref="T:LinqToDB.Linq.IUpdatable`1"/> query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Set``2(LinqToDB.Linq.IUpdatable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Adds update field expression to query.
            </summary>
            <typeparam name="T">Updated record type.</typeparam>
            <typeparam name="TV">Updated field type.</typeparam>
            <param name="source">Source query with records to update.</param>
            <param name="extract">Updated field selector expression.</param>
            <param name="update">Updated field setter expression. Uses updated record as parameter.</param>
            <returns><see cref="T:LinqToDB.Linq.IUpdatable`1"/> query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Set``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1}})">
            <summary>
            Adds update field expression to query.
            </summary>
            <typeparam name="T">Updated record type.</typeparam>
            <typeparam name="TV">Updated field type.</typeparam>
            <param name="source">Source query with records to update.</param>
            <param name="extract">Updated field selector expression.</param>
            <param name="update">Updated field setter expression.</param>
            <returns><see cref="T:LinqToDB.Linq.IUpdatable`1"/> query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Set``2(LinqToDB.Linq.IUpdatable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1}})">
            <summary>
            Adds update field expression to query.
            </summary>
            <typeparam name="T">Updated record type.</typeparam>
            <typeparam name="TV">Updated field type.</typeparam>
            <param name="source">Source query with records to update.</param>
            <param name="extract">Updated field selector expression.</param>
            <param name="update">Updated field setter expression.</param>
            <returns><see cref="T:LinqToDB.Linq.IUpdatable`1"/> query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Set``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},``1)">
            <summary>
            Adds update field expression to query.
            </summary>
            <typeparam name="T">Updated record type.</typeparam>
            <typeparam name="TV">Updated field type.</typeparam>
            <param name="source">Source query with records to update.</param>
            <param name="extract">Updated field selector expression.</param>
            <param name="value">Value, assigned to updated field.</param>
            <returns><see cref="T:LinqToDB.Linq.IUpdatable`1"/> query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Set``2(LinqToDB.Linq.IUpdatable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},``1)">
            <summary>
            Adds update field expression to query.
            </summary>
            <typeparam name="T">Updated record type.</typeparam>
            <typeparam name="TV">Updated field type.</typeparam>
            <param name="source">Source query with records to update.</param>
            <param name="extract">Updated field selector expression.</param>
            <param name="value">Value, assigned to updated field.</param>
            <returns><see cref="T:LinqToDB.Linq.IUpdatable`1"/> query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Set``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.String}})">
            <summary>
            Adds update field expression to query. It can be any expression with string interpolation.
            </summary>
            <typeparam name="T">Updated record type.</typeparam>
            <param name="source">Source query with records to update.</param>
            <param name="setExpression">Custom update expression.</param>
            <returns><see cref="T:LinqToDB.Linq.IUpdatable`1"/> query.</returns>
            <example>
            The following example shows how to append string value to appropriate field.
            <code>
            	db.Users.Where(u => u.UserId == id)
            		.Set(u => $"{u.Name}" += {str}")
            		.Update();
            </code>
            </example>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Set``1(LinqToDB.Linq.IUpdatable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.String}})">
            <summary>
            Adds update field expression to query. It can be any expression with string interpolation.
            </summary>
            <typeparam name="T">Updated record type.</typeparam>
            <param name="source">Source query with records to update.</param>
            <param name="setExpression">Custom update expression.</param>
            <returns><see cref="T:LinqToDB.Linq.IUpdatable`1"/> query.</returns>
            <example>
            The following example shows how to append string value to appropriate field.
            <code>
            	db.Users.Where(u => u.UserId == id)
            		.AsUpdatable()
            		.Set(u => $"{u.Name}" += {str}")
            		.Update();
            </code>
            </example>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Insert``1(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Inserts single record into target table.
            </summary>
            <typeparam name="T">Inserted record type.</typeparam>
            <param name="target">Target table.</param>
            <param name="setter">Insert expression. Expression supports only target table record new expression with field initializers.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertAsync``1(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0}},System.Threading.CancellationToken)">
            <summary>
            Inserts single record into target table asynchronously.
            </summary>
            <typeparam name="T">Inserted record type.</typeparam>
            <param name="target">Target table.</param>
            <param name="setter">Insert expression. Expression supports only target table record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithIdentity``1(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Inserts single record into target table and returns identity value of inserted record.
            </summary>
            <typeparam name="T">Inserted record type.</typeparam>
            <param name="target">Target table.</param>
            <param name="setter">Insert expression. Expression supports only target table record new expression with field initializers.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithInt32Identity``1(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Inserts single record into target table and returns identity value of inserted record as <see cref="T:System.Int32"/> value.
            </summary>
            <typeparam name="T">Inserted record type.</typeparam>
            <param name="target">Target table.</param>
            <param name="setter">Insert expression. Expression supports only target table record new expression with field initializers.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithInt64Identity``1(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Inserts single record into target table and returns identity value of inserted record as <see cref="T:System.Int64"/> value.
            </summary>
            <typeparam name="T">Inserted record type.</typeparam>
            <param name="target">Target table.</param>
            <param name="setter">Insert expression. Expression supports only target table record new expression with field initializers.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithDecimalIdentity``1(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Inserts single record into target table and returns identity value of inserted record as <see cref="T:System.Decimal"/> value.
            </summary>
            <typeparam name="T">Inserted record type.</typeparam>
            <param name="target">Target table.</param>
            <param name="setter">Insert expression. Expression supports only target table record new expression with field initializers.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithIdentityAsync``1(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0}},System.Threading.CancellationToken)">
            <summary>
            Inserts single record into target table asynchronously and returns identity value of inserted record.
            </summary>
            <typeparam name="T">Inserted record type.</typeparam>
            <param name="target">Target table.</param>
            <param name="setter">Insert expression. Expression supports only target table record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithInt32IdentityAsync``1(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0}},System.Threading.CancellationToken)">
            <summary>
            Inserts single record into target table asynchronously and returns identity value of inserted record as <see cref="T:System.Int32"/> value.
            </summary>
            <typeparam name="T">Inserted record type.</typeparam>
            <param name="target">Target table.</param>
            <param name="setter">Insert expression. Expression supports only target table record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithInt64IdentityAsync``1(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0}},System.Threading.CancellationToken)">
            <summary>
            Inserts single record into target table asynchronously and returns identity value of inserted record as <see cref="T:System.Int64"/> value.
            </summary>
            <typeparam name="T">Inserted record type.</typeparam>
            <param name="target">Target table.</param>
            <param name="setter">Insert expression. Expression supports only target table record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithDecimalIdentityAsync``1(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0}},System.Threading.CancellationToken)">
            <summary>
            Inserts single record into target table asynchronously and returns identity value of inserted record as <see cref="T:System.Decimal"/> value.
            </summary>
            <typeparam name="T">Inserted record type.</typeparam>
            <param name="target">Target table.</param>
            <param name="setter">Insert expression. Expression supports only target table record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Into``1(LinqToDB.IDataContext,LinqToDB.ITable{``0})">
            <summary>
            Starts insert operation LINQ query definition.
            </summary>
            <typeparam name="T">Target table mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="target">Target table.</param>
            <returns>Insertable source query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.AsValueInsertable``1(LinqToDB.ITable{``0})">
            <summary>
            Starts insert operation LINQ query definition.
            </summary>
            <typeparam name="T">Target table mapping class.</typeparam>
            <param name="source">Target table.</param>
            <returns>Insertable source query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Value``2(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1}})">
            <summary>
            Starts insert operation LINQ query definition from field setter expression.
            </summary>
            <typeparam name="T">Target table record type.</typeparam>
            <typeparam name="TV">Setter field type.</typeparam>
            <param name="source">Source table to insert to.</param>
            <param name="field">Setter field selector expression.</param>
            <param name="value">Setter field value expression.</param>
            <returns>Insert query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Value``2(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},``1)">
            <summary>
            Starts insert operation LINQ query definition from field setter expression.
            </summary>
            <typeparam name="T">Target table record type.</typeparam>
            <typeparam name="TV">Setter field type.</typeparam>
            <param name="source">Source table to insert to.</param>
            <param name="field">Setter field selector expression.</param>
            <param name="value">Setter field value.</param>
            <returns>Insert query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Value``2(LinqToDB.Linq.IValueInsertable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1}})">
            <summary>
            Add field setter to insert operation LINQ query.
            </summary>
            <typeparam name="T">Target table record type.</typeparam>
            <typeparam name="TV">Setter field type.</typeparam>
            <param name="source">Insert query.</param>
            <param name="field">Setter field selector expression.</param>
            <param name="value">Setter field value expression.</param>
            <returns>Insert query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Value``2(LinqToDB.Linq.IValueInsertable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},``1)">
            <summary>
            Add field setter to insert operation LINQ query.
            </summary>
            <typeparam name="T">Target table record type.</typeparam>
            <typeparam name="TV">Setter field type.</typeparam>
            <param name="source">Insert query.</param>
            <param name="field">Setter field selector expression.</param>
            <param name="value">Setter field value.</param>
            <returns>Insert query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Insert``1(LinqToDB.Linq.IValueInsertable{``0})">
            <summary>
            Executes insert query.
            </summary>
            <typeparam name="T">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertAsync``1(LinqToDB.Linq.IValueInsertable{``0},System.Threading.CancellationToken)">
            <summary>
            Executes insert query asynchronously.
            </summary>
            <typeparam name="T">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithIdentity``1(LinqToDB.Linq.IValueInsertable{``0})">
            <summary>
            Executes insert query and returns identity value of inserted record.
            </summary>
            <typeparam name="T">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithInt32Identity``1(LinqToDB.Linq.IValueInsertable{``0})">
            <summary>
            Executes insert query and returns identity value of inserted record as <see cref="T:System.Int32"/> value.
            </summary>
            <typeparam name="T">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithInt64Identity``1(LinqToDB.Linq.IValueInsertable{``0})">
            <summary>
            Executes insert query and returns identity value of inserted record as <see cref="T:System.Int64"/> value.
            </summary>
            <typeparam name="T">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithDecimalIdentity``1(LinqToDB.Linq.IValueInsertable{``0})">
            <summary>
            Executes insert query and returns identity value of inserted record as <see cref="T:System.Decimal"/> value.
            </summary>
            <typeparam name="T">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithIdentityAsync``1(LinqToDB.Linq.IValueInsertable{``0},System.Threading.CancellationToken)">
            <summary>
            Executes insert query asynchronously and returns identity value of inserted record.
            </summary>
            <typeparam name="T">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithInt32IdentityAsync``1(LinqToDB.Linq.IValueInsertable{``0},System.Threading.CancellationToken)">
            <summary>
            Executes insert query asynchronously and returns identity value of inserted record as <see cref="T:System.Int32"/> value.
            </summary>
            <typeparam name="T">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithInt64IdentityAsync``1(LinqToDB.Linq.IValueInsertable{``0},System.Threading.CancellationToken)">
            <summary>
            Executes insert query asynchronously and returns identity value of inserted record as <see cref="T:System.Int64"/> value.
            </summary>
            <typeparam name="T">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithDecimalIdentityAsync``1(LinqToDB.Linq.IValueInsertable{``0},System.Threading.CancellationToken)">
            <summary>
            Executes insert query asynchronously and returns identity value of inserted record as <see cref="T:System.Decimal"/> value.
            </summary>
            <typeparam name="T">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Insert``2(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Inserts records from source query into target table.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type</typeparam>
            <param name="source">Source query, that returns data for insert operation.</param>
            <param name="target">Target table.</param>
            <param name="setter">Inserted record constructor expression.
            Expression supports only target table record new expression with field initializers.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertAsync``2(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            Inserts records from source query into target table asynchronously.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type</typeparam>
            <param name="source">Source query, that returns data for insert operation.</param>
            <param name="target">Target table.</param>
            <param name="setter">Inserted record constructor expression.
            Expression supports only target table record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithIdentity``2(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Inserts records from source query into target table and returns identity value of last inserted record.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type</typeparam>
            <param name="source">Source query, that returns data for insert operation.</param>
            <param name="target">Target table.</param>
            <param name="setter">Inserted record constructor expression.
            Expression supports only target table record new expression with field initializers.</param>
            <returns>Last inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithInt32Identity``2(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Inserts records from source query into target table and returns identity value of last inserted record as <see cref="T:System.Int32"/> value.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type</typeparam>
            <param name="source">Source query, that returns data for insert operation.</param>
            <param name="target">Target table.</param>
            <param name="setter">Inserted record constructor expression.
            Expression supports only target table record new expression with field initializers.</param>
            <returns>Last inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithInt64Identity``2(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Inserts records from source query into target table and returns identity value of last inserted record as <see cref="T:System.Int64"/> value.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type</typeparam>
            <param name="source">Source query, that returns data for insert operation.</param>
            <param name="target">Target table.</param>
            <param name="setter">Inserted record constructor expression.
            Expression supports only target table record new expression with field initializers.</param>
            <returns>Last inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithDecimalIdentity``2(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Inserts records from source query into target table and returns identity value of last inserted record as <see cref="T:System.Decimal"/> value.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type</typeparam>
            <param name="source">Source query, that returns data for insert operation.</param>
            <param name="target">Target table.</param>
            <param name="setter">Inserted record constructor expression.
            Expression supports only target table record new expression with field initializers.</param>
            <returns>Last inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithIdentityAsync``2(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            Inserts records from source query into target table asynchronously and returns identity value of last inserted record.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type</typeparam>
            <param name="source">Source query, that returns data for insert operation.</param>
            <param name="target">Target table.</param>
            <param name="setter">Inserted record constructor expression.
            Expression supports only target table record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Last inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithInt32IdentityAsync``2(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            Inserts records from source query into target table asynchronously and returns identity value of last inserted record as <see cref="T:System.Int32"/> value.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type</typeparam>
            <param name="source">Source query, that returns data for insert operation.</param>
            <param name="target">Target table.</param>
            <param name="setter">Inserted record constructor expression.
            Expression supports only target table record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Last inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithInt64IdentityAsync``2(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            Inserts records from source query into target table asynchronously and returns identity value of last inserted record as <see cref="T:System.Int64"/> value.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type</typeparam>
            <param name="source">Source query, that returns data for insert operation.</param>
            <param name="target">Target table.</param>
            <param name="setter">Inserted record constructor expression.
            Expression supports only target table record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Last inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithDecimalIdentityAsync``2(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            Inserts records from source query into target table asynchronously and returns identity value of last inserted record as <see cref="T:System.Decimal"/> value.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type</typeparam>
            <param name="source">Source query, that returns data for insert operation.</param>
            <param name="target">Target table.</param>
            <param name="setter">Inserted record constructor expression.
            Expression supports only target table record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Last inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Into``2(System.Linq.IQueryable{``0},LinqToDB.ITable{``1})">
            <summary>
            Converts LINQ query into insert query with source query data as data to insert.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table mapping class.</typeparam>
            <param name="source">Source data query.</param>
            <param name="target">Target table.</param>
            <returns>Insertable source query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Value``3(LinqToDB.Linq.ISelectInsertable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
            <summary>
            Add field setter to insert operation LINQ query.
            </summary>
            <typeparam name="TSource">Source record type.</typeparam>
            <typeparam name="TTarget">Target record type</typeparam>
            <typeparam name="TValue">Field type.</typeparam>
            <param name="source">Insert query.</param>
            <param name="field">Setter field selector expression.</param>
            <param name="value">Setter field value expression. Accepts source record as parameter.</param>
            <returns>Insert query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Value``3(LinqToDB.Linq.ISelectInsertable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``2}})">
            <summary>
            Add field setter to insert operation LINQ query.
            </summary>
            <typeparam name="TSource">Source record type.</typeparam>
            <typeparam name="TTarget">Target record type</typeparam>
            <typeparam name="TValue">Field type.</typeparam>
            <param name="source">Insert query.</param>
            <param name="field">Setter field selector expression.</param>
            <param name="value">Setter field value expression.</param>
            <returns>Insert query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Value``3(LinqToDB.Linq.ISelectInsertable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},``2)">
            <summary>
            Add field setter to insert operation LINQ query.
            </summary>
            <typeparam name="TSource">Source record type.</typeparam>
            <typeparam name="TTarget">Target record type</typeparam>
            <typeparam name="TValue">Field type.</typeparam>
            <param name="source">Insert query.</param>
            <param name="field">Setter field selector expression.</param>
            <param name="value">Setter field value.</param>
            <returns>Insert query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Insert``2(LinqToDB.Linq.ISelectInsertable{``0,``1})">
            <summary>
            Executes configured insert query.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertAsync``2(LinqToDB.Linq.ISelectInsertable{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Executes configured insert query asynchronously.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithIdentity``2(LinqToDB.Linq.ISelectInsertable{``0,``1})">
            <summary>
            Executes configured insert query and returns identity value of last inserted record.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithInt32Identity``2(LinqToDB.Linq.ISelectInsertable{``0,``1})">
            <summary>
            Executes configured insert query and returns identity value of last inserted record as <see cref="T:System.Int32"/> value.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithInt64Identity``2(LinqToDB.Linq.ISelectInsertable{``0,``1})">
            <summary>
            Executes configured insert query and returns identity value of last inserted record as <see cref="T:System.Int64"/> value.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithDecimalIdentity``2(LinqToDB.Linq.ISelectInsertable{``0,``1})">
            <summary>
            Executes configured insert query and returns identity value of last inserted record as <see cref="T:System.Decimal"/> value.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithIdentityAsync``2(LinqToDB.Linq.ISelectInsertable{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Executes configured insert query asynchronously and returns identity value of last inserted record.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithInt32IdentityAsync``2(LinqToDB.Linq.ISelectInsertable{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Executes configured insert query asynchronously and returns identity value of last inserted record as <see cref="T:System.Int32"/> value.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithInt64IdentityAsync``2(LinqToDB.Linq.ISelectInsertable{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Executes configured insert query asynchronously and returns identity value of last inserted record as <see cref="T:System.Int64"/> value.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithDecimalIdentityAsync``2(LinqToDB.Linq.ISelectInsertable{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Executes configured insert query asynchronously and returns identity value of last inserted record as <see cref="T:System.Decimal"/> value.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertOrUpdate``1(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``0,``0}})">
            <summary>
            Inserts new record into target table or updates existing record if record with the same primary key value already exists in target table.
            When <c>null</c> value or expression without field setters passed to <paramref name="onDuplicateKeyUpdateSetter"/>, this method
            implements <c>INSERT IF NOT EXISTS</c> logic.
            </summary>
            <typeparam name="T">Table record type.</typeparam>
            <param name="target">Target table.</param>
            <param name="insertSetter">Inserted record constructor expression.
            Expression supports only target table record new expression with field initializers.</param>
            <param name="onDuplicateKeyUpdateSetter">Updated record constructor expression.
            Expression supports only target table record new expression with field initializers.
            Accepts updated record as parameter.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertOrUpdateAsync``1(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously inserts new record into target table or updates existing record if record with the same primary key value already exists in target table.
            When <c>null</c> value or expression without field setters passed to <paramref name="onDuplicateKeyUpdateSetter"/>, this method
            implements <c>INSERT IF NOT EXISTS</c> logic.
            </summary>
            <typeparam name="T">Table record type.</typeparam>
            <param name="target">Target table.</param>
            <param name="insertSetter">Inserted record constructor expression.
            Expression supports only target table record new expression with field initializers.</param>
            <param name="onDuplicateKeyUpdateSetter">Updated record constructor expression.
            Expression supports only target table record new expression with field initializers.
            Accepts updated record as parameter.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertOrUpdate``1(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Inserts new record into target table or updates existing record if record with the same key value already exists in target table.
            When <c>null</c> value or expression without field setters passed to <paramref name="onDuplicateKeyUpdateSetter"/>, this method
            implements <c>INSERT IF NOT EXISTS</c> logic.
            </summary>
            <typeparam name="T">Table record type.</typeparam>
            <param name="target">Target table.</param>
            <param name="insertSetter">Inserted record constructor expression.
            Expression supports only target table record new expression with field initializers.</param>
            <param name="onDuplicateKeyUpdateSetter">Updated record constructor expression.
            Expression supports only target table record new expression with field initializers.
            Accepts updated record as parameter.</param>
            <param name="keySelector">Key fields selector to specify what fields and values must be used as key fields for selection between insert and update operations.
            Expression supports only target table record new expression with field initializers for each key field. Assigned key field value will be used as key value by operation type selector.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertOrUpdateAsync``1(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Linq.Expressions.Expression{System.Func{``0}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously inserts new record into target table or updates existing record if record with the same key value already exists in target table.
            When <c>null</c> value or expression without field setters passed to <paramref name="onDuplicateKeyUpdateSetter"/>, this method
            implements <c>INSERT IF NOT EXISTS</c> logic.
            </summary>
            <typeparam name="T">Table record type.</typeparam>
            <param name="target">Target table.</param>
            <param name="insertSetter">Inserted record constructor expression.
            Expression supports only target table record new expression with field initializers.</param>
            <param name="onDuplicateKeyUpdateSetter">Updated record constructor expression.
            Expression supports only target table record new expression with field initializers.
            Accepts updated record as parameter.</param>
            <param name="keySelector">Key fields selector to specify what fields and values must be used as key fields for selection between insert and update operations.
            Expression supports only target table record new expression with field initializers for each key field. Assigned key field value will be used as key value by operation type selector.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Drop``1(LinqToDB.ITable{``0},System.Boolean)">
            <summary>
            Drops database table.
            </summary>
            <typeparam name="T">Table record type.</typeparam>
            <param name="target">Dropped table.</param>
            <param name="throwExceptionIfNotExists">If <c>false</c>, any exception during drop operation will be silently catched and <c>0</c> returned.
            This behavior is not correct and will be fixed in future to mask only missing table exceptions.
            Tracked by <a href="https://github.com/linq2db/linq2db/issues/798">issue</a>.
            Default value: <c>true</c>.</param>
            <returns>Number of affected records. Usually <c>-1</c> as it is not data modification operation.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.DropAsync``1(LinqToDB.ITable{``0},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Drops database table asynchronously.
            </summary>
            <typeparam name="T">Table record type.</typeparam>
            <param name="target">Dropped table.</param>
            <param name="throwExceptionIfNotExists">If <c>false</c>, any exception during drop operation will be silently catched and <c>0</c> returned.
            This behavior is not correct and will be fixed in future to mask only missing table exceptions.
            Tracked by <a href="https://github.com/linq2db/linq2db/issues/798">issue</a>.
            Default value: <c>true</c>.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records. Usually <c>-1</c> as it is not data modification operation.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Truncate``1(LinqToDB.ITable{``0},System.Boolean)">
            <summary>
            Truncates database table.
            </summary>
            <typeparam name="T">Table record type.</typeparam>
            <param name="target">Truncated table.</param>
            <param name="resetIdentity">Performs reset identity column.</param>
            <returns>Number of affected records. Usually <c>-1</c> as it is not data modification operation.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.TruncateAsync``1(LinqToDB.ITable{``0},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Truncates database table asynchronously.
            </summary>
            <typeparam name="T">Table record type.</typeparam>
            <param name="target">Truncated table.</param>
            <param name="resetIdentity">Performs reset identity column.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records. Usually <c>-1</c> as it is not data modification operation.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Take``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}})">
            <summary>
            Limits number of records, returned from query.
            </summary>
            <typeparam name="TSource">Source table record type.</typeparam>
            <param name="source">Source query.</param>
            <param name="count">Expression that defines number of records to select.</param>
            <returns>Query with limit applied.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Take``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}},LinqToDB.TakeHints)">
            <summary>
            Limits number of records, returned from query. Allows to specify TAKE clause hints.
            Using this method may cause runtime <see cref="T:LinqToDB.Linq.LinqException"/> if take hints are not supported by database.
            </summary>
            <typeparam name="TSource">Source table record type.</typeparam>
            <param name="source">Source query.</param>
            <param name="count">Expression that defines SQL TAKE parameter value.</param>
            <param name="hints"><see cref="T:LinqToDB.TakeHints"/> hints for SQL TAKE clause.</param>
            <returns>Query with limit applied.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Take``1(System.Linq.IQueryable{``0},System.Int32,LinqToDB.TakeHints)">
            <summary>
            Limits number of records, returned from query. Allows to specify TAKE clause hints.
            Using this method may cause runtime <see cref="T:LinqToDB.Linq.LinqException"/> if take hints are not supported by database.
            </summary>
            <typeparam name="TSource">Source table record type.</typeparam>
            <param name="source">Source query.</param>
            <param name="count">SQL TAKE parameter value.</param>
            <param name="hints"><see cref="T:LinqToDB.TakeHints"/> hints for SQL TAKE clause.</param>
            <returns>Query with limit applied.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Skip``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}})">
            <summary>
            Ignores first N records from source query.
            </summary>
            <typeparam name="TSource">Source table record type.</typeparam>
            <param name="source">Source query.</param>
            <param name="count">Expression that defines number of records to skip.</param>
            <returns>Query without skipped records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.ElementAt``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}})">
            <summary>
            Selects record at specified position from source query.
            If query doesn't return enough records, <see cref="T:System.InvalidOperationException"/> will be thrown.
            </summary>
            <typeparam name="TSource">Source table record type.</typeparam>
            <param name="source">Source query.</param>
            <param name="index">Expression that defines index of record to select.</param>
            <exception cref="T:System.InvalidOperationException">Source query doesn't have record with specified index.</exception>
            <returns>Record at specified position.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.ElementAtAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Selects record at specified position from source query asynchronously.
            If query doesn't return enough records, <see cref="T:System.InvalidOperationException"/> will be thrown.
            </summary>
            <typeparam name="TSource">Source table record type.</typeparam>
            <param name="source">Source query.</param>
            <param name="index">Expression that defines index of record to select.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <exception cref="T:System.InvalidOperationException">Source query doesn't have record with specified index.</exception>
            <returns>Record at specified position.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}})">
            <summary>
            Selects record at specified position from source query.
            </summary>
            <typeparam name="TSource">Source table record type.</typeparam>
            <param name="source">Source query.</param>
            <param name="index">Expression that defines index of record to select.</param>
            <returns>Record at specified position or default value, if source query doesn't have record with such index.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.ElementAtOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Selects record at specified position from source query asynchronously.
            </summary>
            <typeparam name="TSource">Source table record type.</typeparam>
            <param name="source">Source query.</param>
            <param name="index">Expression that defines index of record to select.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Record at specified position or default value, if source query doesn't have record with such index.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Having``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Filters source query using HAVING SQL clause.
            In general you don't need to use this method as linq2db is able to propely identify current context for
            <see cref="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})"/> method and generate
            HAVING clause.
            <a href="https://github.com/linq2db/linq2db/issues/133">More details</a>.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <param name="source">Source query to filter.</param>
            <param name="predicate">Filtering expression.</param>
            <returns>Filtered query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.ThenOrBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Adds ascending sort expression to a query.
            If query already sorted, existing sorting will be preserved and updated with new sort.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TKey">Sort expression type.</typeparam>
            <param name="source">Source query.</param>
            <param name="keySelector">Sort expression selector.</param>
            <returns>Sorted query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.ThenOrByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Adds descending sort expression to a query.
            If query already sorted, existing sorting will be preserved and updated with new sort.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TKey">Sort expression type.</typeparam>
            <param name="source">Source query.</param>
            <param name="keySelector">Sort expression selector.</param>
            <returns>Sorted query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.RemoveOrderBy``1(System.Linq.IQueryable{``0})">
            <summary>
            Removes ordering from current query.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <param name="source">Source query.</param>
            <returns>Unsorted query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.GetContext``1(System.Linq.IQueryable{``0})">
            <summary>
            Converts query to <see cref="T:LinqToDB.Linq.Builder.ContextParser.Context"/> object, used by merge operation generator.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <param name="source">Source query.</param>
            <returns>Query context object.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Join``1(System.Linq.IQueryable{``0},LinqToDB.SqlJoinType,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Defines inner or outer join between two sub-queries or tables.
            </summary>
            <typeparam name="TSource">Type of record for right join operand.</typeparam>
            <param name="source">Right join operand.</param>
            <param name="joinType">Type of join.</param>
            <param name="predicate">Join predicate.</param>
            <returns>Right operand.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Join``3(System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},LinqToDB.SqlJoinType,System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
            Defines inner or outer join between two sub-queries or tables.
            </summary>
            <typeparam name="TOuter">Type of record for left join operand.</typeparam>
            <typeparam name="TInner">Type of record for right join operand.</typeparam>
            <typeparam name="TResult">The type of the result elements.</typeparam>
            <param name="outer">Left join operand.</param>
            <param name="inner">Right join operand.</param>
            <param name="joinType">Type of join.</param>
            <param name="predicate">Join predicate.</param>
            <param name="resultSelector">A function to create a result element from two matching elements.</param>
            <returns>Right operand.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InnerJoin``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Defines inner join between two sub-queries or tables.
            </summary>
            <typeparam name="TSource">Type of record for right join operand.</typeparam>
            <param name="source">Right join operand.</param>
            <param name="predicate">Join predicate.</param>
            <returns>Right operand.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InnerJoin``3(System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
            Defines inner or outer join between two sub-queries or tables.
            </summary>
            <typeparam name="TOuter">Type of record for left join operand.</typeparam>
            <typeparam name="TInner">Type of record for right join operand.</typeparam>
            <typeparam name="TResult">The type of the result elements.</typeparam>
            <param name="outer">Left join operand.</param>
            <param name="inner">Right join operand.</param>
            <param name="predicate">Join predicate.</param>
            <param name="resultSelector">A function to create a result element from two matching elements.</param>
            <returns>Right operand.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.LeftJoin``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Defines left outer join between two sub-queries or tables.
            </summary>
            <typeparam name="TSource">Type of record for right join operand.</typeparam>
            <param name="source">Right join operand.</param>
            <param name="predicate">Join predicate.</param>
            <returns>Right operand.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.LeftJoin``3(System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
            Defines left outer join between two sub-queries or tables.
            </summary>
            <typeparam name="TOuter">Type of record for left join operand.</typeparam>
            <typeparam name="TInner">Type of record for right join operand.</typeparam>
            <typeparam name="TResult">The type of the result elements.</typeparam>
            <param name="outer">Left join operand.</param>
            <param name="inner">Right join operand.</param>
            <param name="predicate">Join predicate.</param>
            <param name="resultSelector">A function to create a result element from two matching elements.</param>
            <returns>Right operand.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.RightJoin``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Defines right outer join between two sub-queries or tables.
            </summary>
            <typeparam name="TSource">Type of record for right join operand.</typeparam>
            <param name="source">Right join operand.</param>
            <param name="predicate">Join predicate.</param>
            <returns>Right operand.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.RightJoin``3(System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
            Defines right outer join between two sub-queries or tables.
            </summary>
            <typeparam name="TOuter">Type of record for left join operand.</typeparam>
            <typeparam name="TInner">Type of record for right join operand.</typeparam>
            <typeparam name="TResult">The type of the result elements.</typeparam>
            <param name="outer">Left join operand.</param>
            <param name="inner">Right join operand.</param>
            <param name="predicate">Join predicate.</param>
            <param name="resultSelector">A function to create a result element from two matching elements.</param>
            <returns>Right operand.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.FullJoin``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Defines full outer join between two sub-queries or tables.
            </summary>
            <typeparam name="TSource">Type of record for right join operand.</typeparam>
            <param name="source">Right join operand.</param>
            <param name="predicate">Join predicate.</param>
            <returns>Right operand.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.FullJoin``3(System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
            Defines full outer join between two sub-queries or tables.
            </summary>
            <typeparam name="TOuter">Type of record for left join operand.</typeparam>
            <typeparam name="TInner">Type of record for right join operand.</typeparam>
            <typeparam name="TResult">The type of the result elements.</typeparam>
            <param name="outer">Left join operand.</param>
            <param name="inner">Right join operand.</param>
            <param name="predicate">Join predicate.</param>
            <param name="resultSelector">A function to create a result element from two matching elements.</param>
            <returns>Right operand.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.CrossJoin``3(System.Linq.IQueryable{``0},System.Linq.IQueryable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
            Defines cross join between two sub-queries or tables.
            </summary>
            <typeparam name="TOuter">Type of record for left join operand.</typeparam>
            <typeparam name="TInner">Type of record for right join operand.</typeparam>
            <typeparam name="TResult">The type of the result elements.</typeparam>
            <param name="outer">Left join operand.</param>
            <param name="inner">Right join operand.</param>
            <param name="resultSelector">A function to create a result element from two matching elements.</param>
            <returns>Right operand.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.AsCte``1(System.Linq.IQueryable{``0})">
            <summary>
            Specifies a temporary named result set, known as a common table expression (CTE).
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <param name="source">Source query.</param>
            <returns>Common table expression.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.AsCte``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Specifies a temporary named result set, known as a common table expression (CTE).
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <param name="source">Source query.</param>
            <param name="name">Common table expression name.</param>
            <returns>Common table expression.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.AsQueryable``1(System.Collections.Generic.IEnumerable{``0},LinqToDB.IDataContext)">
            <summary>Converts a generic <see cref="T:System.Collections.Generic.IEnumerable`1" /> to Linq To DB query.</summary>
            <param name="source">A sequence to convert.</param>
            <param name="dataContext">Database connection context.</param>
            <typeparam name="TElement">The type of the elements of <paramref name="source" />.</typeparam>
            <returns>An <see cref="T:System.Linq.IQueryable`1" /> that represents the input sequence.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:LinqToDB.LinqExtensions.AsSubQuery``1(System.Linq.IQueryable{``0})">
            <summary>
            Defines that sub-query is mandatory for <paramref name="source"/> query and cannot be removed during the query optimization.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <param name="source">Source data query.</param>
            <returns>Query converted into sub-query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.AsSubQuery``2(System.Linq.IQueryable{System.Linq.IGrouping{``0,``1}})">
            <summary>
            Defines that sub-query is mandatory for <paramref name="grouping"/> query and cannot be removed during the query optimization.
            </summary>
            <typeparam name="TKey">The type of the key of the <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
            <typeparam name="TElement">The type of the values in the <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
            <param name="grouping">Source data query.</param>
            <returns>Query converted into sub-query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.AsSubQuery``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Defines that sub-query is mandatory for <paramref name="source"/> query and cannot be removed during the query optimization.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <param name="source">Source data query.</param>
            <param name="queryName">Query name.</param>
            <returns>Query converted into sub-query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.AsSubQuery``2(System.Linq.IQueryable{System.Linq.IGrouping{``0,``1}},System.String)">
            <summary>
            Defines that sub-query is mandatory for <paramref name="grouping"/> query and cannot be removed during the query optimization.
            </summary>
            <typeparam name="TKey">The type of the key of the <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
            <typeparam name="TElement">The type of the values in the <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
            <param name="grouping">Source data query.</param>
            <param name="queryName">Query name.</param>
            <returns>Query converted into sub-query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.QueryName``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Defines query name for specified sub-query. The query cannot be removed during the query optimization.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <param name="source">Source data query.</param>
            <param name="queryName">Query name.</param>
            <returns>Query converted into sub-query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.QueryName``2(System.Linq.IQueryable{System.Linq.IGrouping{``0,``1}},System.String)">
            <summary>
            Defines query name for specified sub-query. The query cannot be removed during the query optimization.
            </summary>
            <typeparam name="TKey">The type of the key of the <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
            <typeparam name="TElement">The type of the values in the <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
            <param name="grouping">Source data query.</param>
            <param name="queryName">Query name.</param>
            <returns>Query converted into sub-query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InlineParameters``1(System.Linq.IQueryable{``0})">
            <summary>
            Inline parameters in query which can be converted to SQL Literal.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <param name="source">Source data query.</param>
            <returns>Query with inlined parameters.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.DisableGuard``2(System.Linq.IQueryable{System.Linq.IGrouping{``0,``1}})">
            <summary>
            Disables grouping guard for particular <paramref name="grouping"/> query.
            </summary>
            <typeparam name="TKey">The type of the key of the <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
            <typeparam name="TElement">The type of the values in the <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
            <param name="grouping">Source data query.</param>
            <returns>Query with suppressed grouping guard.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.HasUniqueKey``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Records unique key for IQueryable. It allows sub-query to be optimized out in LEFT JOIN if columns from sub-query are not used in final projection and predicate.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TKey">Key type.</typeparam>
            <param name="source">Source data query.</param>
            <param name="keySelector">A function to specify which fields are unique.</param>
            <returns>Query converted into sub-query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UnionAll``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>Concatenates two sequences, similar to <see cref="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})"/>.</summary>
            <param name="source1">The first sequence to concatenate.</param>
            <param name="source2">The sequence to concatenate to the first sequence.</param>
            <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
            <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains the concatenated elements of the two input sequences.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source1" /> or <paramref name="source2" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:LinqToDB.LinqExtensions.ExceptAll``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>Produces the set difference of two sequences.</summary>
            <param name="source1">An <see cref="T:System.Linq.IQueryable`1" /> whose elements that are not also in <paramref name="source2" /> will be returned.</param>
            <param name="source2">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that also occur in the first sequence will not appear in the returned sequence.</param>
            <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
            <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains the set difference of the two sequences.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source1" /> or <paramref name="source2" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:LinqToDB.LinqExtensions.IntersectAll``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>Produces the set intersection of two sequences.</summary>
            <param name="source1">A sequence whose elements that also appear in <paramref name="source2" /> are returned.</param>
            <param name="source2">A sequence whose elements that also appear in the first sequence are returned.</param>
            <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
            <returns>A sequence that contains the set intersection of the two sequences.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source1" /> or <paramref name="source2" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:LinqToDB.LinqExtensions.IgnoreFilters``1(System.Linq.IQueryable{``0},System.Type[])">
            <summary>
            Disables Query Filters in current query.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <param name="source">Source query.</param>
            <param name="entityTypes">Optional types with which filters should be disabled.</param>
            <returns>Query with disabled filters.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.GenerateTestString(System.Linq.IQueryable,System.Boolean)">
            <summary>
            Generates test source code for specified query.
            This method could be usefull to debug queries and attach test code to linq2db issue reports.
            </summary>
            <param name="query">Query to test.</param>
            <param name="mangleNames">Should we use real names for used types, members and namespace or generate obfuscated names.</param>
            <returns>Test source code.</returns>
        </member>
        <member name="P:LinqToDB.LinqExtensions.ProcessSourceQueryable">
            <summary>
            Gets or sets callback for preprocessing query before execution.
            Useful for intercepting queries.
            </summary>
        </member>
        <member name="M:LinqToDB.LinqExtensions.SelectDistinct``1(System.Linq.IQueryable{``0})">
            <summary>
            Marks SelectQuery as Distinct.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <param name="source">Source query.</param>
            <returns>Distinct query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.TagQuery``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Adds a tag comment before generated query.
            <code>
            The example below will produce following code before generated query: /* my tag */\r\n
            db.Table.TagQuery("my tag");
            </code>
            </summary>
            <typeparam name="TSource">Table record mapping class.</typeparam>
            <param name="source">Source data query.</param>
            <param name="tagValue">Tag text to be added as comment before generated query.</param>
            <returns>Query with tag.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.TagQuery``1(LinqToDB.ITable{``0},System.String)">
            <summary>
            Adds a tag comment before generated query for table.
            <code>
            The example below will produce following code before generated query: /* my tag */\r\n
            db.Table.TagQuery("my tag");
            </code>
            </summary>
            <typeparam name="T">Table record mapping class.</typeparam>
            <param name="table">Table-like query source.</param>
            <param name="tagValue">Tag text to be added as comment before generated query.</param>
            <returns>Table-like query source with tag.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.DeleteWithOutput``1(System.Linq.IQueryable{``0})">
            <summary>
            Deletes records from source query and returns deleted records.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <param name="source">Source query, that returns data for delete operation.</param>
            <returns>Enumeration of records.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            <item>Firebird 2.5+ (doesn't support more than one record; database limitation)</item>
            <item>PostgreSQL</item>
            <item>SQLite 3.35+</item>
            <item>MariaDB 10.0+ (doesn't support multi-table statements; database limitation)</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.DeleteWithOutputAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Deletes records from source query into target table asynchronously and returns deleted records.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <param name="source">Source query, that returns data for delete operation.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Array of records.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            <item>Firebird 2.5+ (doesn't support more than one record; database limitation)</item>
            <item>PostgreSQL</item>
            <item>SQLite 3.35+</item>
            <item>MariaDB 10.0+ (doesn't support multi-table statements; database limitation)</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.DeleteWithOutput``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Deletes records from source query into target table and returns deleted records.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TOutput">Output table record type.</typeparam>
            <param name="source">Source query, that returns data for delete operation.</param>
            <param name="outputExpression">Output record constructor expression.
            Expression supports only record new expression with field initializers.</param>
            <returns>Enumeration of records.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            <item>Firebird 2.5+ (doesn't support more than one record; database limitation)</item>
            <item>PostgreSQL</item>
            <item>SQLite 3.35+</item>
            <item>MariaDB 10.0+ (doesn't support multi-table statements; database limitation)</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.DeleteWithOutputAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            Deletes records from source query into target table asynchronously and returns deleted records.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TOutput">Output table record type.</typeparam>
            <param name="source">Source query, that returns data for delete operation.</param>
            <param name="outputExpression">Output record constructor expression.
            Expression supports only record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Array of records.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            <item>Firebird 2.5+ (doesn't support more than one record; database limitation)</item>
            <item>PostgreSQL</item>
            <item>SQLite 3.35+</item>
            <item>MariaDB 10.0+ (doesn't support multi-table statements; database limitation)</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.DeleteWithOutputInto``2(System.Linq.IQueryable{``0},LinqToDB.ITable{``1})">
            <summary>
            Deletes records from source query into target table and outputs deleted records into <paramref name="outputTable"/>.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TOutput">Output table record type.</typeparam>
            <param name="source">Source query, that returns data for delete operation.</param>
            <param name="outputTable">Output table.</param>
            <returns>Number of affected records.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.DeleteWithOutputIntoAsync``2(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Threading.CancellationToken)">
            <summary>
            Deletes records from source query into target table asynchronously and outputs deleted records into <paramref name="outputTable"/>.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TOutput">Output table record type.</typeparam>
            <param name="source">Source query, that returns data for delete operation.</param>
            <param name="outputTable">Output table.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.DeleteWithOutputInto``2(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Deletes records from source query into target table and outputs deleted records into <paramref name="outputTable"/>.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TOutput">Output table record type.</typeparam>
            <param name="source">Source query, that returns data for delete operation.</param>
            <param name="outputTable">Output table.</param>
            <param name="outputExpression">Output record constructor expression.
            Expression supports only record new expression with field initializers.</param>
            <returns>Number of affected records.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.DeleteWithOutputIntoAsync``2(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            Deletes records from source query into target table asynchronously and outputs deleted records into <paramref name="outputTable"/>.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TOutput">Output table record type.</typeparam>
            <param name="source">Source query, that returns data for delete operation.</param>
            <param name="outputTable">Output table.</param>
            <param name="outputExpression">Output record constructor expression.
            Expression supports only record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithOutput``1(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Inserts single record into target table and returns inserted record.
            </summary>
            <typeparam name="TTarget">Inserted record type.</typeparam>
            <param name="target">Target table.</param>
            <param name="setter">Insert expression. Expression supports only target table record new expression with field initializers.</param>
            <returns>Inserted record.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            <item>Firebird 2.5+</item>
            <item>PostgreSQL</item>
            <item>SQLite 3.35+</item>
            <item>MariaDB 10.5+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithOutputAsync``1(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0}},System.Threading.CancellationToken)">
            <summary>
            Inserts single record into target table asynchronously and returns inserted record.
            </summary>
            <typeparam name="TTarget">Inserted record type.</typeparam>
            <param name="target">Target table.</param>
            <param name="setter">Insert expression. Expression supports only target table record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Inserted record.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            <item>Firebird 2.5+</item>
            <item>PostgreSQL</item>
            <item>SQLite 3.35+</item>
            <item>MariaDB 10.5+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithOutput``1(LinqToDB.ITable{``0},``0)">
            <summary>
            Inserts single record into target table and returns inserted record.
            </summary>
            <typeparam name="TTarget">Inserted record type.</typeparam>
            <param name="target">Target table.</param>
            <param name="obj">Object with data to insert.</param>
            <returns>Inserted record.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            <item>Firebird 2.5+</item>
            <item>PostgreSQL</item>
            <item>SQLite 3.35+</item>
            <item>MariaDB 10.5+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithOutputAsync``1(LinqToDB.ITable{``0},``0,System.Threading.CancellationToken)">
            <summary>
            Inserts single record into target table asynchronously and returns inserted record.
            </summary>
            <typeparam name="TTarget">Inserted record type.</typeparam>
            <param name="target">Target table.</param>
            <param name="obj">Object with data to insert.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Inserted record.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            <item>Firebird 2.5+</item>
            <item>PostgreSQL</item>
            <item>SQLite 3.35+</item>
            <item>MariaDB 10.5+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithOutput``2(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Inserts single record into target table and returns inserted record.
            </summary>
            <typeparam name="TTarget">Inserted record type.</typeparam>
            <typeparam name="TOutput">Output table record type.</typeparam>
            <param name="target">Target table.</param>
            <param name="setter">Insert expression. Expression supports only target table record new expression with field initializers.</param>
            <param name="outputExpression">Output record constructor expression.
            Expression supports only record new expression with field initializers.</param>
            <returns>Inserted record.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            <item>Firebird 2.5+</item>
            <item>PostgreSQL</item>
            <item>SQLite 3.35+</item>
            <item>MariaDB 10.5+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithOutputAsync``2(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            Inserts single record into target table asynchronously and returns inserted record.
            </summary>
            <typeparam name="TTarget">Inserted record type.</typeparam>
            <typeparam name="TOutput">Output table record type.</typeparam>
            <param name="target">Target table.</param>
            <param name="setter">Insert expression. Expression supports only target table record new expression with field initializers.</param>
            <param name="outputExpression">Output record constructor expression.
            Expression supports only record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Inserted record.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            <item>Firebird 2.5+</item>
            <item>PostgreSQL</item>
            <item>SQLite 3.35+</item>
            <item>MariaDB 10.5+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithOutputInto``1(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0}},LinqToDB.ITable{``0})">
            <summary>
            Inserts single record into target table and outputs that record into <paramref name="outputTable"/>.
            </summary>
            <typeparam name="TTarget">Inserted record type.</typeparam>
            <param name="target">Target table.</param>
            <param name="setter">Insert expression. Expression supports only target table record new expression with field initializers.</param>
            <param name="outputTable">Output table.</param>
            <returns>Number of affected records.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithOutputIntoAsync``1(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0}},LinqToDB.ITable{``0},System.Threading.CancellationToken)">
            <summary>
            Inserts single record into target table asynchronously and outputs that record into <paramref name="outputTable"/>.
            </summary>
            <typeparam name="TTarget">Inserted record type.</typeparam>
            <param name="target">Target table.</param>
            <param name="setter">Insert expression. Expression supports only target table record new expression with field initializers.</param>
            <param name="outputTable">Output table.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithOutputInto``2(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0}},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Inserts single record into target table and outputs that record into <paramref name="outputTable"/>.
            </summary>
            <typeparam name="TTarget">Inserted record type.</typeparam>
            <typeparam name="TOutput">Output table record type.</typeparam>
            <param name="target">Target table.</param>
            <param name="setter">Insert expression. Expression supports only target table record new expression with field initializers.</param>
            <param name="outputTable">Output table.</param>
            <param name="outputExpression">Output record constructor expression.
            Expression supports only record new expression with field initializers.</param>
            <returns>Number of affected records.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithOutputIntoAsync``2(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0}},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            Inserts single record into target table asynchronously and outputs that record into <paramref name="outputTable"/>.
            </summary>
            <typeparam name="TTarget">Inserted record type.</typeparam>
            <typeparam name="TOutput">Output table record type.</typeparam>
            <param name="target">Target table.</param>
            <param name="setter">Insert expression. Expression supports only target table record new expression with field initializers.</param>
            <param name="outputTable">Output table.</param>
            <param name="outputExpression">Output record constructor expression.
            Expression supports only record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithOutput``2(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Inserts records from source query into target table and returns newly created records.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type.</typeparam>
            <param name="source">Source query, that returns data for insert operation.</param>
            <param name="target">Target table.</param>
            <param name="setter">Inserted record constructor expression.
            Expression supports only target table record new expression with field initializers.</param>
            <returns>Enumeration of records.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            <item>Firebird 2.5+ (doesn't support more than one record; database limitation)</item>
            <item>PostgreSQL</item>
            <item>SQLite 3.35+</item>
            <item>MariaDB 10.5+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithOutputAsync``2(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            Inserts records from source query into target table asynchronously and returns newly created records.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type.</typeparam>
            <param name="source">Source query, that returns data for insert operation.</param>
            <param name="target">Target table.</param>
            <param name="setter">Inserted record constructor expression.
            Expression supports only target table record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Array of records.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            <item>Firebird 2.5+ (doesn't support more than one record; database limitation)</item>
            <item>PostgreSQL</item>
            <item>SQLite 3.35+</item>
            <item>MariaDB 10.5+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithOutput``3(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>
            Inserts records from source query into target table and returns newly created records.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type.</typeparam>
            <typeparam name="TOutput">Output table record type.</typeparam>
            <param name="source">Source query, that returns data for insert operation.</param>
            <param name="target">Target table.</param>
            <param name="setter">Inserted record constructor expression.
            Expression supports only target table record new expression with field initializers.</param>
            <param name="outputExpression">Output record constructor expression.
            Expression supports only record new expression with field initializers.</param>
            <returns>Enumeration of records.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            <item>Firebird 2.5+ (doesn't support more than one record; database limitation)</item>
            <item>PostgreSQL</item>
            <item>SQLite 3.35+</item>
            <item>MariaDB 10.5+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithOutputAsync``3(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Threading.CancellationToken)">
            <summary>
            Inserts records from source query into target table asynchronously and returns newly created records.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type.</typeparam>
            <typeparam name="TOutput">Output table record type.</typeparam>
            <param name="source">Source query, that returns data for insert operation.</param>
            <param name="target">Target table.</param>
            <param name="setter">Inserted record constructor expression.
            Expression supports only target table record new expression with field initializers.</param>
            <param name="outputExpression">Output record constructor expression.
            Expression supports only record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Array of records.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            <item>Firebird 2.5+ (doesn't support more than one record; database limitation)</item>
            <item>PostgreSQL</item>
            <item>SQLite 3.35+</item>
            <item>MariaDB 10.5+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithOutputInto``2(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}},LinqToDB.ITable{``1})">
            <summary>
            Inserts records from source query into target table and outputs newly created records into <paramref name="outputTable"/>.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type.</typeparam>
            <param name="source">Source query, that returns data for insert operation.</param>
            <param name="target">Target table.</param>
            <param name="setter">Inserted record constructor expression.
            Expression supports only target table record new expression with field initializers.</param>
            <param name="outputTable">Output table.</param>
            <returns>Number of affected records.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithOutputIntoAsync``2(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}},LinqToDB.ITable{``1},System.Threading.CancellationToken)">
            <summary>
            Inserts records from source query into target table asynchronously and outputs inserted records into <paramref name="outputTable"/>.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type.</typeparam>
            <param name="source">Source query, that returns data for insert operation.</param>
            <param name="target">Target table.</param>
            <param name="setter">Inserted record constructor expression.
            Expression supports only target table record new expression with field initializers.</param>
            <param name="outputTable">Output table.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithOutputInto``3(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}},LinqToDB.ITable{``2},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>
            Inserts records from source query into target table and outputs inserted records into <paramref name="outputTable"/>.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type.</typeparam>
            <typeparam name="TOutput">Output table record type.</typeparam>
            <param name="source">Source query, that returns data for insert operation.</param>
            <param name="target">Target table.</param>
            <param name="setter">Inserted record constructor expression.
            Expression supports only target table record new expression with field initializers.</param>
            <param name="outputTable">Output table.</param>
            <param name="outputExpression">Output record constructor expression.
            Expression supports only record new expression with field initializers.</param>
            <returns>Number of affected records.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithOutputIntoAsync``3(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}},LinqToDB.ITable{``2},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Threading.CancellationToken)">
            <summary>
            Inserts records from source query into target table asynchronously and outputs inserted records into <paramref name="outputTable"/>.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type.</typeparam>
            <typeparam name="TOutput">Output table record type.</typeparam>
            <param name="source">Source query, that returns data for insert operation.</param>
            <param name="target">Target table.</param>
            <param name="setter">Inserted record constructor expression.
            Expression supports only target table record new expression with field initializers.</param>
            <param name="outputTable">Output table.</param>
            <param name="outputExpression">Output record constructor expression.
            Expression supports only record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithOutput``2(LinqToDB.Linq.ISelectInsertable{``0,``1})">
            <summary>
            Executes configured insert query and returns inserted record.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <returns>Inserted record.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            <item>Firebird 2.5+ (doesn't support more than one record; database limitation)</item>
            <item>PostgreSQL</item>
            <item>SQLite 3.35+</item>
            <item>MariaDB 10.5+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithOutputAsync``2(LinqToDB.Linq.ISelectInsertable{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Executes configured insert query asynchronously and returns inserted record.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Inserted record.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            <item>Firebird 2.5+ (doesn't support more than one record; database limitation)</item>
            <item>PostgreSQL</item>
            <item>SQLite 3.35+</item>
            <item>MariaDB 10.5+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithOutputInto``2(LinqToDB.Linq.ISelectInsertable{``0,``1},LinqToDB.ITable{``1})">
            <summary>
            Executes configured insert query and returns inserted record.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <param name="outputTable">Output table.</param>
            <returns>Number of affected records.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithOutputIntoAsync``2(LinqToDB.Linq.ISelectInsertable{``0,``1},LinqToDB.ITable{``1},System.Threading.CancellationToken)">
            <summary>
            Executes configured insert query asynchronously and returns inserted record.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <param name="outputTable">Output table.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.LoadWithAsTable``1(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
             <summary>
             Specifies associations, that should be loaded for each loaded record from current table.
             All associations, specified in <paramref name="selector"/> expression, will be loaded.
             Take into account that use of this method could require multiple queries to load all requested associations.
             Some usage examples:
             <code>
             // loads records from Table1 with Reference association loaded for each Table1 record
             db.Table1.LoadWithAsTable(r => r.Reference);
            
             // loads records from Table1 with Reference1 association loaded for each Table1 record
             // loads records from Reference2 association for each loaded Reference1 record
             db.Table1.LoadWithAsTable(r => r.Reference1.Reference2);
            
             // loads records from Table1 with References collection association loaded for each Table1 record
             db.Table1.LoadWithAsTable(r => r.References);
            
             // loads records from Table1 with Reference1 collection association loaded for each Table1 record
             // loads records from Reference2 collection association for each loaded Reference1 record
             // loads records from Reference3 association for each loaded Reference2 record
             // note that a way you access collection association record (by index, using First() method) doesn't affect
             // query results and always select all records
             db.Table1.LoadWithAsTable(r => r.References1[0].References2.First().Reference3);
             </code>
             </summary>
             <typeparam name="T">Table record mapping class.</typeparam>
             <param name="table">Table-like query source.</param>
             <param name="selector">Association selection expression.</param>
             <returns>Table-like query source.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.LoadWith``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Specifies associations that should be loaded for each loaded record from current table.
            All associations, specified in <paramref name="selector"/> expression, will be loaded.
            Take into account that use of this method could require multiple queries to load all requested associations.
            </summary>
            <example>
            <para>
                <para>
                    Following query loads records from Table1 with Reference association, loaded for each Table1 record.
                    <code>
                        db.Table1.LoadWith(r => r.Reference);
                    </code>
                </para>
                <para>
                    Following queries loads records from Table1 with Reference1 association and then loads records from Reference2 association for each loaded Reference1 record.
                    <code>
                        db.Table1.LoadWith(r => r.Reference1.Reference2);
                    </code>
                    Same query using ThenLoad extension.
                    <code>
                        db.Table1.LoadWith(r => r.Reference1).ThenLoad(r => r.Reference2);
                    </code>
                </para>
                <para>
                    Following query loads records from Table1 with References collection association loaded for each Table1 record.
                    <code>
                        db.Table1.LoadWith(r => r.References);
                    </code>
                </para>
                <para>
                    Following query loads records from Table1 with References collection association loaded for each Table1 record. Also it limits loaded records.
                    <code>
                        db.Table1.LoadWith(r => r.References.Where(e => !e.IsDeleted).Take(10));
                    </code>
                </para>
                <para>
                    Following query loads records from Table1 with:
                    - Reference1 collection association loaded for each Table1 record;
                    - Reference2 collection association for each loaded Reference1 record;
                    - Reference3 association for each loaded Reference2 record.
                <para>
                    Note that a way you access collection association record (by index, using First() method) doesn't affect query results and always select all records.
                </para>
                    <code>
                        db.Table1.LoadWith(r => r.References1[0].References2.First().Reference3);
                    </code>
                    Same query using ThenLoad extension.
                    <code>
                        db.Table1.LoadWith(r => r.References1).ThenLoad(r => r.References2).ThenLoad(r => r.Reference3);
                    </code>
                </para>
            </para>
            </example>
            <typeparam name="TEntity">Type of entity being queried.</typeparam>
            <typeparam name="TProperty">Type of the related entity to be included.</typeparam>
            <param name="source">The source query.</param>
            <param name="selector">A lambda expression representing navigation property to be included (<c>t => t.Property1</c>).</param>
            <returns>Returns new query with related data included.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.LoadWith``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{System.Linq.IQueryable{``1},System.Linq.IQueryable{``1}}})">
            <summary>
            Specifies associations that should be loaded for each loaded record from current table.
            All associations, specified in <paramref name="selector"/> expression, will be loaded.
            Take into account that use of this method could require multiple queries to load all requested associations.
            <paramref name="loadFunc"/> parameter could be used to define additional association loading logic like filters or loading of more associations.
            </summary>
            <example>
            <para>
                <para>
                    Following query loads records from Table1 with Reference association, loaded for each Table1 record.
                    <code>
                        db.Table1.LoadWith(r => r.Reference);
                    </code>
                </para>
                <para>
                    Following queries loads records from Table1 with Reference1 association and then loads records from Reference2 association for each loaded Reference1 record.
                    <code>
                        db.Table1.LoadWith(r => r.Reference1.Reference2);
                    </code>
                    Same query using ThenLoad extension.
                    <code>
                        db.Table1.LoadWith(r => r.Reference1).ThenLoad(r => r.Reference2);
                    </code>
                </para>
                <para>
                    Following query loads records from Table1 with References collection association loaded for each Table1 record.
                    <code>
                        db.Table1.LoadWith(r => r.References);
                    </code>
                </para>
                <para>
                    Following query loads records from Table1 with:
                    - Reference1 collection association loaded for each Table1 record;
                    - Reference2 collection association for each loaded Reference1 record;
                    - Reference3 association for each loaded Reference2 record.
                <para>
                    Note that a way you access collection association record (by index, using First() method) doesn't affect query results and always select all records.
                </para>
                    <code>
                        db.Table1.LoadWith(r => r.References1[0].References2.First().Reference3);
                    </code>
                    Same query using ThenLoad extension.
                    <code>
                        db.Table1.LoadWith(r => r.References1).ThenLoad(r => r.References2).ThenLoad(r => r.Reference3);
                    </code>
                </para>
                <para>
                    Following query loads records from Table1 with References collection association loaded for each Table1 record, where References record
                    contains only records without "exclude" text in Name property.
                    <code>
                        db.Table1.LoadWith(r => r.References, r => r.Where(rr => !rr.Name.Contains("exclude")));
                    </code>
                </para>
                <para>
                    Following query loads records from Table1 with References1 collection association loaded for each Table1 record, where References1 record
                    also load Reference2 association.
                    <code>
                        db.Table1.LoadWith(r => r.References1, r => r.LoadWith(rr => rr.Reference2));
                    </code>
                </para>
            </para>
            </example>
            <typeparam name="TEntity">Type of entity being queried.</typeparam>
            <typeparam name="TProperty">Type of the related entity to be included.</typeparam>
            <param name="source">The source query.</param>
            <param name="selector">A lambda expression representing navigation property to be included (<c>t => t.Property1</c>).</param>
            <param name="loadFunc">Defines additional logic for association load query.</param>
            <returns>Returns new query with related data included.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.LoadWith``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{System.Linq.IQueryable{``1},System.Linq.IQueryable{``1}}})">
            <summary>
            Specifies associations that should be loaded for each loaded record from current table.
            All associations, specified in <paramref name="selector"/> expression, will be loaded.
            Take into account that use of this method could require multiple queries to load all requested associations.
            <paramref name="loadFunc"/> parameter could be used to define additional association loading logic like filters or loading of more associations.
            </summary>
            <example>
            <para>
                <para>
                    Following query loads records from Table1 with Reference association, loaded for each Table1 record.
                    <code>
                        db.Table1.LoadWith(r => r.Reference);
                    </code>
                </para>
                <para>
                    Following queries loads records from Table1 with Reference1 association and then loads records from Reference2 association for each loaded Reference1 record.
                    <code>
                        db.Table1.LoadWith(r => r.Reference1.Reference2);
                    </code>
                    Same query using ThenLoad extension.
                    <code>
                        db.Table1.LoadWith(r => r.Reference1).ThenLoad(r => r.Reference2);
                    </code>
                </para>
                <para>
                    Following query loads records from Table1 with References collection association loaded for each Table1 record.
                    <code>
                        db.Table1.LoadWith(r => r.References);
                    </code>
                </para>
                <para>
                    Following query loads records from Table1 with:
                    - Reference1 collection association loaded for each Table1 record;
                    - Reference2 collection association for each loaded Reference1 record;
                    - Reference3 association for each loaded Reference2 record.
                <para>
                    Note that a way you access collection association record (by index, using First() method) doesn't affect query results and always select all records.
                </para>
                    <code>
                        db.Table1.LoadWith(r => r.References1[0].References2.First().Reference3);
                    </code>
                    Same query using ThenLoad extension.
                    <code>
                        db.Table1.LoadWith(r => r.References1).ThenLoad(r => r.References2).ThenLoad(r => r.Reference3);
                    </code>
                </para>
                <para>
                    Following query loads records from Table1 with References collection association loaded for each Table1 record, where References record
                    contains only records without "exclude" text in Name property.
                    <code>
                        db.Table1.LoadWith(r => r.References, r => r.Where(rr => !rr.Name.Contains("exclude")));
                    </code>
                </para>
                <para>
                    Following query loads records from Table1 with References1 collection association loaded for each Table1 record, where References1 record
                    also load Reference2 association.
                    <code>
                        db.Table1.LoadWith(r => r.References1, r => r.LoadWith(rr => rr.Reference2));
                    </code>
                </para>
            </para>
            </example>
            <typeparam name="TEntity">Type of entity being queried.</typeparam>
            <typeparam name="TProperty">Type of the related entity to be included.</typeparam>
            <param name="source">The source query.</param>
            <param name="selector">A lambda expression representing navigation property to be included (<c>t => t.Property1</c>).</param>
            <param name="loadFunc">Defines additional logic for association load query.</param>
            <returns>Returns new query with related data included.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.ThenLoad``3(LinqToDB.ILoadWithQueryable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>
            Specifies associations that should be loaded for parent association, loaded by previous LoadWith/ThenLoad call in chain.
            All associations, specified in <paramref name="selector"/> expression, will be loaded.
            Take into account that use of this method could require multiple queries to load all requested associations.
            </summary>
            <example>
            <para>
                <para>
                    Following queries loads records from Table1 with Reference1 association and then loads records from Reference2 association for each loaded Reference1 record.
                    <code>
                        db.Table1.LoadWith(r => r.Reference1.Reference2);
                    </code>
                    Same query using ThenLoad extension.
                    <code>
                        db.Table1.LoadWith(r => r.Reference1).ThenLoad(r => r.Reference2);
                    </code>
                </para>
                <para>
                    Note that a way you access collection association record (by index, using First() method) doesn't affect query results and always select all records.
                </para>
                <para>
                    <code>
                        db.Table1.LoadWith(r => r.References1[0].References2.First().Reference3);
                    </code>
                    Same query using ThenLoad extension.
                    <code>
                        db.Table1.LoadWith(r => r.References1).ThenLoad(r => r.References2).ThenLoad(r => r.Reference3);
                    </code>
                </para>
            </para>
            </example>
            <typeparam name="TEntity">Type of entity being queried.</typeparam>
            <typeparam name="TPreviousProperty">Type of parent association.</typeparam>
            <typeparam name="TProperty">Type of the related entity to be included.</typeparam>
            <param name="source">The source query.</param>
            <param name="selector">A lambda expression representing navigation property to be included (<c>t => t.Property1</c>).</param>
            <returns>Returns new query with related data included.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.ThenLoad``3(LinqToDB.ILoadWithQueryable{``0,System.Collections.Generic.IEnumerable{``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>
            Specifies associations that should be loaded for parent association, loaded by previous LoadWith/ThenLoad call in chain.
            All associations, specified in <paramref name="selector"/> expression, will be loaded.
            Take into account that use of this method could require multiple queries to load all requested associations.
            </summary>
            <example>
            <para>
                <para>
                    Following queries loads records from Table1 with Reference1 association and then loads records from Reference2 association for each loaded Reference1 record.
                    <code>
                        db.Table1.LoadWith(r => r.Reference1.Reference2);
                    </code>
                    Same query using ThenLoad extension.
                    <code>
                        db.Table1.LoadWith(r => r.Reference1).ThenLoad(r => r.Reference2);
                    </code>
                </para>
                <para>
                    Note that a way you access collection association record (by index, using First() method) doesn't affect query results and always select all records.
                </para>
                <para>
                    <code>
                        db.Table1.LoadWith(r => r.References1[0].References2.First().Reference3);
                    </code>
                    Same query using ThenLoad extension.
                    <code>
                        db.Table1.LoadWith(r => r.References1).ThenLoad(r => r.References2).ThenLoad(r => r.Reference3);
                    </code>
                </para>
            </para>
            </example>
            <typeparam name="TEntity">Type of entity being queried.</typeparam>
            <typeparam name="TPreviousProperty">Type of parent association.</typeparam>
            <typeparam name="TProperty">Type of the related entity to be included.</typeparam>
            <param name="source">The source query.</param>
            <param name="selector">A lambda expression representing navigation property to be included (<c>t => t.Property1</c>).</param>
            <returns>Returns new query with related data included.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.ThenLoad``3(LinqToDB.ILoadWithQueryable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2}}},System.Linq.Expressions.Expression{System.Func{System.Linq.IQueryable{``2},System.Linq.IQueryable{``2}}})">
            <summary>
            Specifies associations that should be loaded for parent association, loaded by previous LoadWith/ThenLoad call in chain.
            All associations, specified in <paramref name="selector"/> expression, will be loaded.
            Take into account that use of this method could require multiple queries to load all requested associations.
            <paramref name="loadFunc"/> parameter could be used to define additional association loading logic like filters or loading of more associations.
            </summary>
            <example>
            <para>
                <para>
                    Following queries loads records from Table1 with Reference1 association and then loads records from Reference2 association for each loaded Reference1 record.
                    <code>
                        db.Table1.LoadWith(r => r.Reference1.Reference2);
                    </code>
                    Same query using ThenLoad extension.
                    <code>
                        db.Table1.LoadWith(r => r.Reference1).ThenLoad(r => r.Reference2);
                    </code>
                </para>
                <para>
                    Note that a way you access collection association record (by index, using First() method) doesn't affect query results and always select all records.
                </para>
                <para>
                    <code>
                        db.Table1.LoadWith(r => r.References1[0].References2.First().Reference3);
                    </code>
                    Same query using ThenLoad extension.
                    <code>
                        db.Table1.LoadWith(r => r.References1).ThenLoad(r => r.References2).ThenLoad(r => r.Reference3);
                    </code>
                </para>
                <para>
                    Following query loads records from Table1 with References1 collection association loaded for each Table1 record with
                    References2 collection association loaded for each record in References1, with filter over References2 record
                    to include only records without "exclude" text in Name property.
                    <code>
                        db.Table1.LoadWith(r => r.References1).ThenLoad(r1 => r1.References2, r2 => r2.Where(rr2 => !rr2.Name.Contains("exclude")));
                    </code>
                </para>
            </para>
            </example>
            <typeparam name="TEntity">Type of entity being queried.</typeparam>
            <typeparam name="TPreviousProperty">Type of parent association.</typeparam>
            <typeparam name="TProperty">Type of the related entity to be included.</typeparam>
            <param name="source">The source query.</param>
            <param name="selector">A lambda expression representing navigation property to be included (<c>t => t.Property1</c>).</param>
            <param name="loadFunc">Defines additional logic for association load query.</param>
            <returns>Returns new query with related data included.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.ThenLoad``3(LinqToDB.ILoadWithQueryable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{System.Linq.IQueryable{``2},System.Linq.IQueryable{``2}}})">
            <summary>
            Specifies associations that should be loaded for parent association, loaded by previous LoadWith/ThenLoad call in chain.
            All associations, specified in <paramref name="selector"/> expression, will be loaded.
            Take into account that use of this method could require multiple queries to load all requested associations.
            <paramref name="loadFunc"/> parameter could be used to define additional association loading logic like filters or loading of more associations.
            </summary>
            <example>
            <para>
                <para>
                    Following queries loads records from Table1 with Reference1 association and then loads records from Reference2 association for each loaded Reference1 record.
                    <code>
                        db.Table1.LoadWith(r => r.Reference1.Reference2);
                    </code>
                    Same query using ThenLoad extension.
                    <code>
                        db.Table1.LoadWith(r => r.Reference1).ThenLoad(r => r.Reference2);
                    </code>
                </para>
                <para>
                    Note that a way you access collection association record (by index, using First() method) doesn't affect query results and always select all records.
                </para>
                <para>
                    <code>
                        db.Table1.LoadWith(r => r.References1[0].References2.First().Reference3);
                    </code>
                    Same query using ThenLoad extension.
                    <code>
                        db.Table1.LoadWith(r => r.References1).ThenLoad(r => r.References2).ThenLoad(r => r.Reference3);
                    </code>
                </para>
                <para>
                    Following query loads records from Table1 with References1 collection association loaded for each Table1 record with
                    References2 collection association loaded for each record in References1, with filter over References2 record
                    to include only records without "exclude" text in Name property.
                    <code>
                        db.Table1.LoadWith(r => r.References1).ThenLoad(r1 => r1.References2, r2 => r2.Where(rr2 => !rr2.Name.Contains("exclude")));
                    </code>
                </para>
            </para>
            </example>
            <typeparam name="TEntity">Type of entity being queried.</typeparam>
            <typeparam name="TPreviousProperty">Type of parent association.</typeparam>
            <typeparam name="TProperty">Type of the related entity to be included.</typeparam>
            <param name="source">The source query.</param>
            <param name="selector">A lambda expression representing navigation property to be included (<c>t => t.Property1</c>).</param>
            <param name="loadFunc">Defines additional logic for association load query.</param>
            <returns>Returns new query with related data included.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.ThenLoad``3(LinqToDB.ILoadWithQueryable{``0,System.Collections.Generic.IEnumerable{``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{System.Linq.IQueryable{``2},System.Linq.IQueryable{``2}}})">
            <summary>
            Specifies associations that should be loaded for parent association, loaded by previous LoadWith/ThenLoad call in chain.
            All associations, specified in <paramref name="selector"/> expression, will be loaded.
            Take into account that use of this method could require multiple queries to load all requested associations.
            <paramref name="loadFunc"/> parameter could be used to define additional association loading logic like filters or loading of more associations.
            </summary>
            <example>
            <para>
                <para>
                    Following queries loads records from Table1 with Reference1 association and then loads records from Reference2 association for each loaded Reference1 record.
                    <code>
                        db.Table1.LoadWith(r => r.Reference1.Reference2);
                    </code>
                    Same query using ThenLoad extension.
                    <code>
                        db.Table1.LoadWith(r => r.Reference1).ThenLoad(r => r.Reference2);
                    </code>
                </para>
                <para>
                    Note that a way you access collection association record (by index, using First() method) doesn't affect query results and always select all records.
                </para>
                <para>
                    <code>
                        db.Table1.LoadWith(r => r.References1[0].References2.First().Reference3);
                    </code>
                    Same query using ThenLoad extension.
                    <code>
                        db.Table1.LoadWith(r => r.References1).ThenLoad(r => r.References2).ThenLoad(r => r.Reference3);
                    </code>
                </para>
                <para>
                    Following query loads records from Table1 with References1 collection association loaded for each Table1 record with
                    References2 collection association loaded for each record in References1, with filter over References2 record
                    to include only records without "exclude" text in Name property.
                    <code>
                        db.Table1.LoadWith(r => r.References1).ThenLoad(r1 => r1.References2, r2 => r2.Where(rr2 => !rr2.Name.Contains("exclude")));
                    </code>
                </para>
            </para>
            </example>
            <typeparam name="TEntity">Type of entity being queried.</typeparam>
            <typeparam name="TPreviousProperty">Type of parent association.</typeparam>
            <typeparam name="TProperty">Type of the related entity to be included.</typeparam>
            <param name="source">The source query.</param>
            <param name="selector">A lambda expression representing navigation property to be included (<c>t => t.Property1</c>).</param>
            <param name="loadFunc">Defines additional logic for association load query.</param>
            <returns>Returns new query with related data included.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.ThenLoad``3(LinqToDB.ILoadWithQueryable{``0,System.Collections.Generic.IEnumerable{``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2}}},System.Linq.Expressions.Expression{System.Func{System.Linq.IQueryable{``2},System.Linq.IQueryable{``2}}})">
            <summary>
            Specifies associations that should be loaded for parent association, loaded by previous LoadWith/ThenLoad call in chain.
            All associations, specified in <paramref name="selector"/> expression, will be loaded.
            Take into account that use of this method could require multiple queries to load all requested associations.
            <paramref name="loadFunc"/> parameter could be used to define additional association loading logic like filters or loading of more associations.
            </summary>
            <example>
            <para>
                <para>
                    Following queries loads records from Table1 with Reference1 association and then loads records from Reference2 association for each loaded Reference1 record.
                    <code>
                        db.Table1.LoadWith(r => r.Reference1.Reference2);
                    </code>
                    Same query using ThenLoad extension.
                    <code>
                        db.Table1.LoadWith(r => r.Reference1).ThenLoad(r => r.Reference2);
                    </code>
                </para>
                <para>
                    Note that a way you access collection association record (by index, using First() method) doesn't affect query results and always select all records.
                </para>
                <para>
                    <code>
                        db.Table1.LoadWith(r => r.References1[0].References2.First().Reference3);
                    </code>
                    Same query using ThenLoad extension.
                    <code>
                        db.Table1.LoadWith(r => r.References1).ThenLoad(r => r.References2).ThenLoad(r => r.Reference3);
                    </code>
                </para>
                <para>
                    Following query loads records from Table1 with References1 collection association loaded for each Table1 record with
                    References2 collection association loaded for each record in References1, with filter over References2 record
                    to include only records without "exclude" text in Name property.
                    <code>
                        db.Table1.LoadWith(r => r.References1).ThenLoad(r1 => r1.References2, r2 => r2.Where(rr2 => !rr2.Name.Contains("exclude")));
                    </code>
                </para>
            </para>
            </example>
            <typeparam name="TEntity">Type of entity being queried.</typeparam>
            <typeparam name="TPreviousProperty">Type of parent association.</typeparam>
            <typeparam name="TProperty">Type of the related entity to be included.</typeparam>
            <param name="source">The source query.</param>
            <param name="selector">A lambda expression representing navigation property to be included (<c>t => t.Property1</c>).</param>
            <param name="loadFunc">Defines additional logic for association load query.</param>
            <returns>Returns new query with related data included.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Merge``1(System.Linq.IQueryable{``0})">
            <summary>
            Starts merge operation definition from a subquery. If the query is not a table or a cte, it will be converted into a cte as the merge target.
            </summary>
            <typeparam name="TTarget">Target record type.</typeparam>
            <param name="target">Target table.</param>
            <returns>Returns merge command builder, that contains only target.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Merge``1(LinqToDB.ITable{``0})">
            <summary>
            Starts merge operation definition from target table.
            </summary>
            <typeparam name="TTarget">Target record type.</typeparam>
            <param name="target">Target table.</param>
            <returns>Returns merge command builder, that contains only target.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Merge``1(LinqToDB.ITable{``0},System.String)">
            <summary>
            Starts merge operation definition from target table.
            </summary>
            <typeparam name="TTarget">Target record type.</typeparam>
            <param name="target">Target table.</param>
            <param name="hint">Database-specific merge hint.</param>
            <returns>Returns merge command builder, that contains only target.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.MergeInto``2(System.Linq.IQueryable{``1},System.Linq.IQueryable{``0})">
            <summary>
            Starts merge operation definition from source query.
            </summary>
            <typeparam name="TTarget">Target record type.</typeparam>
            <typeparam name="TSource">Source record type.</typeparam>
            <param name="source">Source data query.</param>
            <param name="target">Target query. If the query is not a table or a cte, it will be converted into a cte as the merge target.</param>
            <returns>Returns merge command builder with source and target set.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.MergeInto``2(System.Linq.IQueryable{``1},LinqToDB.ITable{``0})">
            <summary>
            Starts merge operation definition from source query.
            </summary>
            <typeparam name="TTarget">Target record type.</typeparam>
            <typeparam name="TSource">Source record type.</typeparam>
            <param name="source">Source data query.</param>
            <param name="target">Target table.</param>
            <returns>Returns merge command builder with source and target set.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.MergeInto``2(System.Linq.IQueryable{``1},LinqToDB.ITable{``0},System.String)">
            <summary>
            Starts merge operation definition from source query.
            </summary>
            <typeparam name="TTarget">Target record type.</typeparam>
            <typeparam name="TSource">Source record type.</typeparam>
            <param name="source">Source data query.</param>
            <param name="target">Target table.</param>
            <param name="hint">Database-specific merge hint.</param>
            <returns>Returns merge command builder with source and target set.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Using``2(LinqToDB.Linq.IMergeableUsing{``0},System.Linq.IQueryable{``1})">
            <summary>
            Adds source query to merge command definition.
            </summary>
            <typeparam name="TTarget">Target record type.</typeparam>
            <typeparam name="TSource">Source record type.</typeparam>
            <param name="merge">Merge command builder.</param>
            <param name="source">Source data query.</param>
            <returns>Returns merge command builder with source and target set.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Using``2(LinqToDB.Linq.IMergeableUsing{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Adds source collection to merge command definition.
            </summary>
            <typeparam name="TTarget">Target record type.</typeparam>
            <typeparam name="TSource">Source record type.</typeparam>
            <param name="merge">Merge command builder.</param>
            <param name="source">Source data collection.</param>
            <returns>Returns merge command builder with source and target set.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UsingTarget``1(LinqToDB.Linq.IMergeableUsing{``0})">
            <summary>
            Sets target table as merge command source.
            </summary>
            <typeparam name="TTarget">Target record type.</typeparam>
            <param name="merge">Merge command builder.</param>
            <returns>Returns merge command builder with source and target set.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.On``3(LinqToDB.Linq.IMergeableOn{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>
            Adds definition of matching of target and source records using key value.
            </summary>
            <typeparam name="TTarget">Target record type.</typeparam>
            <typeparam name="TSource">Source record type.</typeparam>
            <typeparam name="TKey">Source and target records join/match key type.</typeparam>
            <param name="merge">Merge command builder.</param>
            <param name="targetKey">Target record match key definition.</param>
            <param name="sourceKey">Source record match key definition.</param>
            <returns>Returns merge command builder with source, target and match (ON) set.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.On``2(LinqToDB.Linq.IMergeableOn{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            Adds definition of matching of target and source records using match condition.
            </summary>
            <typeparam name="TTarget">Target record type.</typeparam>
            <typeparam name="TSource">Source record type.</typeparam>
            <param name="merge">Merge command builder.</param>
            <param name="matchCondition">Rule to match/join target and source records.</param>
            <returns>Returns merge command builder with source, target and match (ON) set.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.OnTargetKey``1(LinqToDB.Linq.IMergeableOn{``0,``0})">
            <summary>
            Adds definition of matching of target and source records using primary key columns.
            </summary>
            <typeparam name="TTarget">Target record type.</typeparam>
            <param name="merge">Merge command builder.</param>
            <returns>Returns merge command builder with source, target and match (ON) set.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWhenNotMatched``1(LinqToDB.Linq.IMergeableSource{``0,``0})">
            <summary>
            Adds new insert operation to merge and returns new merge command with added operation.
            This operation inserts new record to target table using data from the same fields of source record
            for each new record from source, not processed by previous operations.
            </summary>
            <typeparam name="TTarget">Target and source records type.</typeparam>
            <param name="merge">Merge command builder interface.</param>
            <returns>Returns new merge command builder with new operation.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWhenNotMatchedAnd``1(LinqToDB.Linq.IMergeableSource{``0,``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Adds new insert operation to merge and returns new merge command with added operation.
            This operation inserts new record to target table using data from the same fields of source record
            for each new record from source that passes filtering with specified predicate, if it wasn't
            processed by previous operations.
            </summary>
            <typeparam name="TTarget">Target and source records type.</typeparam>
            <param name="merge">Merge command builder interface.</param>
            <param name="searchCondition">Operation execution condition over source record.</param>
            <returns>Returns new merge command builder with new operation.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWhenNotMatched``2(LinqToDB.Linq.IMergeableSource{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``0}})">
            <summary>
            Adds new insert operation to merge and returns new merge command with added operation.
            This operation inserts new record to target table using user-defined values for target columns
            for each new record from source, not processed by previous operations.
            </summary>
            <typeparam name="TTarget">Target record type.</typeparam>
            <typeparam name="TSource">Source record type.</typeparam>
            <param name="merge">Merge command builder interface.</param>
            <param name="setter">Create record expression using source record. Expression should be a call to target
            record constructor with field/properties initializers to be recognized by API.</param>
            <returns>Returns new merge command builder with new operation.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWhenNotMatchedAnd``2(LinqToDB.Linq.IMergeableSource{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,``0}})">
            <summary>
            Adds new insert operation to merge and returns new merge command with added operation.
            This operation inserts new record to target table using user-defined values for target columns
            for each new record from source that passes filtering with specified predicate, if it wasn't
            processed by previous operations.
            </summary>
            <typeparam name="TTarget">Target record type.</typeparam>
            <typeparam name="TSource">Source record type.</typeparam>
            <param name="merge">Merge command builder interface.</param>
            <param name="searchCondition">Operation execution condition over source record.</param>
            <param name="setter">Create record expression using source record. Expression should be a call to target
            record constructor with field/properties initializers to be recognized by API.</param>
            <returns>Returns new merge command builder with new operation.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateWhenMatched``1(LinqToDB.Linq.IMergeableSource{``0,``0})">
            <summary>
            Adds new update operation to merge and returns new merge command with added operation.
            This operation updates record in target table using data from the same fields of source record
            for each record that was matched in source and target, if it wasn't processed by previous operations.
            </summary>
            <typeparam name="TTarget">Target and source records type.</typeparam>
            <param name="merge">Merge command builder interface.</param>
            <returns>Returns new merge command builder with new operation.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateWhenMatchedAnd``1(LinqToDB.Linq.IMergeableSource{``0,``0},System.Linq.Expressions.Expression{System.Func{``0,``0,System.Boolean}})">
            <summary>
            Adds new update operation to merge and returns new merge command with added operation.
            This operation updates record in target table using data from the same fields of source record
            for each record that was matched in source and target and passes filtering with specified predicate,
            if it wasn't processed by previous operations.
            </summary>
            <typeparam name="TTarget">Target and source records type.</typeparam>
            <param name="merge">Merge command builder interface.</param>
            <param name="searchCondition">Operation execution condition over target and source records.</param>
            <returns>Returns new merge command builder with new operation.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateWhenMatched``2(LinqToDB.Linq.IMergeableSource{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``0}})">
            <summary>
            Adds new update operation to merge and returns new merge command with added operation.
            This operation updates record in target table using user-defined values for target columns
            for each record that was matched in source and target, if it wasn't processed by previous operations.
            </summary>
            <typeparam name="TTarget">Target record type.</typeparam>
            <typeparam name="TSource">Source record type.</typeparam>
            <param name="merge">Merge command builder interface.</param>
            <param name="setter">Update record expression using target and source records.
            Expression should be a call to target record constructor with field/properties initializers to be recognized by API.</param>
            <returns>Returns new merge command builder with new operation.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateWhenMatchedAnd``2(LinqToDB.Linq.IMergeableSource{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1,``0}})">
            <summary>
            Adds new update operation to merge and returns new merge command with added operation.
            This operation updates record in target table using user-defined values for target columns
            for each record that was matched in source and target and passes filtering with specified predicate,
            if it wasn't processed by previous operations.
            </summary>
            <typeparam name="TTarget">Target record type.</typeparam>
            <typeparam name="TSource">Source record type.</typeparam>
            <param name="merge">Merge command builder interface.</param>
            <param name="searchCondition">Operation execution condition over target and source records.</param>
            <param name="setter">Update record expression using target and source records.
            Expression should be a call to target record constructor with field/properties initializers to be recognized by API.</param>
            <returns>Returns new merge command builder with new operation.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateWhenMatchedThenDelete``1(LinqToDB.Linq.IMergeableSource{``0,``0},System.Linq.Expressions.Expression{System.Func{``0,``0,System.Boolean}})">
            <summary>
            IMPORTANT: This operation supported only by Oracle Database.
            Adds new update with delete operation to merge and returns new merge command with added operation.
            This operation updates record in target table using data from the same fields of source record
            for each record that was matched in source and target, if it wasn't processed by previous operations.
            After that it removes updated records if they are matched by delete predicate.
            </summary>
            <typeparam name="TTarget">Target and source records type.</typeparam>
            <param name="merge">Merge command builder interface.</param>
            <param name="deleteCondition">Delete execution condition over updated target and source records.</param>
            <returns>Returns new merge command builder with new operation.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateWhenMatchedAndThenDelete``1(LinqToDB.Linq.IMergeableSource{``0,``0},System.Linq.Expressions.Expression{System.Func{``0,``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``0,System.Boolean}})">
            <summary>
            IMPORTANT: This operation supported only by Oracle Database.
            Adds new update with delete operation to merge and returns new merge command with added operation.
            This operation updates record in target table using data from the same fields of source record
            for each record that was matched in source and target and passes filtering with specified predicate,
            if it wasn't processed by previous operations.
            After that it removes updated records if they are matched by delete predicate.
            </summary>
            <typeparam name="TTarget">Target and source records type.</typeparam>
            <param name="merge">Merge command builder interface.</param>
            <param name="searchCondition">Update execution condition over target and source records.</param>
            <param name="deleteCondition">Delete execution condition over updated target and source records.</param>
            <returns>Returns new merge command builder with new operation.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateWhenMatchedThenDelete``2(LinqToDB.Linq.IMergeableSource{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``0}},System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            IMPORTANT: This operation supported only by Oracle Database.
            Adds new update with delete operation to merge and returns new merge command with added operation.
            This operation updates record in target table using user-defined values for target columns
            for each record that was matched in source and target, if it wasn't processed by previous operations.
            After that it removes updated records if they matched by delete predicate.
            </summary>
            <typeparam name="TTarget">Target record type.</typeparam>
            <typeparam name="TSource">Source record type.</typeparam>
            <param name="merge">Merge command builder interface.</param>
            <param name="setter">Update record expression using target and source records.
            Expression should be a call to target record constructor with field/properties initializers to be recognized by API.</param>
            <param name="deleteCondition">Delete execution condition over updated target and source records.</param>
            <returns>Returns new merge command builder with new operation.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateWhenMatchedAndThenDelete``2(LinqToDB.Linq.IMergeableSource{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1,``0}},System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            IMPORTANT: This operation supported only by Oracle Database.
            Adds new update with delete operation to merge and returns new merge command with added operation.
            This operation updates record in target table using user-defined values for target columns
            for each record that was matched in source and target and passes filtering with specified predicate,
            if it wasn't processed by previous operations.
            After that it removes updated records if they matched by delete predicate.
            </summary>
            <typeparam name="TTarget">Target record type.</typeparam>
            <typeparam name="TSource">Source record type.</typeparam>
            <param name="merge">Merge command builder interface.</param>
            <param name="searchCondition">Update execution condition over target and source records.</param>
            <param name="setter">Update record expression using target and source records.
            Expression should be a call to target record constructor with field/properties initializers to be recognized by API.</param>
            <param name="deleteCondition">Delete execution condition over updated target and source records.</param>
            <returns>Returns new merge command builder with new operation.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.DeleteWhenMatched``2(LinqToDB.Linq.IMergeableSource{``0,``1})">
            <summary>
            Adds new delete operation to merge and returns new merge command with added operation.
            This operation removes record in target table for each record that was matched in source and target,
            if it wasn't processed by previous operations.
            </summary>
            <typeparam name="TTarget">Target record type.</typeparam>
            <typeparam name="TSource">Source record type.</typeparam>
            <param name="merge">Merge command builder interface.</param>
            <returns>Returns new merge command builder with new operation.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.DeleteWhenMatchedAnd``2(LinqToDB.Linq.IMergeableSource{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            Adds new delete operation to merge and returns new merge command with added operation.
            This operation removes record in target table for each record that was matched in source and target,
            if it was matched by operation predicate and wasn't processed by previous operations.
            </summary>
            <typeparam name="TTarget">Target record type.</typeparam>
            <typeparam name="TSource">Source record type.</typeparam>
            <param name="merge">Merge command builder interface.</param>
            <param name="searchCondition">Operation execution condition over target and source records.</param>
            <returns>Returns new merge command builder with new operation.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateWhenNotMatchedBySource``2(LinqToDB.Linq.IMergeableSource{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,``0}})">
            <summary>
            IMPORTANT: This operation supported only by Microsoft SQL Server.
            Adds new update by source operation to merge and returns new merge command with added operation.
            This operation updates record in target table for each record that was matched only in target
            using user-defined values for target columns, if it wasn't processed by previous operations.
            </summary>
            <typeparam name="TTarget">Target record type.</typeparam>
            <typeparam name="TSource">Source record type.</typeparam>
            <param name="merge">Merge command builder interface.</param>
            <param name="setter">Update record expression using target record. Expression should be a call to
            target record constructor with field/properties initializers to be recognized by API.</param>
            <returns>Returns new merge command builder with new operation.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateWhenNotMatchedBySourceAnd``2(LinqToDB.Linq.IMergeableSource{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``0}})">
            <summary>
            IMPORTANT: This operation supported only by Microsoft SQL Server.
            Adds new update by source operation to merge and returns new merge command with added operation.
            This operation updates record in target table for each record that was matched only in target
            using user-defined values for target columns, if it passed filtering by operation predicate and
            wasn't processed by previous operations.
            </summary>
            <typeparam name="TTarget">Target record type.</typeparam>
            <typeparam name="TSource">Source record type.</typeparam>
            <param name="merge">Merge command builder interface.</param>
            <param name="searchCondition">Operation execution condition over target record.</param>
            <param name="setter">Update record expression using target record. Expression should be a call to
            target record constructor with field/properties initializers to be recognized by API.</param>
            <returns>Returns new merge command builder with new operation.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.DeleteWhenNotMatchedBySource``2(LinqToDB.Linq.IMergeableSource{``0,``1})">
            <summary>
            IMPORTANT: This operation supported only by Microsoft SQL Server.
            Adds new delete by source operation to merge and returns new merge command with added operation.
            This operation removes record in target table for each record that was matched only in target
            and wasn't processed by previous operations.
            </summary>
            <typeparam name="TTarget">Target record type.</typeparam>
            <typeparam name="TSource">Source record type.</typeparam>
            <param name="merge">Merge command builder interface.</param>
            <returns>Returns new merge command builder with new operation.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.DeleteWhenNotMatchedBySourceAnd``2(LinqToDB.Linq.IMergeableSource{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            IMPORTANT: This operation supported only by Microsoft SQL Server.
            Adds new delete by source operation to merge and returns new merge command with added operation.
            This operation removes record in target table for each record that was matched only in target
            and passed filtering with operation predicate, if it wasn't processed by previous operations.
            </summary>
            <typeparam name="TTarget">Target record type.</typeparam>
            <typeparam name="TSource">Source record type.</typeparam>
            <param name="merge">Merge command builder interface.</param>
            <param name="searchCondition">Operation execution condition over target record.</param>
            <returns>Returns new merge command builder with new operation.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Merge``2(LinqToDB.Linq.IMergeable{``0,``1})">
            <summary>
            Executes merge command and returns total number of target records, affected by merge operations.
            </summary>
            <typeparam name="TTarget">Target record type.</typeparam>
            <typeparam name="TSource">Source record type.</typeparam>
            <param name="merge">Merge command definition.</param>
            <returns>Returns number of target table records, affected by merge command.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.MergeWithOutput``3(LinqToDB.Linq.IMergeable{``0,``1},System.Linq.Expressions.Expression{System.Func{System.String,``0,``0,``2}})">
            <summary>
            Executes merge command and returns output information, affected by merge operations.
            </summary>
            <typeparam name="TTarget">Target record type.</typeparam>
            <typeparam name="TSource">Source record type.</typeparam>
            <typeparam name="TOutput">Output table record type.</typeparam>
            <param name="merge">Merge command definition.</param>
            <param name="outputExpression">Output record constructor expression.
            Expression supports only record new expression with field initializers.</param>
            <returns>Returns number of target table records, affected by merge command.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2008+</item>
            <item>Firebird 3+ (doesn't support more than one record and "action" parameter; database limitation)</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.MergeWithOutputAsync``3(LinqToDB.Linq.IMergeable{``0,``1},System.Linq.Expressions.Expression{System.Func{System.String,``0,``0,``2}})">
            <summary>
            Executes merge command and returns output information, affected by merge operations.
            </summary>
            <typeparam name="TTarget">Target record type.</typeparam>
            <typeparam name="TSource">Source record type.</typeparam>
            <typeparam name="TOutput">Output table record type.</typeparam>
            <param name="merge">Merge command definition.</param>
            <param name="outputExpression">Output record constructor expression.
            Expression supports only record new expression with field initializers.</param>
            <returns>Returns number of target table records, affected by merge command.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2008+</item>
            <item>Firebird 3+ (doesn't support more than one record and "action" parameter; database limitation)</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.MergeWithOutputInto``3(LinqToDB.Linq.IMergeable{``0,``1},LinqToDB.ITable{``2},System.Linq.Expressions.Expression{System.Func{System.String,``0,``0,``2}})">
            <summary>
            Executes merge command, inserts output information into table and returns total number of target records, affected by merge operations.
            </summary>
            <typeparam name="TTarget">Target record type.</typeparam>
            <typeparam name="TSource">Source record type.</typeparam>
            <typeparam name="TOutput">Output table record type.</typeparam>
            <param name="merge">Merge command definition.</param>
            <param name="outputTable">Table which should handle output result.</param>
            <param name="outputExpression">Output record constructor expression.
            Expression supports only record new expression with field initializers.</param>
            <returns>Returns number of target table records, affected by merge command.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2008+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.MergeWithOutputIntoAsync``3(LinqToDB.Linq.IMergeable{``0,``1},LinqToDB.ITable{``2},System.Linq.Expressions.Expression{System.Func{System.String,``0,``0,``2}},System.Threading.CancellationToken)">
            <summary>
            Executes merge command, inserts output information into table and returns total number of target records, affected by merge operations.
            </summary>
            <typeparam name="TTarget">Target record type.</typeparam>
            <typeparam name="TSource">Source record type.</typeparam>
            <typeparam name="TOutput">Output table record type.</typeparam>
            <param name="merge">Merge command definition.</param>
            <param name="outputTable">Table which should handle output result.</param>
            <param name="outputExpression">Output record constructor expression.
            <param name="token">Optional asynchronous operation cancellation token.</param>
            Expression supports only record new expression with field initializers.</param>
            <returns>Returns number of target table records, affected by merge command.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2008+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.MergeAsync``2(LinqToDB.Linq.IMergeable{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Executes merge command and returns total number of target records, affected by merge operations.
            </summary>
            <typeparam name="TTarget">Target record type.</typeparam>
            <typeparam name="TSource">Source record type.</typeparam>
            <param name="merge">Merge command definition.</param>
            <param name="token">Asynchronous operation cancellation token.</param>
            <returns>Returns number of target table records, affected by merge command.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateWithOutput``2(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Executes update-from-source operation against target table.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table mapping class.</typeparam>
            <param name="source">Source data query.</param>
            <param name="target">Target table.</param>
            <param name="setter">Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers.</param>
            <returns>Deleted and inserted values for every record updated.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            <item>Firebird 2.5+ (doesn't support more than one record; database limitation)</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateWithOutputAsync``2(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            Executes update-from-source operation against target table.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table mapping class.</typeparam>
            <param name="source">Source data query.</param>
            <param name="target">Target table.</param>
            <param name="setter">Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Deleted and inserted values for every record updated.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            <item>Firebird 2.5+ (doesn't support more than one record; database limitation)</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateWithOutput``3(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``1,``1,``2}})">
            <summary>
            Executes update-from-source operation against target table.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table mapping class.</typeparam>
            <typeparam name="TOutput">Output table record type.</typeparam>
            <param name="source">Source data query.</param>
            <param name="target">Target table.</param>
            <param name="setter">Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers.</param>
            <param name="outputExpression">Output record constructor expression.
            Parameters passed are as follows: (<typeparamref name="TSource"/> source, <typeparamref name="TTarget"/> deleted, <typeparamref name="TTarget"/> inserted).
            Expression supports only record new expression with field initializers.</param>
            <returns>Output values from the update statement.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            <item>Firebird 2.5+ (doesn't support more than one record; database limitation)</item>
            <item>PostgreSQL (doesn't support old data; database limitation)</item>
            <item>SQLite 3.35+  (doesn't support old data; database limitation)</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateWithOutputAsync``3(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``1,``1,``2}},System.Threading.CancellationToken)">
            <summary>
            Executes update-from-source operation against target table.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table mapping class.</typeparam>
            <typeparam name="TOutput">Output table record type.</typeparam>
            <param name="source">Source data query.</param>
            <param name="target">Target table.</param>
            <param name="setter">Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers.</param>
            <param name="outputExpression">Output record constructor expression.
            Parameters passed are as follows: (<typeparamref name="TSource"/> source, <typeparamref name="TTarget"/> deleted, <typeparamref name="TTarget"/> inserted).
            Expression supports only record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Output values from the update statement.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            <item>Firebird 2.5+ (doesn't support more than one record; database limitation)</item>
            <item>PostgreSQL (doesn't support old data; database limitation)</item>
            <item>SQLite 3.35+  (doesn't support old data; database limitation)</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateWithOutputInto``2(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}},LinqToDB.ITable{``1})">
            <summary>
            Executes update-from-source operation against target table.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table mapping class.</typeparam>
            <param name="source">Source data query.</param>
            <param name="target">Target table.</param>
            <param name="setter">Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers.</param>
            <param name="outputTable">Output table.</param>
            <returns>Number of affected records.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateWithOutputIntoAsync``2(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}},LinqToDB.ITable{``1},System.Threading.CancellationToken)">
            <summary>
            Executes update-from-source operation against target table.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table mapping class.</typeparam>
            <param name="source">Source data query.</param>
            <param name="target">Target table.</param>
            <param name="setter">Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers.</param>
            <param name="outputTable">Output table.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateWithOutputInto``3(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}},LinqToDB.ITable{``2},System.Linq.Expressions.Expression{System.Func{``0,``1,``1,``2}})">
            <summary>
            Executes update-from-source operation against target table.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table mapping class.</typeparam>
            <typeparam name="TOutput">Output table record type.</typeparam>
            <param name="source">Source data query.</param>
            <param name="target">Target table.</param>
            <param name="setter">Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers.</param>
            <param name="outputTable">Output table.</param>
            <param name="outputExpression">Output record constructor expression.
            Parameters passed are as follows: (<typeparamref name="TSource"/> source, <typeparamref name="TTarget"/> deleted, <typeparamref name="TTarget"/> inserted).
            Expression supports only record new expression with field initializers.</param>
            <returns>Output values from the update statement.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateWithOutputIntoAsync``3(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}},LinqToDB.ITable{``2},System.Linq.Expressions.Expression{System.Func{``0,``1,``1,``2}},System.Threading.CancellationToken)">
            <summary>
            Executes update-from-source operation against target table.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table mapping class.</typeparam>
            <typeparam name="TOutput">Output table record type.</typeparam>
            <param name="source">Source data query.</param>
            <param name="target">Target table.</param>
            <param name="setter">Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers.</param>
            <param name="outputTable">Output table.</param>
            <param name="outputExpression">Output record constructor expression.
            Parameters passed are as follows: (<typeparamref name="TSource"/> source, <typeparamref name="TTarget"/> deleted, <typeparamref name="TTarget"/> inserted).
            Expression supports only record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Output values from the update statement.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateWithOutput``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Executes update-from-source operation against target table.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table mapping class.</typeparam>
            <param name="source">Source data query.</param>
            <param name="target">Target table.</param>
            <param name="setter">Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers.</param>
            <returns>Deleted and inserted values for every record updated.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            <item>Firebird 2.5+ (doesn't support more than one record; database limitation)</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateWithOutputAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            Executes update-from-source operation against target table.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table mapping class.</typeparam>
            <param name="source">Source data query.</param>
            <param name="target">Target table.</param>
            <param name="setter">Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Deleted and inserted values for every record updated.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            <item>Firebird 2.5+ (doesn't support more than one record; database limitation)</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateWithOutput``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``1,``1,``2}})">
            <summary>
            Executes update-from-source operation against target table.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table mapping class.</typeparam>
            <typeparam name="TOutput">Output table record type.</typeparam>
            <param name="source">Source data query.</param>
            <param name="target">Target table.</param>
            <param name="setter">Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers.</param>
            <param name="outputExpression">Output record constructor expression.
            Parameters passed are as follows: (<typeparamref name="TSource"/> source, <typeparamref name="TTarget"/> deleted, <typeparamref name="TTarget"/> inserted).
            Expression supports only record new expression with field initializers.</param>
            <returns>Output values from the update statement.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            <item>Firebird 2.5+ (doesn't support more than one record; database limitation)</item>
            <item>PostgreSQL (doesn't support old data; database limitation)</item>
            <item>SQLite 3.35+  (doesn't support old data; database limitation)</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateWithOutputAsync``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``1,``1,``2}},System.Threading.CancellationToken)">
            <summary>
            Executes update-from-source operation against target table.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table mapping class.</typeparam>
            <typeparam name="TOutput">Output table record type.</typeparam>
            <param name="source">Source data query.</param>
            <param name="target">Target table.</param>
            <param name="setter">Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers.</param>
            <param name="outputExpression">Output record constructor expression.
            Parameters passed are as follows: (<typeparamref name="TSource"/> source, <typeparamref name="TTarget"/> deleted, <typeparamref name="TTarget"/> inserted).
            Expression supports only record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Output values from the update statement.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            <item>Firebird 2.5+ (doesn't support more than one record; database limitation)</item>
            <item>PostgreSQL (doesn't support old data; database limitation)</item>
            <item>SQLite 3.35+  (doesn't support old data; database limitation)</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateWithOutputInto``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}},LinqToDB.ITable{``1})">
            <summary>
            Executes update-from-source operation against target table.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table mapping class.</typeparam>
            <param name="source">Source data query.</param>
            <param name="target">Target table.</param>
            <param name="setter">Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers.</param>
            <param name="outputTable">Output table.</param>
            <returns>Number of affected records.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateWithOutputIntoAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}},LinqToDB.ITable{``1},System.Threading.CancellationToken)">
            <summary>
            Executes update-from-source operation against target table.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table mapping class.</typeparam>
            <param name="source">Source data query.</param>
            <param name="target">Target table.</param>
            <param name="setter">Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers.</param>
            <param name="outputTable">Output table.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateWithOutputInto``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}},LinqToDB.ITable{``2},System.Linq.Expressions.Expression{System.Func{``0,``1,``1,``2}})">
            <summary>
            Executes update-from-source operation against target table.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table mapping class.</typeparam>
            <typeparam name="TOutput">Output table record type.</typeparam>
            <param name="source">Source data query.</param>
            <param name="target">Target table.</param>
            <param name="setter">Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers.</param>
            <param name="outputTable">Output table.</param>
            <param name="outputExpression">Output record constructor expression.
            Parameters passed are as follows: (<typeparamref name="TSource"/> source, <typeparamref name="TTarget"/> deleted, <typeparamref name="TTarget"/> inserted).
            Expression supports only record new expression with field initializers.</param>
            <returns>Output values from the update statement.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateWithOutputIntoAsync``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}},LinqToDB.ITable{``2},System.Linq.Expressions.Expression{System.Func{``0,``1,``1,``2}},System.Threading.CancellationToken)">
            <summary>
            Executes update-from-source operation against target table.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table mapping class.</typeparam>
            <typeparam name="TOutput">Output table record type.</typeparam>
            <param name="source">Source data query.</param>
            <param name="target">Target table.</param>
            <param name="setter">Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers.</param>
            <param name="outputTable">Output table.</param>
            <param name="outputExpression">Output record constructor expression.
            Parameters passed are as follows: (<typeparamref name="TSource"/> source, <typeparamref name="TTarget"/> deleted, <typeparamref name="TTarget"/> inserted).
            Expression supports only record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Output values from the update statement.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateWithOutput``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0}})">
            <summary>
            Executes update operation using source query as record filter.
            </summary>
            <typeparam name="T">Updated table record type.</typeparam>
            <param name="source">Source data query.</param>
            <param name="setter">Update expression. Uses updated record as parameter. Expression supports only target table record new expression with field initializers.</param>
            <returns>Deleted and inserted values for every record updated.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            <item>Firebird 2.5+ (doesn't support more than one record; database limitation)</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateWithOutputAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Threading.CancellationToken)">
            <summary>
            Executes update operation using source query as record filter.
            </summary>
            <typeparam name="T">Updated table record type.</typeparam>
            <param name="source">Source data query.</param>
            <param name="setter">Update expression. Uses updated record as parameter. Expression supports only target table record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Deleted and inserted values for every record updated.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            <item>Firebird 2.5+ (doesn't support more than one record; database limitation)</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateWithOutput``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Linq.Expressions.Expression{System.Func{``0,``0,``1}})">
            <summary>
            Executes update operation using source query as record filter.
            </summary>
            <typeparam name="T">Updated table record type.</typeparam>
            <typeparam name="TOutput">Output table record type.</typeparam>
            <param name="source">Source data query.</param>
            <param name="setter">Update expression. Uses updated record as parameter. Expression supports only target table record new expression with field initializers.</param>
            <param name="outputExpression">Output record constructor expression.
            Parameters passed are as follows: (<typeparamref name="T"/> deleted, <typeparamref name="T"/> inserted).
            Expression supports only record new expression with field initializers.</param>
            <returns>Output values from the update statement.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            <item>Firebird 2.5+ (doesn't support more than one record; database limitation)</item>
            <item>PostgreSQL (doesn't support old data; database limitation)</item>
            <item>SQLite 3.35+  (doesn't support old data; database limitation)</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateWithOutputAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Linq.Expressions.Expression{System.Func{``0,``0,``1}},System.Threading.CancellationToken)">
            <summary>
            Executes update operation using source query as record filter.
            </summary>
            <typeparam name="T">Updated table record type.</typeparam>
            <typeparam name="TOutput">Output table record type.</typeparam>
            <param name="source">Source data query.</param>
            <param name="setter">Update expression. Uses updated record as parameter. Expression supports only target table record new expression with field initializers.</param>
            <param name="outputExpression">Output record constructor expression.
            Parameters passed are as follows: (<typeparamref name="T"/> deleted, <typeparamref name="T"/> inserted).
            Expression supports only record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Output values from the update statement.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            <item>Firebird 2.5+ (doesn't support more than one record; database limitation)</item>
            <item>PostgreSQL (doesn't support old data; database limitation)</item>
            <item>SQLite 3.35+  (doesn't support old data; database limitation)</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateWithOutputInto``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0}},LinqToDB.ITable{``0})">
            <summary>
            Executes update operation using source query as record filter.
            </summary>
            <typeparam name="T">Updated table record type.</typeparam>
            <param name="source">Source data query.</param>
            <param name="setter">Update expression. Uses updated record as parameter. Expression supports only target table record new expression with field initializers.</param>
            <param name="outputTable">Output table.</param>
            <returns>Number of updated records.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateWithOutputIntoAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0}},LinqToDB.ITable{``0},System.Threading.CancellationToken)">
            <summary>
            Executes update operation using source query as record filter.
            </summary>
            <typeparam name="T">Updated table record type.</typeparam>
            <param name="source">Source data query.</param>
            <param name="setter">Update expression. Uses updated record as parameter. Expression supports only target table record new expression with field initializers.</param>
            <param name="outputTable">Output table.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of updated records.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateWithOutputInto``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0}},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``0,``1}})">
            <summary>
            Executes update operation using source query as record filter.
            </summary>
            <typeparam name="T">Updated table record type.</typeparam>
            <typeparam name="TOutput">Output table record type.</typeparam>
            <param name="source">Source data query.</param>
            <param name="setter">Update expression. Uses updated record as parameter. Expression supports only target table record new expression with field initializers.</param>
            <param name="outputExpression">Output record constructor expression.
            Parameters passed are as follows: (<typeparamref name="T"/> deleted, <typeparamref name="T"/> inserted).
            Expression supports only record new expression with field initializers.</param>
            <param name="outputTable">Output table.</param>
            <returns>Number of updated records.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateWithOutputIntoAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0}},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``0,``1}},System.Threading.CancellationToken)">
            <summary>
            Executes update operation using source query as record filter.
            </summary>
            <typeparam name="T">Updated table record type.</typeparam>
            <typeparam name="TOutput">Output table record type.</typeparam>
            <param name="source">Source data query.</param>
            <param name="setter">Update expression. Uses updated record as parameter. Expression supports only target table record new expression with field initializers.</param>
            <param name="outputExpression">Output record constructor expression.
            Parameters passed are as follows: (<typeparamref name="T"/> deleted, <typeparamref name="T"/> inserted).
            Expression supports only record new expression with field initializers.</param>
            <param name="outputTable">Output table.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of updated records.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateWithOutput``1(LinqToDB.Linq.IUpdatable{``0})">
            <summary>
            Executes update operation using source query as record filter.
            </summary>
            <typeparam name="T">Updated table record type.</typeparam>
            <param name="source">Source data query.</param>
            <returns>Deleted and inserted values for every record updated.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            <item>Firebird 2.5+ (doesn't support more than one record; database limitation)</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateWithOutputAsync``1(LinqToDB.Linq.IUpdatable{``0},System.Threading.CancellationToken)">
            <summary>
            Executes update operation using source query as record filter.
            </summary>
            <typeparam name="T">Updated table record type.</typeparam>
            <param name="source">Source data query.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Deleted and inserted values for every record updated.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            <item>Firebird 2.5+ (doesn't support more than one record; database limitation)</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateWithOutput``2(LinqToDB.Linq.IUpdatable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``1}})">
            <summary>
            Executes update operation using source query as record filter.
            </summary>
            <typeparam name="T">Updated table record type.</typeparam>
            <typeparam name="TOutput">Output table record type.</typeparam>
            <param name="source">Source data query.</param>
            <param name="outputExpression">Output record constructor expression.
            Parameters passed are as follows: (<typeparamref name="T"/> deleted, <typeparamref name="T"/> inserted).
            Expression supports only record new expression with field initializer.</param>
            <returns>Output values from the update statement.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            <item>Firebird 2.5+ (doesn't support more than one record; database limitation)</item>
            <item>PostgreSQL (doesn't support old data; database limitation)</item>
            <item>SQLite 3.35+  (doesn't support old data; database limitation)</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateWithOutputAsync``2(LinqToDB.Linq.IUpdatable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``1}},System.Threading.CancellationToken)">
            <summary>
            Executes update operation using source query as record filter.
            </summary>
            <typeparam name="T">Updated table record type.</typeparam>
            <typeparam name="TOutput">Output table record type.</typeparam>
            <param name="source">Source data query.</param>
            <param name="outputExpression">Output record constructor expression.
            Parameters passed are as follows: (<typeparamref name="T"/> deleted, <typeparamref name="T"/> inserted).
            Expression supports only record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Output values from the update statement.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            <item>Firebird 2.5+ (doesn't support more than one record; database limitation)</item>
            <item>PostgreSQL (doesn't support old data; database limitation)</item>
            <item>SQLite 3.35+  (doesn't support old data; database limitation)</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateWithOutputInto``1(LinqToDB.Linq.IUpdatable{``0},LinqToDB.ITable{``0})">
            <summary>
            Executes update operation using source query as record filter.
            </summary>
            <typeparam name="T">Updated table record type.</typeparam>
            <param name="source">Source data query.</param>
            <param name="outputTable">Output table.</param>
            <returns>Number of updated records.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateWithOutputIntoAsync``1(LinqToDB.Linq.IUpdatable{``0},LinqToDB.ITable{``0},System.Threading.CancellationToken)">
            <summary>
            Executes update operation using source query as record filter.
            </summary>
            <typeparam name="T">Updated table record type.</typeparam>
            <param name="source">Source data query.</param>
            <param name="outputTable">Output table.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of updated records.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateWithOutputInto``2(LinqToDB.Linq.IUpdatable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``0,``1}})">
            <summary>
            Executes update operation using source query as record filter.
            </summary>
            <typeparam name="T">Updated table record type.</typeparam>
            <typeparam name="TOutput">Output table record type.</typeparam>
            <param name="source">Source data query.</param>
            <param name="outputExpression">Output record constructor expression.
            Parameters passed are as follows: (<typeparamref name="T"/> deleted, <typeparamref name="T"/> inserted).
            Expression supports only record new expression with field initializers.</param>
            <param name="outputTable">Output table.</param>
            <returns>Number of updated records.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateWithOutputIntoAsync``2(LinqToDB.Linq.IUpdatable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``0,``1}},System.Threading.CancellationToken)">
            <summary>
            Executes update operation using source query as record filter.
            </summary>
            <typeparam name="T">Updated table record type.</typeparam>
            <typeparam name="TOutput">Output table record type.</typeparam>
            <param name="source">Source data query.</param>
            <param name="outputExpression">Output record constructor expression.
            Parameters passed are as follows: (<typeparamref name="T"/> deleted, <typeparamref name="T"/> inserted).
            Expression supports only record new expression with field initializers.</param>
            <param name="outputTable">Output table.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of updated records.</returns>
            <remarks>
            Database support:
            <list type="bullet">
            <item>SQL Server 2005+</item>
            </list>
            </remarks>
        </member>
        <member name="M:LinqToDB.MultiInsertExtensions.MultiInsert``1(System.Linq.IQueryable{``0})">
            <summary>
            Inserts records from source query into multiple target tables.
            </summary>
            <remarks>Only supported by Oracle data provider.</remarks>
            <typeparam name="TSource">Source query record type.</typeparam>
            <param name="source">Source query, that returns data for insert operation.</param>
        </member>
        <member name="M:LinqToDB.MultiInsertExtensions.Into``2(LinqToDB.MultiInsertExtensions.IMultiInsertInto{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Unconditionally insert into target table.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type.</typeparam>
            <param name="source">Source query, that returns data for insert operation.</param>
            <param name="target">Target table to insert into.</param>
            <param name="setter">Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers.</param>
        </member>
        <member name="M:LinqToDB.MultiInsertExtensions.When``2(LinqToDB.MultiInsertExtensions.IMultiInsertWhen{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Conditionally insert into target table.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type.</typeparam>
            <param name="source">Source query, that returns data for insert operation.</param>
            <param name="condition">Predicate indicating when to insert into target table.</param>
            <param name="target">Target table to insert into.</param>
            <param name="setter">Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers.</param>
        </member>
        <member name="M:LinqToDB.MultiInsertExtensions.Else``2(LinqToDB.MultiInsertExtensions.IMultiInsertWhen{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Insert into target table when previous conditions don't match.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type.</typeparam>
            <param name="source">Source query, that returns data for insert operation.</param>
            <param name="target">Target table to insert into.</param>
            <param name="setter">Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers.</param>
        </member>
        <member name="M:LinqToDB.MultiInsertExtensions.Insert``1(LinqToDB.MultiInsertExtensions.IMultiInsertInto{``0})">
            <summary>
            Inserts source data into every configured table.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <param name="insert">Multi-table insert to perform.</param>
            <returns>Number of inserted rows.</returns>
        </member>
        <member name="M:LinqToDB.MultiInsertExtensions.InsertAsync``1(LinqToDB.MultiInsertExtensions.IMultiInsertInto{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously inserts source data into every configured table.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <param name="insert">Multi-table insert to perform.</param>
            <param name="token">Cancellation token for async operation.</param>
            <returns>Number of inserted rows.</returns>
        </member>
        <member name="M:LinqToDB.MultiInsertExtensions.InsertAll``1(LinqToDB.MultiInsertExtensions.IMultiInsertElse{``0})">
            <summary>
            Inserts source data into every matching condition.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <param name="insert">Multi-table insert to perform.</param>
            <returns>Number of inserted rows.</returns>
        </member>
        <member name="M:LinqToDB.MultiInsertExtensions.InsertAllAsync``1(LinqToDB.MultiInsertExtensions.IMultiInsertElse{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously inserts source data into every matching condition.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <param name="insert">Multi-table insert to perform.</param>
            <param name="token">Cancellation token for async operation.</param>
            <returns>Number of inserted rows.</returns>
        </member>
        <member name="M:LinqToDB.MultiInsertExtensions.InsertFirst``1(LinqToDB.MultiInsertExtensions.IMultiInsertElse{``0})">
            <summary>
            Inserts source data into the first matching condition.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <param name="insert">Multi-table insert to perform.</param>
            <returns>Number of inserted rows.</returns>
        </member>
        <member name="M:LinqToDB.MultiInsertExtensions.InsertFirstAsync``1(LinqToDB.MultiInsertExtensions.IMultiInsertElse{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously inserts source data into the first matching condition.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <param name="insert">Multi-table insert to perform.</param>
            <param name="token">Cancellation token for async operation.</param>
            <returns>Number of inserted rows.</returns>
        </member>
        <member name="T:LinqToDB.LinqToDBException">
            <summary>
            Defines the base class for the namespace exceptions.
            </summary>
            <remarks>
            This class is the base class for exceptions that may occur during
            execution of the namespace members.
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqToDBException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LinqToDB.LinqToDBException"/> class.
            </summary>
            <remarks>
            This constructor initializes the <see cref="P:System.Exception.Message"/>
            property of the new instance such as "A Build Type exception has occurred.".
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqToDBException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LinqToDB.LinqToDBException"/> class
            with the specified error message.
            </summary>
            <param name="message">The message to display to the client when the
            exception is thrown.</param>
            <seealso cref="P:System.Exception.Message"/>
        </member>
        <member name="M:LinqToDB.LinqToDBException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:LinqToDB.LinqToDBException"/> class
            with the specified error message and InnerException property.
            </summary>
            <param name="message">The message to display to the client when the
            exception is thrown.</param>
            <param name="innerException">The InnerException, if any, that threw
            the current exception.</param>
            <seealso cref="P:System.Exception.Message"/>
            <seealso cref="P:System.Exception.InnerException"/>
        </member>
        <member name="M:LinqToDB.LinqToDBException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:LinqToDB.LinqToDBException"/> class
            with the specified InnerException property.
            </summary>
            <param name="innerException">The InnerException, if any, that threw
            the current exception.</param>
            <seealso cref="P:System.Exception.InnerException"/>
        </member>
        <member name="M:LinqToDB.LinqToDBException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:LinqToDB.LinqToDBException"/> class
            with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or
            destination.</param>
            <remarks>This constructor is called during deserialization to
            reconstitute the exception object transmitted over a stream.</remarks>
        </member>
        <member name="M:LinqToDB.Linq.Builder.ExpressionBuilder.Equal(LinqToDB.Mapping.MappingSchema,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Gets Expression.Equal if <paramref name="left"/> and <paramref name="right"/> expression types are not same
            <paramref name="right"/> would be converted to <paramref name="left"/>
            </summary>
            <param name="mappingSchema"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:LinqToDB.Linq.Builder.IBuildContext.IsExpression(System.Linq.Expressions.Expression,System.Int32,LinqToDB.Linq.Builder.RequestFor)">
            <summary>
            Returns information about expression according to <paramref name="requestFlag"/>.
            </summary>
            <param name="expression">Analyzed expression.</param>
            <param name="level">Member level.</param>
            <param name="requestFlag">Which test or request has to be performed.</param>
            <returns><see cref="T:LinqToDB.Linq.Builder.IsExpressionResult"/> instance.</returns>
        </member>
        <member name="T:LinqToDB.Linq.Builder.IsExpressionResult">
            <summary>
            Contains result of <see cref="M:LinqToDB.Linq.Builder.IBuildContext.IsExpression(System.Linq.Expressions.Expression,System.Int32,LinqToDB.Linq.Builder.RequestFor)"/> function call.
            </summary>
        </member>
        <member name="F:LinqToDB.Linq.Builder.IsExpressionResult.Result">
            <summary>
            Indicates when test or request was successful.
            </summary>
        </member>
        <member name="F:LinqToDB.Linq.Builder.IsExpressionResult.Context">
            <summary>
            Stores found Context during <see cref="F:LinqToDB.Linq.Builder.RequestFor.Table"/> request.
            </summary>
        </member>
        <member name="F:LinqToDB.Linq.Builder.IsExpressionResult.Expression">
            <summary>
            Stores found expression request.
            </summary>
        </member>
        <member name="F:LinqToDB.Linq.Builder.IsExpressionResult.True">
            <summary>
            Static value for indicating successful test.
            </summary>
        </member>
        <member name="F:LinqToDB.Linq.Builder.IsExpressionResult.False">
            <summary>
            Static value for indicating unsuccessful test.
            </summary>
        </member>
        <member name="M:LinqToDB.Linq.Builder.IsExpressionResult.GetResult(System.Boolean)">
            <summary>
            Returns cached instance of <see cref="T:LinqToDB.Linq.Builder.IsExpressionResult"/> without expression and context.
            </summary>
        </member>
        <member name="F:LinqToDB.Linq.Builder.RequestFor.Table">
            <summary>
            Checks the sequence if the expression is a table or an association.
            </summary>
        </member>
        <member name="F:LinqToDB.Linq.Builder.RequestFor.Association">
            <summary>
            Checks the sequence if the expression is an association.
            </summary>
        </member>
        <member name="F:LinqToDB.Linq.Builder.RequestFor.Object">
            <summary>
            Checks the sequence if the expression is a table, an association, new {}, or new MyClass {}.
            </summary>
        </member>
        <member name="F:LinqToDB.Linq.Builder.RequestFor.GroupJoin">
            <summary>
            Checks the sequence if the expression is a group join.
            </summary>
        </member>
        <member name="F:LinqToDB.Linq.Builder.RequestFor.Field">
            <summary>
            Checks the sequence if the expression is a field.
            </summary>
        </member>
        <member name="F:LinqToDB.Linq.Builder.RequestFor.Expression">
            <summary>
            Checks the sequence if the expression contains an SQL expression.
            </summary>
        </member>
        <member name="F:LinqToDB.Linq.Builder.RequestFor.SubQuery">
            <summary>
            Checks the context if it's a subquery.
            </summary>
        </member>
        <member name="F:LinqToDB.Linq.Builder.RequestFor.Root">
            <summary>
            Checks the context if it's a root of the expression.
            </summary>
        </member>
        <member name="T:LinqToDB.Linq.Internal.ColumnReaderAttribute">
            <summary>
            Internal API.
            </summary>
        </member>
        <member name="M:LinqToDB.Linq.Expressions.MapBinary(System.String,System.Linq.Expressions.ExpressionType,System.Type,System.Type,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Maps specific BinaryExpression to another Lambda expression during SQL generation.
            </summary>
            <param name="providerName">Name of database provider to use with this connection. <see cref="T:LinqToDB.ProviderName"/> class for list of providers.</param>
            <param name="nodeType">NodeType of BinaryExpression <see cref="T:System.Linq.Expressions.ExpressionType"/> which needs mapping.</param>
            <param name="leftType">Exact type of <see cref="P:System.Linq.Expressions.BinaryExpression.Left"/> member.</param>
            <param name="rightType">Exact type of  <see cref="P:System.Linq.Expressions.BinaryExpression.Right"/> member.</param>
            <param name="expression">Lambda expression which has to replace <see cref="T:System.Linq.Expressions.BinaryExpression"/></param>
            <remarks>Note that method is not thread safe and has to be used only in Application's initialization section.</remarks>
        </member>
        <member name="M:LinqToDB.Linq.Expressions.MapBinary(System.Linq.Expressions.ExpressionType,System.Type,System.Type,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Maps specific <see cref="T:System.Linq.Expressions.BinaryExpression"/> to another <see cref="T:System.Linq.Expressions.LambdaExpression"/> during SQL generation.
            </summary>
            <param name="nodeType">NodeType of BinaryExpression <see cref="T:System.Linq.Expressions.ExpressionType"/> which needs mapping.</param>
            <param name="leftType">Exact type of <see cref="P:System.Linq.Expressions.BinaryExpression.Left"/> member.</param>
            <param name="rightType">Exact type of  <see cref="P:System.Linq.Expressions.BinaryExpression.Right"/> member.</param>
            <param name="expression">Lambda expression which has to replace <see cref="T:System.Linq.Expressions.BinaryExpression"/>.</param>
            <remarks>Note that method is not thread safe and has to be used only in Application's initialization section.</remarks>
        </member>
        <member name="M:LinqToDB.Linq.Expressions.MapBinary``3(System.String,System.Linq.Expressions.Expression{System.Func{``0,``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
            Maps specific <see cref="T:System.Linq.Expressions.BinaryExpression"/> to another <see cref="T:System.Linq.Expressions.LambdaExpression"/> during SQL generation.
            </summary>
            <typeparam name="TLeft">Exact type of  <see cref="P:System.Linq.Expressions.BinaryExpression.Left"/> member.</typeparam>
            <typeparam name="TRight">Exact type of  <see cref="P:System.Linq.Expressions.BinaryExpression.Right"/> member.</typeparam>
            <typeparam name="TR">Result type of <paramref name="binaryExpression"/>.</typeparam>
            <param name="providerName">Name of database provider to use with this connection. <see cref="T:LinqToDB.ProviderName"/> class for list of providers.</param>
            <param name="binaryExpression">Expression which has to be replaced.</param>
            <param name="expression">Lambda expression which has to replace <paramref name="binaryExpression"/>.</param>
            <remarks>Note that method is not thread safe and has to be used only in Application's initialization section.</remarks>
        </member>
        <member name="M:LinqToDB.Linq.Expressions.MapBinary``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
            Maps specific <see cref="T:System.Linq.Expressions.BinaryExpression"/> to another <see cref="T:System.Linq.Expressions.LambdaExpression"/> during SQL generation.
            </summary>
            <typeparam name="TLeft">Exact type of  <see cref="P:System.Linq.Expressions.BinaryExpression.Left"/> member.</typeparam>
            <typeparam name="TRight">Exact type of  <see cref="P:System.Linq.Expressions.BinaryExpression.Right"/> member.</typeparam>
            <typeparam name="TR">Result type of <paramref name="binaryExpression"/>.</typeparam>
            <param name="binaryExpression">Expression which has to be replaced.</param>
            <param name="expression">Lambda expression which has to replace <paramref name="binaryExpression"/>.</param>
            <remarks>Note that method is not thread safe and has to be used only in Application's initialization section.</remarks>
        </member>
        <member name="M:LinqToDB.Linq.Expressions.ConvertBinary(LinqToDB.Mapping.MappingSchema,System.Linq.Expressions.BinaryExpression)">
            <summary>
            Searches for registered BinaryExpression mapping and returns LambdaExpression which has to replace this expression.
            </summary>
            <param name="mappingSchema">Current mapping schema.</param>
            <param name="binaryExpression">Expression which has to be replaced.</param>
            <returns>Returns registered LambdaExpression or <see langword="null"/>.</returns>
        </member>
        <member name="T:LinqToDB.Linq.IMergeable`2">
            <summary>
            Merge command builder that have target table, source, match (ON) condition and at least one operation configured.
            You can add more operations to this type of builder or execute command.
            </summary>
            <typeparam name="TTarget">Target record type.</typeparam>
            <typeparam name="TSource">Source record type.</typeparam>
        </member>
        <member name="T:LinqToDB.Linq.IMergeableOn`2">
            <summary>
            Merge command builder that have only target table and source configured.
            Only operation available for this type of builder is match (ON) condition configuration.
            </summary>
            <typeparam name="TTarget">Target record type.</typeparam>
            <typeparam name="TSource">Source record type.</typeparam>
        </member>
        <member name="T:LinqToDB.Linq.IMergeableSource`2">
            <summary>
            Merge command builder that have target table, source and match (ON) condition configured.
            You can only add operations to this type of builder.
            </summary>
            <typeparam name="TTarget">Target record type.</typeparam>
            <typeparam name="TSource">Source record type.</typeparam>
        </member>
        <member name="T:LinqToDB.Linq.IMergeableUsing`1">
            <summary>
            Merge command builder that have only target table configured.
            Only operation available for this type of builder is source configuration.
            </summary>
            <typeparam name="TTarget">Target record type.</typeparam>
        </member>
        <member name="T:LinqToDB.Linq.Internals">
            <summary>
            This is internal API and is not intended for use by Linq To DB applications.
            It may change or be removed without further notice.
            </summary>
        </member>
        <member name="M:LinqToDB.Linq.Internals.CreateExpressionQueryInstance``1(LinqToDB.IDataContext,System.Linq.Expressions.Expression)">
            <summary>
            This is internal API and is not intended for use by Linq To DB applications.
            It may change or be removed without further notice.
            </summary>
        </member>
        <member name="M:LinqToDB.Linq.Internals.GetDataContext``1(System.Linq.IQueryable{``0})">
            <summary>
            This is internal API and is not intended for use by Linq To DB applications.
            It may change or be removed without further notice.
            </summary>
        </member>
        <member name="M:LinqToDB.Linq.Internals.GetDataContext``1(LinqToDB.Linq.IUpdatable{``0})">
            <summary>
            This is internal API and is not intended for use by Linq To DB applications.
            It may change or be removed without further notice.
            </summary>
        </member>
        <member name="M:LinqToDB.Linq.Internals.GetDataContext``1(LinqToDB.Linq.IValueInsertable{``0})">
            <summary>
            This is internal API and is not intended for use by Linq To DB applications.
            It may change or be removed without further notice.
            </summary>
        </member>
        <member name="M:LinqToDB.Linq.Internals.GetDataContext``2(LinqToDB.Linq.ISelectInsertable{``0,``1})">
            <summary>
            This is internal API and is not intended for use by Linq To DB applications.
            It may change or be removed without further notice.
            </summary>
        </member>
        <member name="M:LinqToDB.Linq.IQueryRunner.ExecuteNonQuery">
            <summary>
            Executes query and returns number of affected records.
            </summary>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.Linq.IQueryRunner.ExecuteScalar">
            <summary>
            Executes query and returns scalar value.
            </summary>
            <returns>Scalar value.</returns>
        </member>
        <member name="M:LinqToDB.Linq.IQueryRunner.ExecuteReader">
            <summary>
            Executes query and returns data reader.
            </summary>
            <returns>Data reader with query results.</returns>
        </member>
        <member name="M:LinqToDB.Linq.IQueryRunner.ExecuteNonQueryAsync(System.Threading.CancellationToken)">
            <summary>
            Executes query asynchronously and returns number of affected records.
            </summary>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.Linq.IQueryRunner.ExecuteScalarAsync(System.Threading.CancellationToken)">
            <summary>
            Executes query asynchronously and returns scalar value.
            </summary>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Scalar value.</returns>
        </member>
        <member name="M:LinqToDB.Linq.IQueryRunner.ExecuteReaderAsync(System.Threading.CancellationToken)">
            <summary>
            Executes query asynchronously and returns data reader.
            </summary>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Data reader with query results.</returns>
        </member>
        <member name="M:LinqToDB.Linq.IQueryRunner.GetSqlText">
            <summary>
            Returns SQL text for query.
            </summary>
            <returns>Query SQL text.</returns>
        </member>
        <member name="T:LinqToDB.Linq.LinqException">
            <summary>
            Defines the base class for the namespace exceptions.
            </summary>
            <remarks>
            This class is the base class for exceptions that may occur during
            execution of the namespace members.
            </remarks>
        </member>
        <member name="M:LinqToDB.Linq.LinqException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LinqToDB.Linq.LinqException"/> class.
            </summary>
            <remarks>
            This constructor initializes the <see cref="P:System.Exception.Message"/>
            property of the new instance
            to a system-supplied message that describes the error,
            such as "LinqToDB Linq error has occurred."
            </remarks>
        </member>
        <member name="M:LinqToDB.Linq.LinqException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:LinqToDB.Linq.LinqException"/> class
            with the specified error message.
            </summary>
            <param name="message">The message to display to the client when the exception is thrown.</param>
            <param name="args">An <see cref="T:System.Object"/> array containing zero or more objects to format.</param>
            <seealso cref="P:System.Exception.Message"/>
        </member>
        <member name="M:LinqToDB.Linq.LinqException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:LinqToDB.Linq.LinqException"/> class
            with the specified error message and InnerException property.
            </summary>
            <param name="message">The message to display to the client when the exception is thrown.</param>
            <param name="innerException">The InnerException, if any, that threw the current exception.</param>
            <seealso cref="P:System.Exception.Message"/>
            <seealso cref="P:System.Exception.InnerException"/>
        </member>
        <member name="M:LinqToDB.Linq.LinqException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:LinqToDB.Linq.LinqException"/> class
            with the InnerException property.
            </summary>
            <param name="innerException">The InnerException, if any, that threw the current exception.</param>
            <seealso cref="P:System.Exception.InnerException"/>
        </member>
        <member name="M:LinqToDB.Linq.LinqException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:LinqToDB.Linq.LinqException"/> class
            with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
            <remarks>
            This constructor is called during deserialization to
            reconstitute the exception object transmitted over a stream.
            </remarks>
        </member>
        <member name="T:LinqToDB.Linq.NoLinqCache">
            <summary>
            Provides a scope, in which LINQ queries will not be added to a LINQ query cache. This could be used to tell
            linq2db to not cache queries that operate with big parametes.
            More details could be found <a href="https://github.com/linq2db/linq2db/issues/256">here</a>.
            Take into account that this class only disables adding of new query, created in its scope, to a cache.
            If query already present in cache - linq2db will use cached query.
            </summary>
        </member>
        <member name="M:LinqToDB.Linq.NoLinqCache.Scope">
            <summary>
            Creates disposable no-cache scope.
            </summary>
        </member>
        <member name="M:LinqToDB.Linq.Query.ClearCaches">
            <summary>
            Clears query caches for all typed queries.
            </summary>
        </member>
        <member name="F:LinqToDB.Linq.Query`1.QueryCache.CacheMissCount">
            <summary>
            Count of queries which has not been found in cache.
            </summary>
        </member>
        <member name="F:LinqToDB.Linq.Query`1.QueryCache.CacheSize">
            <summary>
            LINQ query max cache size (per entity type).
            </summary>
        </member>
        <member name="M:LinqToDB.Linq.Query`1.QueryCache.Clear">
            <summary>
            Empties LINQ query cache for <typeparamref name="T"/> entity type.
            </summary>
        </member>
        <member name="M:LinqToDB.Linq.Query`1.QueryCache.TryAdd(LinqToDB.IDataContext,LinqToDB.Linq.Query{`0},LinqToDB.Linq.QueryFlags)">
            <summary>
            Adds query to cache if it is not cached already.
            </summary>
        </member>
        <member name="M:LinqToDB.Linq.Query`1.QueryCache.Find(LinqToDB.IDataContext,System.Linq.Expressions.Expression,LinqToDB.Linq.QueryFlags)">
            <summary>
            Search for query in cache and of found, try to move it to better position in cache.
            </summary>
        </member>
        <member name="M:LinqToDB.Linq.Query`1.ClearCache">
            <summary>
            Empties LINQ query cache for <typeparamref name="T"/> entity type.
            </summary>
        </member>
        <member name="F:LinqToDB.Linq.QueryFlags.GroupByGuard">
            <summary>
            Bit set, when <see cref="F:LinqToDB.Common.Configuration.Linq.GuardGrouping"/> enabled for connection.
            </summary>
        </member>
        <member name="F:LinqToDB.Linq.QueryFlags.InlineParameters">
            <summary>
            Bit set, when inline parameters enabled for connection.
            </summary>
        </member>
        <member name="F:LinqToDB.Linq.QueryFlags.ParameterizeTakeSkip">
            <summary>
            Bit set, when <see cref="F:LinqToDB.Common.Configuration.Linq.ParameterizeTakeSkip"/> is enabled for query.
            </summary>
        </member>
        <member name="F:LinqToDB.Linq.QueryFlags.PreferApply">
            <summary>
            Bit set, when <see cref="F:LinqToDB.Common.Configuration.Linq.PreferApply"/> is enabled for query.
            </summary>
        </member>
        <member name="F:LinqToDB.Linq.QueryFlags.CompareNullsAsValues">
            <summary>
            BIt set, when <see cref="F:LinqToDB.Common.Configuration.Linq.CompareNullsAsValues"/> is enabled for query.
            </summary>
        </member>
        <member name="F:LinqToDB.Linq.RecordType.NotRecord">
            <summary>
            Type is not recognized as record type.
            </summary>
        </member>
        <member name="F:LinqToDB.Linq.RecordType.FSharp">
            <summary>
            Type is F# record type (has reflection information about members position).
            </summary>
        </member>
        <member name="F:LinqToDB.Linq.RecordType.RecordClass">
            <summary>
            Type is C# record class or any other class with constructor parameter mathing properties by name.
            </summary>
        </member>
        <member name="F:LinqToDB.Linq.RecordType.AnonymousType">
            <summary>
            Type is C# or VB.NET anonymous type.
            </summary>
        </member>
        <member name="F:LinqToDB.Linq.RecordType.CallConstructorOnWrite">
            <summary>
            Mask for types that instantiated using record-like constructor.
            </summary>
        </member>
        <member name="F:LinqToDB.Linq.RecordType.CallConstructorOnRead">
            <summary>
            Mask for types that instantiated in expressions using record-like constructor.
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.AssociationAttribute">
            <summary>
            Defines relation between tables or views.
            Could be applied to:
            - instance properties and fields;
            - instance and static methods.
            
            For associations, defined using static methods, <c>this</c> mapping side defined by type of first parameter.
            Also, optionally, you can pass data context object as extra method parameter.
            
            Based on association type - to one or to multiple records - result type should be target record's mapping type or
            <see cref="T:System.IEquatable`1"/> collection.
            
            By default associations are used only for joins generation in LINQ queries and will have <c>null</c> value for loaded
            records. To load data into association, you should explicitly specify it in your query using <see cref="M:LinqToDB.LinqExtensions.LoadWith``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})"/> method.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.AssociationAttribute.#ctor">
            <summary>
            Creates attribute instance.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.AssociationAttribute.Configuration">
            <summary>
            Gets or sets mapping schema configuration name, for which this attribute should be taken into account.
            <see cref="T:LinqToDB.ProviderName"/> for standard names.
            Attributes with <c>null</c> or empty string <see cref="P:LinqToDB.Mapping.AssociationAttribute.Configuration"/> value applied to all configurations (if no attribute found for current configuration).
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.AssociationAttribute.ThisKey">
            <summary>
            Gets or sets comma-separated list of association key members on this side of association.
            Those keys will be used for join predicate generation and must be compatible with <see cref="P:LinqToDB.Mapping.AssociationAttribute.OtherKey"/> keys.
            You must specify keys it you do not use custom predicate (see <see cref="P:LinqToDB.Mapping.AssociationAttribute.ExpressionPredicate"/>).
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.AssociationAttribute.OtherKey">
            <summary>
            Gets or sets comma-separated list of association key members on another side of association.
            Those keys will be used for join predicate generation and must be compatible with <see cref="P:LinqToDB.Mapping.AssociationAttribute.ThisKey"/> keys.
            You must specify keys it you do not use custom predicate (see <see cref="P:LinqToDB.Mapping.AssociationAttribute.ExpressionPredicate"/>).
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.AssociationAttribute.ExpressionPredicate">
            <summary>
            Specifies static property or method without parameters, that returns join predicate expression. This predicate will be used together with
            <see cref="P:LinqToDB.Mapping.AssociationAttribute.ThisKey"/>/<see cref="P:LinqToDB.Mapping.AssociationAttribute.OtherKey"/> join keys, if they are specified.
            Predicate expression lambda function takes two parameters: this record and other record and returns boolean result.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.AssociationAttribute.Predicate">
            <summary>
            Specifies predicate expression. This predicate will be used together with
            <see cref="P:LinqToDB.Mapping.AssociationAttribute.ThisKey"/>/<see cref="P:LinqToDB.Mapping.AssociationAttribute.OtherKey"/> join keys, if they are specified.
            Predicate expression lambda function takes two parameters: this record and other record and returns boolean result.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.AssociationAttribute.QueryExpressionMethod">
            <summary>
            Specifies static property or method without parameters, that returns IQueryable expression. If is set, other association keys are ignored.
            Result of query method should be lambda which takes two parameters: this record, IDataContext and returns IQueryable result.
            <para>
            <example>
            <code>
            public class SomeEntity
            {
                [Association(ExpressionQueryMethod = nameof(OtherImpl), CanBeNull = true)]
                public SomeOtherEntity Other { get; set; }
            
                public static Expression&lt;Func&lt;SomeEntity, IDataContext, IQueryable&lt;SomeOtherEntity&gt;&gt;&gt; OtherImpl()
                {
                    return (e, db) =&gt; db.GetTable&lt;SomeOtherEntity&gt;().Where(se =&gt; se.Id == e.Id);
                }
            }
            </code>
            </example>
            </para>
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.AssociationAttribute.QueryExpression">
            <summary>
            Specifies query expression. If is set, other association keys are ignored.
            Lambda function takes two parameters: this record, IDataContext and returns IQueryable result.
            <para>
            <example>
            <code>
            var Expression&lt;Func&lt;SomeEntity, IDataContext, IQueryable&lt;SomeOtherEntity&gt;&gt;&gt; associationQuery;
            <para />
            associationQuery = (e, db) =&gt; db.GetTable&lt;SomeOtherEntity&gt;().Where(se =&gt; se.Id == e.Id);
            </code>
            </example>
            </para>
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.AssociationAttribute.Storage">
            <summary>
            Specify name of property or field to store association value, loaded using <see cref="M:LinqToDB.LinqExtensions.LoadWith``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})"/> method.
            When not specified, current association member will be used.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.AssociationAttribute.CanBeNull">
            <summary>
            Defines type of join:
            - inner join for <c>CanBeNull = false</c>;
            - left join for <c>CanBeNull = true</c>.
            Default value: <c>true</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.AssociationAttribute.KeyName">
            <summary>
            This property is not used by linq2db and could be used for informational purposes.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.AssociationAttribute.BackReferenceName">
            <summary>
            This property is not used by linq2db and could be used for informational purposes.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.AssociationAttribute.IsBackReference">
            <summary>
            This property is not used by linq2db and could be used for informational purposes.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.AssociationAttribute.Relationship">
            <summary>
            This property is not used by linq2db and could be used for informational purposes.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.AssociationAttribute.AliasName">
            <summary>
            Gets or sets alias for association. Used in SQL generation process.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.AssociationAttribute.GetThisKeys">
            <summary>
            Returns <see cref="P:LinqToDB.Mapping.AssociationAttribute.ThisKey"/> value as a list of key member names.
            </summary>
            <returns>List of key members.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.AssociationAttribute.GetOtherKeys">
            <summary>
            Returns <see cref="P:LinqToDB.Mapping.AssociationAttribute.OtherKey"/> value as a list of key member names.
            </summary>
            <returns>List of key members.</returns>
        </member>
        <member name="T:LinqToDB.Mapping.AssociationDescriptor">
            <summary>
            Stores association descriptor.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.AssociationDescriptor.#ctor(System.Type,System.Reflection.MemberInfo,System.String[],System.String[],System.String,System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression,System.String,System.Boolean,System.String)">
            <summary>
            Creates descriptor instance.
            </summary>
            <param name="type">From (this) side entity mapping type.</param>
            <param name="memberInfo">Association member (field, property or method).</param>
            <param name="thisKey">List of names of from (this) key members.</param>
            <param name="otherKey">List of names of to (other) key members.</param>
            <param name="expressionPredicate">Optional predicate expression source property or method.</param>
            <param name="predicate">Optional predicate expression.</param>
            <param name="expressionQueryMethod">Optional name of query method.</param>
            <param name="expressionQuery">Optional query expression.</param>
            <param name="storage">Optional association value storage field or property name.</param>
            <param name="canBeNull">If <c>true</c>, association will generate outer join, otherwise - inner join.</param>
            <param name="aliasName">Optional alias for representation in SQL.</param>
        </member>
        <member name="P:LinqToDB.Mapping.AssociationDescriptor.MemberInfo">
            <summary>
            Gets or sets association member (field, property or method).
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.AssociationDescriptor.ThisKey">
            <summary>
            Gets or sets list of names of from (this) key members. Could be empty, if association has predicate expression.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.AssociationDescriptor.OtherKey">
            <summary>
            Gets or sets list of names of to (other) key members. Could be empty, if association has predicate expression.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.AssociationDescriptor.ExpressionPredicate">
            <summary>
            Gets or sets optional predicate expression source property or method.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.AssociationDescriptor.ExpressionQueryMethod">
            <summary>
            Gets or sets optional query method source property or method.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.AssociationDescriptor.ExpressionQuery">
            <summary>
            Gets or sets optional query expression.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.AssociationDescriptor.Predicate">
            <summary>
            Gets or sets optional predicate expression.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.AssociationDescriptor.Storage">
            <summary>
            Gets or sets optional association value storage field or property name. Used with LoadWith.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.AssociationDescriptor.CanBeNull">
            <summary>
            Gets or sets join type, generated for current association.
            If <c>true</c>, association will generate outer join, otherwise - inner join.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.AssociationDescriptor.AliasName">
            <summary>
            Gets or sets alias for association. Used in SQL generation process.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.AssociationDescriptor.ParseKeys(System.String)">
            <summary>
            Parse comma-separated list of association key column members into string array.
            </summary>
            <param name="keys">Comma-separated (spaces allowed) list of association key column members.</param>
            <returns>Returns array with names of association key column members.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.AssociationDescriptor.GenerateAlias">
            <summary>
            Generates table alias for association.
            </summary>
            <returns>Generated alias.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.AssociationDescriptor.GetPredicate(System.Type,System.Type)">
            <summary>
            Loads predicate expression from <see cref="P:LinqToDB.Mapping.AssociationDescriptor.ExpressionPredicate"/> member.
            </summary>
            <param name="parentType">Type of object that declares association</param>
            <param name="objectType">Type of object associated with expression predicate</param>
            <returns><c>null</c> of association has no custom predicate expression or predicate expression, specified
            by <see cref="P:LinqToDB.Mapping.AssociationDescriptor.ExpressionPredicate"/> member.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.AssociationDescriptor.GetQueryMethod(System.Type,System.Type)">
            <summary>
            Loads query method expression from <see cref="P:LinqToDB.Mapping.AssociationDescriptor.ExpressionQueryMethod"/> member.
            </summary>
            <param name="parentType">Type of object that declares association</param>
            <param name="objectType">Type of object associated with query method expression</param>
            <returns><c>null</c> of association has no custom query method expression or query method expression, specified
            by <see cref="P:LinqToDB.Mapping.AssociationDescriptor.ExpressionQueryMethod"/> member.</returns>
        </member>
        <member name="T:LinqToDB.Mapping.ColumnAliasAttribute">
            <summary>
            Specifies that current field or property is just an alias to another property or field.
            Currently this attribute has several issues:
            - you can apply it to class or interface - such attribute will be ignored by linq2db;
            - it is possible to define attribute without setting  <see cref="P:LinqToDB.Mapping.ColumnAliasAttribute.MemberName"/> value;
            - you can define alias to another alias property or field and potentially create loop.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnAliasAttribute.#ctor">
            <summary>
            Use <see cref="M:LinqToDB.Mapping.ColumnAliasAttribute.#ctor(System.String)"/> constructor or specify <see cref="P:LinqToDB.Mapping.ColumnAliasAttribute.MemberName"/> value.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnAliasAttribute.#ctor(System.String)">
            <summary>
            Creates attribute instance.
            </summary>
            <param name="memberName">Name of target property or field.</param>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnAliasAttribute.Configuration">
            <summary>
            Mapping schema configuration name, for which this attribute should be taken into account.
            <see cref="T:LinqToDB.ProviderName"/> for standard names.
            Attributes with <c>null</c> or empty string <see cref="P:LinqToDB.Mapping.ColumnAliasAttribute.Configuration"/> value applied to all configurations (if no attribute found for current configuration).
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnAliasAttribute.MemberName">
            <summary>
            Gets or sets the name of target property or field.
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.ColumnAttribute">
            <summary>
            Configures mapping of mapping class member to database column.
            Could be applied directly to a property or field or to mapping class/interface.
            In latter case you should specify member name using <see cref="P:LinqToDB.Mapping.ColumnAttribute.MemberName"/> property.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnAttribute.#ctor">
            <summary>
            Creates attribute instance.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnAttribute.#ctor(System.String)">
            <summary>
            Creates attribute instance.
            </summary>
            <param name="columnName">Database column name.</param>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates attribute instance.
            </summary>
            <param name="columnName">Database column name.</param>
            <param name="memberName">Name of mapped member. See <see cref="P:LinqToDB.Mapping.ColumnAttribute.MemberName"/> for more details.</param>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnAttribute.#ctor(System.String,LinqToDB.Mapping.ColumnAttribute)">
            <summary>
            Copy constructor.
            </summary>
            <param name="memberName">Name of mapped member. See <see cref="P:LinqToDB.Mapping.ColumnAttribute.MemberName"/> for more details.</param>
            <param name="ca">Attribute to clone.</param>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnAttribute.#ctor(LinqToDB.Mapping.ColumnAttribute)">
            <summary>
            Copy constructor.
            </summary>
            <param name="ca">Attribute to clone.</param>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnAttribute.Configuration">
            <summary>
            Gets or sets mapping schema configuration name, for which this attribute should be taken into account.
            <see cref="T:LinqToDB.ProviderName"/> for standard names.
            Attributes with <c>null</c> or empty string <see cref="P:LinqToDB.Mapping.ColumnAttribute.Configuration"/> value applied to all configurations (if no attribute found for current configuration).
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnAttribute.Name">
            <summary>
            Gets or sets the name of a column in database.
            If not specified, member name will be used.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnAttribute.MemberName">
             <summary>
             Gets or sets the name of mapped member.
             When applied to class or interface, should contain name of property of field.
            
             If column mapped to a property or field of composite object, <see cref="P:LinqToDB.Mapping.ColumnAttribute.MemberName"/> should contain a path to that
             member using dot as separator.
             <example>
             <code>
             public class Address
             {
                 public string City     { get; set; }
                 public string Street   { get; set; }
                 public int    Building { get; set; }
             }
            
             [Column("city", "Residence.City")]
             [Column("user_name", "Name")]
             public class User
             {
                 public string Name;
            
                 [Column("street", ".Street")]
                 [Column("building_number", MemberName = ".Building")]
                 public Address Residence { get; set; }
             }
             </code>
             </example>
             </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnAttribute.DataType">
            <summary>
            Gets or sets linq2db type for column.
            Default value: default type, defined for member type in mapping schema.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnAttribute.DbType">
            <summary>
            Gets or sets the name of the database column type.
            Default value: default type, defined for member type in mapping schema.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnAttribute.IsColumn">
            <summary>
            Gets or sets flag that tells that current member should be included into mapping.
            Use NonColumnAttribute instead as a shorthand.
            Default value: <c>true</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnAttribute.Storage">
            <summary>
            Gets or sets a storage property or field to hold the value from a column.
            Could be usefull e.g. in combination of private storage field and getter-only mapping property.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnAttribute.IsDiscriminator">
            <summary>
            Gets or sets whether a column contains a discriminator value for a LINQ to DB inheritance hierarchy.
            <see cref="T:LinqToDB.Mapping.InheritanceMappingAttribute"/> for more details.
            Default value: <c>false</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnAttribute.SkipOnEntityFetch">
            <summary>
            Gets or sets whether a column must be explicitly defined in a Select statement to be fetched. If <c>true</c>, a "SELECT *"-ish statement won't retrieve this column.
            Default value: <c>false</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnAttribute.SkipOnInsert">
            <summary>
            Gets or sets whether a column is insertable.
            This flag will affect only insert operations with implicit columns specification like
            <see cref="M:LinqToDB.DataExtensions.Insert``1(LinqToDB.IDataContext,``0,System.String,System.String,System.String,System.String,LinqToDB.TableOptions)"/>
            method and will be ignored when user explicitly specifies value for this column.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnAttribute.HasSkipOnInsert">
            <summary>
            Returns <c>true</c>, if <see cref="P:LinqToDB.Mapping.ColumnAttribute.SkipOnInsert"/> was configured for current attribute.
            </summary>
            <returns><c>true</c> if <see cref="P:LinqToDB.Mapping.ColumnAttribute.SkipOnInsert"/> property was set in attribute.</returns>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnAttribute.SkipOnUpdate">
            <summary>
            Gets or sets whether a column is updatable.
            This flag will affect only update operations with implicit columns specification like
            <see cref="M:LinqToDB.DataExtensions.Update``1(LinqToDB.IDataContext,``0,System.String,System.String,System.String,System.String,LinqToDB.TableOptions)"/>
            method and will be ignored when user explicitly specifies value for this column.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnAttribute.HasSkipOnUpdate">
            <summary>
            Returns <c>true</c>, if <see cref="P:LinqToDB.Mapping.ColumnAttribute.SkipOnUpdate"/> was configured for current attribute.
            </summary>
            <returns><c>true</c> if <see cref="P:LinqToDB.Mapping.ColumnAttribute.SkipOnUpdate"/> property was set in attribute.</returns>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnAttribute.IsIdentity">
            <summary>
            Gets or sets whether a column contains values that the database auto-generates.
            Also see <see cref="T:LinqToDB.Mapping.IdentityAttribute"/>.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnAttribute.HasIsIdentity">
            <summary>
            Returns <c>true</c>, if <see cref="P:LinqToDB.Mapping.ColumnAttribute.IsIdentity"/> was configured for current attribute.
            </summary>
            <returns><c>true</c> if <see cref="P:LinqToDB.Mapping.ColumnAttribute.IsIdentity"/> property was set in attribute.</returns>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnAttribute.IsPrimaryKey">
            <summary>
            Gets or sets whether this class member represents a column that is part or all of the primary key of the table.
            Also see <see cref="T:LinqToDB.Mapping.PrimaryKeyAttribute"/>.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnAttribute.HasIsPrimaryKey">
            <summary>
            Returns <c>true</c>, if <see cref="P:LinqToDB.Mapping.ColumnAttribute.IsPrimaryKey"/> was configured for current attribute.
            </summary>
            <returns><c>true</c> if <see cref="P:LinqToDB.Mapping.ColumnAttribute.IsPrimaryKey"/> property was set in attribute.</returns>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnAttribute.PrimaryKeyOrder">
            <summary>
            Gets or sets the Primary Key order.
            See <see cref="P:LinqToDB.Mapping.PrimaryKeyAttribute.Order"/> for more details.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnAttribute.CanBeNull">
            <summary>
            Gets or sets whether a column can contain <c>NULL</c> values.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnAttribute.HasCanBeNull">
            <summary>
            Returns <c>true</c>, if <see cref="P:LinqToDB.Mapping.ColumnAttribute.CanBeNull"/> was configured for current attribute.
            </summary>
            <returns><c>true</c> if <see cref="P:LinqToDB.Mapping.ColumnAttribute.CanBeNull"/> property was set in attribute.</returns>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnAttribute.Length">
            <summary>
            Gets or sets the length of the database column.
            Default value: value, defined for member type in mapping schema.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnAttribute.HasLength">
            <summary>
            Returns <c>true</c>, if <see cref="P:LinqToDB.Mapping.ColumnAttribute.Length"/> was configured for current attribute.
            </summary>
            <returns><c>true</c> if <see cref="P:LinqToDB.Mapping.ColumnAttribute.Length"/> property was set in attribute.</returns>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnAttribute.Precision">
            <summary>
            Gets or sets the precision of the database column.
            Default value: value, defined for member type in mapping schema.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnAttribute.HasPrecision">
            <summary>
            Returns <c>true</c>, if <see cref="P:LinqToDB.Mapping.ColumnAttribute.Precision"/> was configured for current attribute.
            </summary>
            <returns><c>true</c> if <see cref="P:LinqToDB.Mapping.ColumnAttribute.Precision"/> property was set in attribute.</returns>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnAttribute.Scale">
            <summary>
            Gets or sets the Scale of the database column.
            Default value: value, defined for member type in mapping schema.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnAttribute.HasScale">
            <summary>
            Returns <c>true</c>, if <see cref="P:LinqToDB.Mapping.ColumnAttribute.Scale"/> was configured for current attribute.
            </summary>
            <returns><c>true</c> if <see cref="P:LinqToDB.Mapping.ColumnAttribute.Scale"/> property was set in attribute.</returns>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnAttribute.CreateFormat">
            <summary>
            Custom template for column definition in create table SQL expression, generated using
            <see cref="M:LinqToDB.DataExtensions.CreateTable``1(LinqToDB.IDataContext,System.String,System.String,System.String,System.String,System.String,LinqToDB.SqlQuery.DefaultNullable,System.String,LinqToDB.TableOptions)"/> methods.
            Template accepts following string parameters:
            - {0} - column name;
            - {1} - column type;
            - {2} - NULL specifier;
            - {3} - identity specification.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnAttribute.Order">
            <summary>
            Specifies the order of the field in table creation.
            Positive values first (ascending), then unspecified (arbitrary), then negative values (ascending).
            </summary>
            <remarks>
            Ordering performed in <see cref="T:LinqToDB.SqlQuery.SqlTable"/> constructor.
            </remarks>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnAttribute.HasOrder">
            <summary>
            Returns <c>true</c>, if <see cref="P:LinqToDB.Mapping.ColumnAttribute.Order"/> was configured for current attribute.
            </summary>
            <returns><c>true</c> if <see cref="P:LinqToDB.Mapping.ColumnAttribute.Order"/> property was set in attribute.</returns>
        </member>
        <member name="T:LinqToDB.Mapping.ColumnDescriptor">
            <summary>
            Stores mapping entity column descriptor.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnDescriptor.#ctor(LinqToDB.Mapping.MappingSchema,LinqToDB.Mapping.EntityDescriptor,LinqToDB.Mapping.ColumnAttribute,LinqToDB.Reflection.MemberAccessor,System.Boolean)">
            <summary>
            Creates descriptor instance.
            </summary>
            <param name="mappingSchema">Mapping schema, associated with descriptor.</param>
            <param name="entityDescriptor">Entity descriptor.</param>
            <param name="columnAttribute">Column attribute, from which descriptor data should be extracted.</param>
            <param name="memberAccessor">Column mapping member accessor.</param>
            <param name="hasInheritanceMapping">Owning entity included in inheritance mapping.</param>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.MappingSchema">
            <summary>
            Gets MappingSchema for current ColumnDescriptor.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.EntityDescriptor">
            <summary>
            Gets Entity descriptor.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.MemberAccessor">
            <summary>
            Gets column mapping member accessor.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.HasInheritanceMapping">
            <summary>
            Indicates that owning entity included in inheritance mapping.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.MemberInfo">
            <summary>
            Gets column mapping member (field or property).
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.StorageInfo">
            <summary>
            Gets value storage member (field or property).
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.MemberType">
            <summary>
            Gets type of column mapping member (field or property).
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.StorageType">
            <summary>
            Gets type of column value storage member (field or property).
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.MemberName">
             <summary>
             Gets the name of mapped member.
             When applied to class or interface, should contain name of property of field.
            
             If column is mapped to a property or field of composite object, <see cref="P:LinqToDB.Mapping.ColumnDescriptor.MemberName"/> should contain a path to that
             member using dot as separator.
             <example>
             <code>
             public class Address
             {
                 public string City     { get; set; }
                 public string Street   { get; set; }
                 public int    Building { get; set; }
             }
            
             [Column("city", "Residence.Street")]
             [Column("user_name", "Name")]
             public class User
             {
                 public string Name;
            
                 [Column("street", ".Street")]
                 [Column("building_number", MemberName = ".Building")]
                 public Address Residence { get; set; }
             }
             </code>
             </example>
             </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.ColumnName">
            <summary>
            Gets the name of a column in database.
            If not specified, <see cref="P:LinqToDB.Mapping.ColumnDescriptor.MemberName"/> value will be used.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.Storage">
            <summary>
            Gets storage property or field to hold the value from a column.
            Could be usefull e.g. in combination of private storage field and getter-only mapping property.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.IsDiscriminator">
            <summary>
            Gets whether a column contains a discriminator value for a LINQ to DB inheritance hierarchy.
            <see cref="T:LinqToDB.Mapping.InheritanceMappingAttribute"/> for more details.
            Default value: <c>false</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.DataType">
            <summary>
            Gets LINQ to DB type for column.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.DbType">
            <summary>
            Gets the name of the database column type.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.IsIdentity">
            <summary>
            Gets whether a column contains values that the database auto-generates.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.SkipOnInsert">
            <summary>
            Gets whether a column is insertable.
            This flag will affect only insert operations with implicit columns specification like
            <see cref="M:LinqToDB.DataExtensions.Insert``1(LinqToDB.IDataContext,``0,System.String,System.String,System.String,System.String,LinqToDB.TableOptions)"/>
            method and will be ignored when user explicitly specifies value for this column.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.SkipOnEntityFetch">
            <summary>
            Gets whether a column must be explicitly defined in a Select statement to be fetched. If <c>true</c>, a "SELECT *"-ish statement won't retrieve this column.
            Default value: <c>false</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.HasValuesToSkipOnInsert">
            <summary>
            Gets whether the column has specific values that should be skipped on insert.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.HasValuesToSkipOnUpdate">
            <summary>
            Gets whether the column has specific values that should be skipped on update.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.SkipBaseAttributes">
            <summary>
            Gets whether the column has specific values that should be skipped on insert.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.SkipModificationFlags">
            <summary>
            Gets flags for which operation values are skipped.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnDescriptor.ShouldSkip(System.Object,LinqToDB.Mapping.EntityDescriptor,LinqToDB.Mapping.SkipModification)">
            <summary>
            Checks if the passed object has values that should bes skipped based on the given flags.
            </summary>
            <param name="obj">The object containing the values for the operation.</param>
            <param name="descriptor"><see cref="P:LinqToDB.Mapping.ColumnDescriptor.EntityDescriptor"/> of the current instance.</param>
            <param name="flags">The flags that specify which operation should be checked.</param>
            <returns><c>true</c> if object contains values that should be skipped. </returns>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.SkipOnUpdate">
            <summary>
            Gets whether a column is updatable.
            This flag will affect only update operations with implicit columns specification like
            <see cref="M:LinqToDB.DataExtensions.Update``1(LinqToDB.IDataContext,``0,System.String,System.String,System.String,System.String,LinqToDB.TableOptions)"/>
            method and will be ignored when user explicitly specifies value for this column.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.IsPrimaryKey">
            <summary>
            Gets whether this member represents a column that is part or all of the primary key of the table.
            Also see <see cref="T:LinqToDB.Mapping.PrimaryKeyAttribute"/>.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.PrimaryKeyOrder">
            <summary>
            Gets order of current column in composite primary key.
            Order is used for query generation to define in which order primary key columns must be mentioned in query
            from columns with smallest order value to greatest.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.CanBeNull">
            <summary>
            Gets whether a column can contain null values.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.Length">
            <summary>
            Gets the length of the database column.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.Precision">
            <summary>
            Gets the precision of the database column.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.Scale">
            <summary>
            Gets the Scale of the database column.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.CreateFormat">
            <summary>
            Custom template for column definition in create table SQL expression, generated using
            <see cref="M:LinqToDB.DataExtensions.CreateTable``1(LinqToDB.IDataContext,System.String,System.String,System.String,System.String,System.String,LinqToDB.SqlQuery.DefaultNullable,System.String,LinqToDB.TableOptions)"/> methods.
            Template accepts following string parameters:
            - {0} - column name;
            - {1} - column type;
            - {2} - NULL specifier;
            - {3} - identity specification.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.Order">
            <summary>
            Sort order for column list.
            Positive values first, then unspecified (null), then negative values.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.SequenceName">
            <summary>
            Gets sequence name for specified column.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.ValueConverter">
            <summary>
            Gets value converter for specific column.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnDescriptor.GetDbDataType(System.Boolean)">
            <summary>
            Returns DbDataType for current column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnDescriptor.GetConvertedDbDataType">
            <summary>
            Returns DbDataType for current column after conversions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnDescriptor.GetOriginalValueLambda">
            <summary>
            Returns Lambda for extracting original column value from entity object.
            </summary>
            <returns>Returns Lambda which extracts member value.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnDescriptor.GetDbValueLambda">
            <summary>
            Returns Lambda for extracting column value, converted to database type, from entity object.
            </summary>
            <returns>Returns Lambda which extracts member value to database type.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnDescriptor.GetDefaultDbValueExpression">
            <summary>
            Returns Lambda for extracting column value, converted to database type, from entity object.
            </summary>
            <returns>Returns Lambda which extracts member value to database type.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnDescriptor.GetDbParamLambda">
            <summary>
            Returns Lambda for extracting column value, converted to database type or <see cref="T:LinqToDB.Data.DataParameter"/>, from entity object.
            </summary>
            <returns>Returns Lambda which extracts member value to database type or <see cref="T:LinqToDB.Data.DataParameter"/>.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnDescriptor.GetDefaultDbParamExpression">
            <summary>
            Returns default column value, converted to database type or <see cref="T:LinqToDB.Data.DataParameter"/>.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnDescriptor.ApplyConversions(LinqToDB.Mapping.MappingSchema,System.Linq.Expressions.Expression,LinqToDB.Common.DbDataType,LinqToDB.Common.IValueConverter,System.Boolean)">
            <summary>
            Helper function for applying all needed conversions for converting value to database type.
            </summary>
            <param name="mappingSchema">Mapping schema.</param>
            <param name="getterExpr">Expression which returns value which has to be converted.</param>
            <param name="dbDataType">Database type.</param>
            <param name="valueConverter">Optional <see cref="T:LinqToDB.Common.IValueConverter"/></param>
            <param name="includingEnum">Provides default enum conversion.</param>
            <returns>Expression with applied conversions.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnDescriptor.ApplyConversions(System.Linq.Expressions.Expression,LinqToDB.Common.DbDataType,System.Boolean)">
            <summary>
            Helper function for applying all needed conversions for converting value to database type.
            </summary>
            <param name="getterExpr">Expression which returns value which has to be converted.</param>
            <param name="dbDataType">Database type.</param>
            <param name="includingEnum">Provides default enum conversion.</param>
            <returns>Expression with applied conversions.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnDescriptor.GetProviderValue(System.Object)">
            <summary>
            Extracts column value, converted to database type, from entity object.
            </summary>
            <param name="obj">Entity object to extract column value from.</param>
            <returns>Returns column value, converted to database type.</returns>
        </member>
        <member name="T:LinqToDB.Mapping.DataTypeAttribute">
            <summary>
            This attribute allows to override default types, defined in mapping schema, for current column.
            Also see <seealso cref="P:LinqToDB.Mapping.ColumnAttribute.DataType"/> and <seealso cref="P:LinqToDB.Mapping.ColumnAttribute.DbType"/>.
            Applying this attribute to class or interface will have no effect.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.DataTypeAttribute.#ctor(LinqToDB.DataType)">
            <summary>
            Creates attribute instance.
            </summary>
            <param name="dataType">linq2db column type name.</param>
        </member>
        <member name="M:LinqToDB.Mapping.DataTypeAttribute.#ctor(System.String)">
            <summary>
            Creates attribute instance.
            </summary>
            <param name="dbType">SQL column type name.</param>
        </member>
        <member name="M:LinqToDB.Mapping.DataTypeAttribute.#ctor(LinqToDB.DataType,System.String)">
            <summary>
            Creates attribute instance.
            </summary>
            <param name="dataType">linq2db column type name.</param>
            <param name="dbType">SQL column type name.</param>
        </member>
        <member name="P:LinqToDB.Mapping.DataTypeAttribute.Configuration">
            <summary>
            Gets or sets mapping schema configuration name, for which this attribute should be taken into account.
            <see cref="T:LinqToDB.ProviderName"/> for standard names.
            Attributes with <c>null</c> or empty string <see cref="P:LinqToDB.Mapping.DataTypeAttribute.Configuration"/> value applied to all configurations (if no attribute found for current configuration).
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.DataTypeAttribute.DataType">
            <summary>
            Gets or sets linq2db type of the database column.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.DataTypeAttribute.DbType">
            <summary>
            Gets or sets the name of the database column type.
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.DynamicColumnAccessorAttribute">
             <summary>
             Configure setter and getter methods for dynamic columns.
             </summary>
             <remarks>
             Expected signatures for getter and setter:
             <code>
             // should return true and value of property, if property value found in storage
             // should return false if property value not found in storage
             static object Getter(Entity object, string propertyName, object defaultValue);
             // or
             object this.Getter(string propertyName, object defaultValue);
             // where defaultValue is default value for property type for current MappingSchema
            
             static void Setter(Entity object, string propertyName, object value)
             or
             void this.Setter(string propertyName, object value)
             </code>
             </remarks>
             <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:LinqToDB.Mapping.DynamicColumnAccessorAttribute.Configuration">
            <summary>
            Gets or sets mapping schema configuration name, for which this attribute should be taken into account.
            <see cref="T:LinqToDB.ProviderName"/> for standard names.
            Attributes with <c>null</c> or empty string <see cref="P:LinqToDB.Mapping.DynamicColumnAccessorAttribute.Configuration"/> value applied to all configurations (if no attribute found for current configuration).
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.DynamicColumnAccessorAttribute.SetterMethod">
            <summary>
            Gets or sets name of dynamic properties property setter method.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.DynamicColumnAccessorAttribute.GetterMethod">
            <summary>
            Gets or sets name of dynamic properties property getter method.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.DynamicColumnAccessorAttribute.SetterExpressionMethod">
            <summary>
            Gets or sets name of dynamic properties property setter expression method or property. Method or property
            must be static.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.DynamicColumnAccessorAttribute.GetterExpressionMethod">
            <summary>
            Gets or sets name of dynamic properties property getter expression method or property. Method or property
            must be static.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.DynamicColumnAccessorAttribute.SetterExpression">
            <summary>
            Gets or sets name of dynamic properties property set expression.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.DynamicColumnAccessorAttribute.GetterExpression">
            <summary>
            Gets or sets name of dynamic properties property get expression.
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.DynamicColumnInfo">
            <summary>
            Represents a dynamic column, which doesn't have a backing field in it's declaring type.
            </summary>
            <seealso cref="T:System.Reflection.MemberInfo" />
        </member>
        <member name="P:LinqToDB.Mapping.DynamicColumnInfo.Name">
            <inheritdoc cref="P:System.Reflection.MemberInfo.Name"/>
        </member>
        <member name="P:LinqToDB.Mapping.DynamicColumnInfo.DeclaringType">
            <inheritdoc cref="P:System.Reflection.MemberInfo.DeclaringType"/>
        </member>
        <member name="P:LinqToDB.Mapping.DynamicColumnInfo.ReflectedType">
            <inheritdoc cref="P:System.Reflection.MemberInfo.ReflectedType"/>
        </member>
        <member name="P:LinqToDB.Mapping.DynamicColumnInfo.PropertyType">
            <inheritdoc cref="P:System.Reflection.PropertyInfo.PropertyType"/>
        </member>
        <member name="P:LinqToDB.Mapping.DynamicColumnInfo.Attributes">
            <inheritdoc cref="P:System.Reflection.PropertyInfo.Attributes"/>
        </member>
        <member name="P:LinqToDB.Mapping.DynamicColumnInfo.CanRead">
            <inheritdoc cref="P:System.Reflection.PropertyInfo.CanRead"/>
        </member>
        <member name="P:LinqToDB.Mapping.DynamicColumnInfo.CanWrite">
            <inheritdoc cref="P:System.Reflection.PropertyInfo.CanWrite"/>
        </member>
        <member name="M:LinqToDB.Mapping.DynamicColumnInfo.#ctor(System.Type,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LinqToDB.Mapping.DynamicColumnInfo" /> class.
            </summary>
            <param name="declaringType">Type of the declaring.</param>
            <param name="columnType">Type of the column.</param>
            <param name="memberName">Name of the member.</param>
        </member>
        <member name="M:LinqToDB.Mapping.DynamicColumnInfo.Equals(LinqToDB.Mapping.DynamicColumnInfo)">
            <inheritdoc cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:LinqToDB.Mapping.DynamicColumnInfo.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:LinqToDB.Mapping.DynamicColumnInfo.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:LinqToDB.Mapping.DynamicColumnInfo.op_Equality(LinqToDB.Mapping.DynamicColumnInfo,LinqToDB.Mapping.DynamicColumnInfo)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:LinqToDB.Mapping.DynamicColumnInfo.op_Inequality(LinqToDB.Mapping.DynamicColumnInfo,LinqToDB.Mapping.DynamicColumnInfo)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:LinqToDB.Mapping.DynamicColumnInfo.GetCustomAttributes(System.Boolean)">
            <inheritdoc cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)"/>
        </member>
        <member name="M:LinqToDB.Mapping.DynamicColumnInfo.GetCustomAttributes(System.Type,System.Boolean)">
            <inheritdoc cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)"/>
        </member>
        <member name="M:LinqToDB.Mapping.DynamicColumnInfo.IsDefined(System.Type,System.Boolean)">
            <inheritdoc cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)"/>
        </member>
        <member name="M:LinqToDB.Mapping.DynamicColumnInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
            <inheritdoc cref="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)"/>
        </member>
        <member name="M:LinqToDB.Mapping.DynamicColumnInfo.GetAccessors(System.Boolean)">
            <inheritdoc cref="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)"/>
        </member>
        <member name="M:LinqToDB.Mapping.DynamicColumnInfo.GetGetMethod(System.Boolean)">
            <inheritdoc cref="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)"/>
        </member>
        <member name="M:LinqToDB.Mapping.DynamicColumnInfo.GetSetMethod(System.Boolean)">
            <inheritdoc cref="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)"/>
        </member>
        <member name="M:LinqToDB.Mapping.DynamicColumnInfo.GetIndexParameters">
            <inheritdoc cref="M:System.Reflection.PropertyInfo.GetIndexParameters"/>
        </member>
        <member name="M:LinqToDB.Mapping.DynamicColumnInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
            <inheritdoc cref="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)"/>
        </member>
        <member name="T:LinqToDB.Mapping.DynamicColumnsStoreAttribute">
            <summary>
            Marks target member as dynamic columns store.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:LinqToDB.Mapping.DynamicColumnsStoreAttribute.Configuration">
            <summary>
            Gets or sets mapping schema configuration name, for which this attribute should be taken into account.
            <see cref="T:LinqToDB.ProviderName"/> for standard names.
            Attributes with <c>null</c> or empty string <see cref="P:LinqToDB.Mapping.DynamicColumnsStoreAttribute.Configuration"/> value applied to all configurations (if no attribute found for current configuration).
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.EntityDescriptor">
            <summary>
            Stores mapping entity descriptor.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.EntityDescriptor.#ctor(LinqToDB.Mapping.MappingSchema,System.Type)">
            <summary>
            Creates descriptor instance.
            </summary>
            <param name="mappingSchema">Mapping schema, associated with descriptor.</param>
            <param name="type">Mapping class type.</param>
        </member>
        <member name="P:LinqToDB.Mapping.EntityDescriptor.TypeAccessor">
            <summary>
            Gets or sets mapping type accessor.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.EntityDescriptor.Name">
            <summary>
            Gets name of table or view in database.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.EntityDescriptor.TableOptions">
            <summary>
            Gets or sets table options. See <see cref="P:LinqToDB.Mapping.EntityDescriptor.TableOptions"/> enum for support information per provider.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.EntityDescriptor.IsColumnAttributeRequired">
            <summary>
            Gets or sets column mapping rules for current mapping class or interface.
            If <c>true</c>, properties and fields should be marked with one of those attributes to be used for mapping:
            - <see cref="T:LinqToDB.Mapping.ColumnAttribute"/>;
            - <see cref="T:LinqToDB.Mapping.PrimaryKeyAttribute"/>;
            - <see cref="T:LinqToDB.Mapping.IdentityAttribute"/>;
            - <see cref="T:LinqToDB.Mapping.ColumnAliasAttribute"/>.
            Otherwise all supported members of scalar type will be used:
            - public instance fields and properties;
            - explicit interface implementation properties.
            Also see <seealso cref="F:LinqToDB.Common.Configuration.IsStructIsScalarType"/> and <seealso cref="T:LinqToDB.Mapping.ScalarTypeAttribute"/>.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.EntityDescriptor.SkipModificationFlags">
            <summary>
            Gets flags for which operation values are skipped.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.EntityDescriptor.Columns">
            <summary>
            Gets list of column descriptors for current entity.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.EntityDescriptor.Associations">
            <summary>
            Gets list of association descriptors for current entity.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.EntityDescriptor.Aliases">
            <summary>
            Gets mapping dictionary to map column aliases to target columns or aliases.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.EntityDescriptor.CalculatedMembers">
            <summary>
            Gets list of calculated column members (properties with <see cref="P:LinqToDB.ExpressionMethodAttribute.IsColumn"/> set to <c>true</c>).
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.EntityDescriptor.HasCalculatedMembers">
            <summary>
            Returns <c>true</c>, if entity has calculated columns.
            Also see <seealso cref="P:LinqToDB.Mapping.EntityDescriptor.CalculatedMembers"/>.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.EntityDescriptor.InheritanceMapping">
            <summary>
            Gets list of inheritance mapping descriptors for current entity.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.EntityDescriptor.ObjectType">
            <summary>
            Gets mapping class type.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.EntityDescriptor.HasComplexColumns">
            <summary>
            Returns <c>true</c>, if entity has complex columns (with <see cref="P:LinqToDB.Reflection.MemberAccessor.IsComplex"/> flag set).
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.EntityDescriptor.Item(System.String)">
            <summary>
            Gets column descriptor by member name.
            </summary>
            <param name="memberName">Member name.</param>
            <returns>Returns column descriptor or <c>null</c>, if descriptor not found.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityDescriptor.FindColumnDescriptor(System.Reflection.MemberInfo)">
            <summary>
            Returns column descriptor based on its MemberInfo
            </summary>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="P:LinqToDB.Mapping.EntityDescriptor.DynamicColumnsStore">
            <summary>
            Gets the dynamic columns store descriptor.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.EntityDescriptor.DynamicColumnGetter">
            <summary>
            Gets or sets optional dynamic column value getter expression with following signature:
            <code>
            object Getter(TEntity entity, string propertyName, object defaultValue);
            </code>
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.EntityDescriptor.DynamicColumnSetter">
            <summary>
            Gets or sets optional dynamic column value setter expression with following signature:
            <code>
            void Setter(TEntity entity, string propertyName, object value);
            </code>
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.EntityMappingBuilder`1">
            <summary>
            Fluent mapping entity builder.
            </summary>
            <typeparam name="TEntity">Entity mapping type.</typeparam>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.#ctor(LinqToDB.Mapping.FluentMappingBuilder,System.String)">
            <summary>
            Creates entity mapping builder.
            </summary>
            <param name="builder">Fluent mapping builder.</param>
            <param name="configuration">Optional mapping schema configuration name, for which this entity builder should be taken into account.
            <see cref="T:LinqToDB.ProviderName"/> for standard configuration names.</param>
        </member>
        <member name="P:LinqToDB.Mapping.EntityMappingBuilder`1.Configuration">
            <summary>
            Gets mapping schema configuration name, for which this entity builder should be taken into account.
            <see cref="T:LinqToDB.ProviderName"/> for standard configuration names.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.GetAttributes``1">
            <summary>
            Returns attributes of specified type, applied to current entity type.
            </summary>
            <typeparam name="TA">Attribute type.</typeparam>
            <returns>Returns list of attributes, applied to current entity type.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.GetAttributes``1(System.Type)">
            <summary>
            Returns attributes of specified type, applied to specified entity type.
            </summary>
            <typeparam name="TA">Attribute type.</typeparam>
            <param name="type">Entity type.</param>
            <returns>Returns list of attributes, applied to specified entity type.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.GetAttributes``1(System.Reflection.MemberInfo)">
            <summary>
            Returns attributes of specified type, applied to specified entity member.
            Member could be inherited from parent classes.
            </summary>
            <typeparam name="TA">Attribute type.</typeparam>
            <param name="memberInfo">Member info object.</param>
            <returns>Returns list of attributes, applied to specified entity member.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.GetAttributes``1(System.Func{``0,System.String})">
            <summary>
            Returns attributes of specified type, applied to current entity type and active for current configuration.
            </summary>
            <typeparam name="TA">Attribute type.</typeparam>
            <param name="configGetter">Function to extract configuration name from attribute instance.</param>
            <returns>Returns list of attributes.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.GetAttributes``1(System.Type,System.Func{``0,System.String})">
            <summary>
            Returns attributes of specified type, applied to specified entity type and active for current configuration.
            </summary>
            <typeparam name="TA">Attribute type.</typeparam>
            <param name="type">Entity type.</param>
            <param name="configGetter">Function to extract configuration name from attribute instance.</param>
            <returns>Returns list of attributes.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.GetAttributes``1(System.Reflection.MemberInfo,System.Func{``0,System.String})">
            <summary>
            Returns attributes of specified type, applied to specified entity member and active for current configuration.
            </summary>
            <typeparam name="TA">Attribute type.</typeparam>
            <param name="memberInfo">Member info object.</param>
            <param name="configGetter">Function to extract configuration name from attribute instance.</param>
            <returns>Returns list of attributes.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.HasAttribute(LinqToDB.Mapping.MappingAttribute)">
            <summary>
            Adds mapping attribute to current entity.
            </summary>
            <param name="attribute">Mapping attribute to add.</param>
            <returns>Returns current fluent entity mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.HasAttribute(System.Reflection.MemberInfo,LinqToDB.Mapping.MappingAttribute)">
            <summary>
            Adds mapping attribute to specified member.
            </summary>
            <param name="memberInfo">Target member.</param>
            <param name="attribute">Mapping attribute to add to specified member.</param>
            <returns>Returns current fluent entity mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.HasAttribute(System.Linq.Expressions.LambdaExpression,LinqToDB.Mapping.MappingAttribute)">
            <summary>
            Adds mapping attribute to a member, specified using lambda expression.
            </summary>
            <param name="func">Target member, specified using lambda expression.</param>
            <param name="attribute">Mapping attribute to add to specified member.</param>
            <returns>Returns current fluent entity mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.HasAttribute(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},LinqToDB.Mapping.MappingAttribute)">
            <summary>
            Adds mapping attribute to a member, specified using lambda expression.
            </summary>
            <param name="func">Target member, specified using lambda expression.</param>
            <param name="attribute">Mapping attribute to add to specified member.</param>
            <returns>Returns current fluent entity mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.Entity``1(System.String)">
            <summary>
            Creates entity builder for specified mapping type.
            </summary>
            <typeparam name="TE">Mapping type.</typeparam>
            <param name="configuration">Optional mapping schema configuration name, for which this entity builder should be taken into account.
            <see cref="T:LinqToDB.ProviderName"/> for standard configuration names.</param>
            <returns>Returns new fluent entity mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Adds column mapping to current entity.
            </summary>
            <param name="func">Column mapping property or field getter expression.</param>
            <returns>Returns fluent property mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.Member``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Adds member mapping to current entity.
            </summary>
            <param name="func">Column mapping property or field getter expression.</param>
            <returns>Returns fluent property mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.Association``3(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Boolean)">
            <summary>
            Adds association mapping to current entity.
            </summary>
            <typeparam name="TProperty">Association member type.</typeparam>
            <typeparam name="TThisKey">This association side key type.</typeparam>
            <typeparam name="TOtherKey">Other association side key type.</typeparam>
            <param name="prop">Association member getter expression.</param>
            <param name="thisKey">This association key getter expression.</param>
            <param name="otherKey">Other association key getter expression.</param>
            <param name="canBeNull">Defines type of join. True - left join, False - inner join.</param>
            <returns>Returns fluent property mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.Association``3(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Boolean)">
            <summary>
            Adds association mapping to current entity.
            </summary>
            <typeparam name="TPropElement">Association member type.</typeparam>
            <typeparam name="TThisKey">This association side key type.</typeparam>
            <typeparam name="TOtherKey">Other association side key type.</typeparam>
            <param name="prop">Association member getter expression.</param>
            <param name="thisKey">This association key getter expression.</param>
            <param name="otherKey">Other association key getter expression.</param>
            <param name="canBeNull">Defines type of join. True - left join, False - inner join.</param>
            <returns>Returns fluent property mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.Association``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},System.Boolean)">
            <summary>
            Adds one-to-many association mapping to current entity.
            </summary>
            <typeparam name="TOther">Other association side type</typeparam>
            <param name="prop">Association member getter expression.</param>
            <param name="predicate">Predicate expression.</param>
            <param name="canBeNull">Defines type of join. True - left join, False - inner join.</param>
            <returns>Returns fluent property mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.Association``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},System.Boolean)">
            <summary>
            Adds one-to-one association mapping to current entity.
            </summary>
            <typeparam name="TOther">Other association side type</typeparam>
            <param name="prop">Association member getter expression.</param>
            <param name="predicate">Predicate expression</param>
            <param name="canBeNull">Defines type of join. True - left join, False - inner join.</param>
            <returns>Returns fluent property mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.Association``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Linq.Expressions.Expression{System.Func{`0,LinqToDB.IDataContext,System.Linq.IQueryable{``0}}},System.Boolean)">
            <summary>
            Adds one-to-many association mapping to current entity.
            </summary>
            <typeparam name="TOther">Other association side type</typeparam>
            <param name="prop">Association member getter expression.</param>
            <param name="queryExpression">Query expression.</param>
            <param name="canBeNull">Defines type of join. True - left join, False - inner join.</param>
            <returns>Returns fluent property mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.Association``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,LinqToDB.IDataContext,System.Linq.IQueryable{``0}}},System.Boolean)">
            <summary>
            Adds one-to-one association mapping to current entity.
            </summary>
            <typeparam name="TOther">Other association side type</typeparam>
            <param name="prop">Association member getter expression.</param>
            <param name="queryExpression">Query expression.</param>
            <param name="canBeNull">Defines type of join. True - left join, False - inner join.</param>
            <returns>Returns fluent property mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.HasPrimaryKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32)">
            <summary>
            Adds primary key mapping to current entity.
            </summary>
            <param name="func">Primary key getter expression.</param>
            <param name="order">Primary key field order.
            When multiple fields specified by getter expression, fields will be ordered from first menthioned
            field to last one starting from provided order with step <c>1</c>.</param>
            <returns>Returns current fluent entity mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.HasIdentity``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Adds identity column mappping to current entity.
            </summary>
            <param name="func">Identity field getter expression.</param>
            <returns>Returns current fluent entity mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.HasColumn(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32)">
            <summary>
            Adds column mapping to current entity.
            </summary>
            <param name="func">Column member getter expression.</param>
            <param name="order">Unused.</param>
            <returns>Returns current fluent entity mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.Ignore(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32)">
            <summary>
            Instruct LINQ to DB to not incude specified member into mapping.
            </summary>
            <param name="func">Member getter expression.</param>
            <param name="order">Unused.</param>
            <returns>Returns current fluent entity mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.HasSkipValuesOnInsert(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object[])">
            <summary>
            Adds option for skipping values for column on current entity during insert.
            </summary>
            <param name="func">Column member getter expression.</param>
            <param name="values">Values that should be skipped during insert.</param>
            <returns>Returns current fluent entity mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.HasSkipValuesOnUpdate(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object[])">
            <summary>
            Adds option for skipping values for column on current entity during update.
            </summary>
            <param name="func">Column member getter expression.</param>
            <param name="values">Values that should be skipped during update.</param>
            <returns>Returns current fluent entity mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.HasTableName(System.String)">
            <summary>
            Sets database table name for current entity.
            </summary>
            <param name="tableName">Table name.</param>
            <returns>Returns current fluent entity mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.IsColumnRequired">
            <summary>
            Sets if it is required to use <see cref="M:LinqToDB.Mapping.PropertyMappingBuilder`2.IsColumn"/> to treat property or field as column
            </summary>
            <returns>Returns current fluent entity mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.IsColumnNotRequired">
            <summary>
            Sets if it is not required to use <see cref="M:LinqToDB.Mapping.PropertyMappingBuilder`2.IsColumn"/> - all public fields and properties are treated as columns
            This is the default behaviour
            </summary>
            <returns>Returns current fluent entity mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.HasSchemaName(System.String)">
            <summary>
            Sets database schema/owner name for current entity, to override default name.
            See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.
            </summary>
            <param name="schemaName">Schema/owner name.</param>
            <returns>Returns current fluent entity mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.HasDatabaseName(System.String)">
            <summary>
            Sets database name, to override default database name.
            See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.
            </summary>
            <param name="databaseName">Database name.</param>
            <returns>Returns current fluent entity mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.HasServerName(System.String)">
            <summary>
            Sets linked server name.
            See <see cref="M:LinqToDB.LinqExtensions.ServerName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.
            </summary>
            <param name="serverName">Linked server name.</param>
            <returns>Returns current fluent entity mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.HasIsTemporary(System.Boolean)">
            <summary>
            Sets linked server name.
            See <see cref="M:LinqToDB.TableExtensions.IsTemporary``1(LinqToDB.ITable{``0},System.Boolean)"/> method for support information per provider.
            </summary>
            <param name="isTemporary">Linked server name.</param>
            <returns>Returns current fluent entity mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.HasTableOptions(LinqToDB.TableOptions)">
            <summary>
            Sets Table options.
            See <see cref="M:LinqToDB.TableExtensions.TableOptions``1(LinqToDB.ITable{``0},LinqToDB.TableOptions)"/> method for support information per provider.
            </summary>
            <param name="tableOptions">Table options.</param>
            <returns>Returns current fluent entity mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.Inheritance``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,System.Type,System.Boolean)">
            <summary>
            Adds inheritance mapping for specified discriminator value.
            </summary>
            <typeparam name="TS">Discriminator value type.</typeparam>
            <param name="key">Discriminator member getter expression.</param>
            <param name="value">Discriminator value.</param>
            <param name="type">Mapping type, used with specified discriminator value.</param>
            <param name="isDefault">If <c>true</c>, current mapping type used by default.</param>
            <returns>Returns current fluent entity mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.HasQueryFilter(System.Func{System.Linq.IQueryable{`0},LinqToDB.IDataContext,System.Linq.IQueryable{`0}})">
            <summary>
                Specifies a LINQ <see cref="T:System.Linq.IQueryable`1" /> function that will automatically be applied to any queries targeting
                this entity type.
            </summary>
            <param name="filterFunc">The LINQ predicate expression. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.HasQueryFilter``1(System.Func{System.Linq.IQueryable{`0},``0,System.Linq.IQueryable{`0}})">
            <summary>
                Specifies a LINQ <see cref="T:System.Linq.IQueryable`1" /> function that will automatically be applied to any queries targeting
                this entity type.
            </summary>
            <param name="filterFunc"> The LINQ predicate expression. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.HasQueryFilter(System.Linq.Expressions.Expression{System.Func{`0,LinqToDB.IDataContext,System.Boolean}})">
            <summary>
                Specifies a LINQ predicate expression that will automatically be applied to any queries targeting
                this entity type.
            </summary>
            <param name="filter"> The LINQ predicate expression. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.HasQueryFilter``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
                Specifies a LINQ predicate expression that will automatically be applied to any queries targeting
                this entity type.
            </summary>
            <param name="filter"> The LINQ predicate expression. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.DynamicColumnsStore(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Adds dynamic columns store dictionary member mapping to current entity.
            </summary>
            <param name="func">Column mapping property or field getter expression.</param>
            <returns>Returns fluent property mapping builder.</returns>
        </member>
        <member name="T:LinqToDB.Mapping.FluentMappingBuilder">
            <summary>
            Fluent mapping builder.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.FluentMappingBuilder.#ctor(LinqToDB.Mapping.MappingSchema)">
            <summary>
            Creates fluent mapping builder for specified mapping schema.
            </summary>
            <param name="mappingSchema">Mapping schema.</param>
        </member>
        <member name="P:LinqToDB.Mapping.FluentMappingBuilder.MappingSchema">
            <summary>
            Gets builder's mapping schema.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.FluentMappingBuilder.GetAttributes``1(System.Type)">
            <summary>
            Gets attributes of type <typeparamref name="T"/>, applied to specified type.
            </summary>
            <typeparam name="T">Attribute type.</typeparam>
            <param name="type">Type with attributes.</param>
            <returns>Returns attributes of specified type, applied to <paramref name="type"/>.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.FluentMappingBuilder.GetAttributes``1(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Gets attributes of type <typeparamref name="T"/>, applied to specified member. Search for member in specified
            type or it's parents.
            </summary>
            <typeparam name="T">Attribute type.</typeparam>
            <param name="type">Member owner type.</param>
            <param name="memberInfo">Member descriptor.</param>
            <returns>Returns attributes of specified type, applied to <paramref name="memberInfo"/>.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.FluentMappingBuilder.HasAttribute(System.Type,LinqToDB.Mapping.MappingAttribute)">
            <summary>
            Adds mapping attribute to specified type.
            </summary>
            <param name="type">Target type.</param>
            <param name="attribute">Mapping attribute to add to specified type.</param>
            <returns>Returns current fluent mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.FluentMappingBuilder.HasAttribute``1(LinqToDB.Mapping.MappingAttribute)">
            <summary>
            Adds mapping attribute to specified type.
            </summary>
            <typeparam name="T">Target type.</typeparam>
            <param name="attribute">Mapping attribute to add to specified type.</param>
            <returns>Returns current fluent mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.FluentMappingBuilder.HasAttribute(System.Reflection.MemberInfo,LinqToDB.Mapping.MappingAttribute)">
            <summary>
            Adds mapping attribute to specified member.
            </summary>
            <param name="memberInfo">Target member.</param>
            <param name="attribute">Mapping attribute to add to specified member.</param>
            <returns>Returns current fluent mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.FluentMappingBuilder.HasAttribute(System.Linq.Expressions.LambdaExpression,LinqToDB.Mapping.MappingAttribute)">
            <summary>
            Adds mapping attribute to a member, specified using lambda expression.
            </summary>
            <param name="func">Target member, specified using lambda expression.</param>
            <param name="attribute">Mapping attribute to add to specified member.</param>
            <returns>Returns current fluent mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.FluentMappingBuilder.HasAttribute``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},LinqToDB.Mapping.MappingAttribute)">
            <summary>
            Adds mapping attribute to a member, specified using lambda expression.
            </summary>
            <typeparam name="T">Type of labmda expression parameter.</typeparam>
            <param name="func">Target member, specified using lambda expression.</param>
            <param name="attribute">Mapping attribute to add to specified member.</param>
            <returns>Returns current fluent mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.FluentMappingBuilder.Entity``1(System.String)">
            <summary>
            Creates entity builder for specified mapping type.
            </summary>
            <typeparam name="T">Mapping type.</typeparam>
            <param name="configuration">Optional mapping schema configuration name, for which this entity builder should be taken into account.
            <see cref="T:LinqToDB.ProviderName"/> for standard configuration names.</param>
            <returns>Returns entity fluent mapping builder.</returns>
        </member>
        <member name="T:LinqToDB.Mapping.IColumnChangeDescriptor">
            <summary>
            Mapping entity column descriptor change interface.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.IColumnChangeDescriptor.MemberName">
             <summary>
             Gets the name of mapped member.
             When applied to class or interface, should contain name of property of field.
            
             If column is mapped to a property or field of composite object, <see cref="P:LinqToDB.Mapping.IColumnChangeDescriptor.MemberName"/> should contain a path to that
             member using dot as separator.
             <example>
             <code>
             public class Address
             {
                 public string City     { get; set; }
                 public string Street   { get; set; }
                 public int    Building { get; set; }
             }
            
             [Column("city", "Residence.Street")]
             [Column("user_name", "Name")]
             public class User
             {
                 public string Name;
            
                 [Column("street", ".Street")]
                 [Column("building_number", MemberName = ".Building")]
                 public Address Residence { get; set; }
             }
             </code>
             </example>
             </summary>
        </member>
        <member name="P:LinqToDB.Mapping.IColumnChangeDescriptor.ColumnName">
            <summary>
            Gets or sets the name of a column in database.
            If not specified, <see cref="P:LinqToDB.Mapping.IColumnChangeDescriptor.MemberName"/> value will be returned.
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.IdentityAttribute">
            <summary>
            Marks target column as identity column with value, generated on database side during insert operations.
            Identity columns will be ignored for insert and update operations with implicit column list like
            <see cref="M:LinqToDB.DataExtensions.Insert``1(LinqToDB.IDataContext,``0,System.String,System.String,System.String,System.String,LinqToDB.TableOptions)"/> or
            <see cref="M:LinqToDB.DataExtensions.Update``1(LinqToDB.IDataContext,``0,System.String,System.String,System.String,System.String,LinqToDB.TableOptions)"/> methods.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.IdentityAttribute.#ctor">
            <summary>
            Creates attribute instance.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.IdentityAttribute.#ctor(System.String)">
            <summary>
            Creates attribute instance.
            </summary>
            <param name="configuration">Mapping schema configuration name. See <see cref="P:LinqToDB.Mapping.IdentityAttribute.Configuration"/>.</param>
        </member>
        <member name="P:LinqToDB.Mapping.IdentityAttribute.Configuration">
            <summary>
            Gets or sets mapping schema configuration name, for which this attribute should be taken into account.
            <see cref="T:LinqToDB.ProviderName"/> for standard names.
            Attributes with <c>null</c> or empty string <see cref="P:LinqToDB.Mapping.IdentityAttribute.Configuration"/> value applied to all configurations (if no attribute found for current configuration).
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.IEntityChangeDescriptor">
            <summary>
            Mapping entity descriptor change interface.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.IEntityChangeDescriptor.TypeAccessor">
            <summary>
            Gets or sets mapping type accessor.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.IEntityChangeDescriptor.TableName">
            <summary>
            Gets or sets name of table or view in database.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.IEntityChangeDescriptor.SchemaName">
            <summary>
            Gets or sets optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.IEntityChangeDescriptor.DatabaseName">
            <summary>
            Gets or sets optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.IEntityChangeDescriptor.ServerName">
            <summary>
            Gets or sets optional linked server name. See <see cref="M:LinqToDB.LinqExtensions.ServerName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.IEntityChangeDescriptor.TableOptions">
            <summary>
            Gets or sets Table options. See <see cref="P:LinqToDB.Mapping.IEntityChangeDescriptor.TableOptions"/> enum for support information per provider.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.IEntityChangeDescriptor.Columns">
            <summary>
            Gets list of change interfaces for column descriptors for current entity.
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.InheritanceMapping">
            <summary>
            Stores inheritance mapping information for single discriminator value.
            </summary>
        </member>
        <member name="F:LinqToDB.Mapping.InheritanceMapping.Code">
            <summary>
            Inheritance discriminator value.
            </summary>
        </member>
        <member name="F:LinqToDB.Mapping.InheritanceMapping.IsDefault">
            <summary>
            Is it default mapping.
            </summary>
        </member>
        <member name="F:LinqToDB.Mapping.InheritanceMapping.Type">
            <summary>
            Mapping class type for current discriminator value.
            </summary>
        </member>
        <member name="F:LinqToDB.Mapping.InheritanceMapping.Discriminator">
            <summary>
            Discriminator column descriptor.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.InheritanceMapping.DiscriminatorName">
            <summary>
            Gets discriminator field or property name.
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.InheritanceMappingAttribute">
            <summary>
            Defines to which type linq2db should map record based on discriminator value. You can apply this attribute to
            a base class or insterface, implemented by all child classes.
            Don't forget to define discriminator value storage column using <see cref="P:LinqToDB.Mapping.ColumnAttribute.IsDiscriminator"/>.
            </summary>
            <remarks>
            You cannot configure inheritance mapping using this attribute for discriminator types, not supported by .NET
            attributes. See <a href="https://github.com/dotnet/csharplang/blob/master/spec/attributes.md#attribute-parameter-types">document</a>
            for a list of supported types.
            </remarks>
        </member>
        <member name="P:LinqToDB.Mapping.InheritanceMappingAttribute.Configuration">
            <summary>
            Gets or sets mapping schema configuration name, for which this attribute should be taken into account.
            <see cref="T:LinqToDB.ProviderName"/> for standard names.
            Attributes with <c>null</c> or empty string <see cref="P:LinqToDB.Mapping.InheritanceMappingAttribute.Configuration"/> value applied to all configurations (if no attribute found for current configuration).
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.InheritanceMappingAttribute.Code">
            <summary>
            Gets or sets discriminator value.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.InheritanceMappingAttribute.IsDefault">
            <summary>
            Get or sets flag, that tells linq2db that current mapping should be used by default if suitable mapping type not found.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.InheritanceMappingAttribute.Type">
            <summary>
            Gets or sets type, to which record with current discriminator value should be mapped.
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.LockedMappingSchema">
            <summary>
            Locked mapping schema.
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.MappingSchema">
            <summary>
            Mapping schema.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.#ctor">
            <summary>
            Creates mapping schema instance.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.#ctor(LinqToDB.Mapping.MappingSchema[])">
            <summary>
            Creates mapping schema, derived from other mapping schemas.
            </summary>
            <param name="schemas">Base mapping schemas.</param>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.#ctor(System.String)">
            <summary>
            Creates mapping schema for specified configuration name.
            </summary>
            <param name="configuration">Mapping schema configuration name.
            <see cref="T:LinqToDB.ProviderName"/> for standard names.
            </param>
            <remarks>Schema name should be unique for mapping schemas with different mappings.
            Using same name could lead to incorrect mapping used when mapping schemas with same name define different
            mappings for same type.</remarks>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.#ctor(System.String,LinqToDB.Mapping.MappingSchema[])">
            <summary>
            Creates mapping schema with specified configuration name and base mapping schemas.
            </summary>
            <param name="configuration">Mapping schema configuration name.
            <see cref="T:LinqToDB.ProviderName"/> for standard names.</param>
            <param name="schemas">Base mapping schemas.</param>
            <remarks>Schema name should be unique for mapping schemas with different mappings.
            Using same name could lead to incorrect mapping used when mapping schemas with same name define different
            mappings for same type.</remarks>
        </member>
        <member name="P:LinqToDB.Mapping.MappingSchema.ValueToSqlConverter">
            <summary>
            Gets value to SQL (usually literal) converter.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.SetValueToSqlConverter(System.Type,System.Action{System.Text.StringBuilder,LinqToDB.SqlQuery.SqlDataType,System.Object})">
            <summary>
            Sets value to SQL converter action for specific value type.
            </summary>
            <param name="type">Value type.</param>
            <param name="converter">Converter action. Action accepts three parameters:
            - SQL string builder to write generated value SQL to;
            - value SQL type descriptor;
            - value.
            </param>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.GetDefaultValue(System.Type)">
            <summary>
            Returns default value for specified type.
            Default value is a value, used instead of <c>NULL</c> value, read from database.
            </summary>
            <param name="type">Value type.</param>
            <returns>Returns default value for type.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.SetDefaultValue(System.Type,System.Object)">
            <summary>
            Sets default value for specific type.
            Default value is a value, used instead of <c>NULL</c> value, read from database.
            </summary>
            <param name="type">Value type.</param>
            <param name="value">Default value.</param>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.GetCanBeNull(System.Type)">
            <summary>
            Returns <c>true</c>, if value of specified type could contain <c>null</c>.
            </summary>
            <param name="type">Value type.</param>
            <returns>Returns <c>true</c> if specified type supports <c>null</c> values.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.SetCanBeNull(System.Type,System.Boolean)">
            <summary>
            Sets <c>null</c> value support flag for specified type.
            </summary>
            <param name="type">Value type.</param>
            <param name="value">If <c>true</c>, specified type value could contain <c>null</c>.</param>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.InitGenericConvertProvider``1">
            <summary>
            Initialize generic conversions for specific type parameter.
            </summary>
            <typeparam name="T">Generic type parameter, for which converters should be initialized.</typeparam>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.InitGenericConvertProvider(System.Type[])">
            <summary>
            Initialize generic conversions for specific type parameters.
            </summary>
            <param name="types">Generic type parameters.</param>
            <returns>Returns <c>true</c> if new generic type conversions could have added to mapping schema.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.SetGenericConvertProvider(System.Type)">
            <summary>
            Adds generic type conversions provider.
            Type converter must implement <see cref="T:LinqToDB.Expressions.IGenericInfoProvider"/> interface.
            <see cref="T:LinqToDB.Expressions.IGenericInfoProvider"/> for more details and examples.
            </summary>
            <param name="type">Generic type conversions provider.</param>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.ChangeTypeTo``1(System.Object)">
            <summary>
            Converts value to specified type.
            </summary>
            <typeparam name="T">Target type.</typeparam>
            <param name="value">Value to convert.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.ChangeType(System.Object,System.Type)">
            <summary>
            Converts value to specified type.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="conversionType">Target type.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.EnumToValue(System.Enum)">
            <summary>
            Converts enum value to database value.
            </summary>
            <param name="value">Enum value.</param>
            <returns>Database value.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.TryGetConvertExpression(System.Type,System.Type)">
            <summary>
            Returns custom value conversion expression from <paramref name="from"/> type to <paramref name="to"/> type if it
            is defined in mapping schema, or <c>null</c> otherwise.
            </summary>
            <param name="from">Source type.</param>
            <param name="to">Target type.</param>
            <returns>Conversion expression or <c>null</c>, if conversion is not defined.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.GetConvertExpression``2(System.Boolean,System.Boolean)">
            <summary>
            Returns conversion expression from <typeparamref name="TFrom"/> type to <typeparamref name="TTo"/> type.
            </summary>
            <typeparam name="TFrom">Source type.</typeparam>
            <typeparam name="TTo">Target type.</typeparam>
            <param name="checkNull">If <c>true</c>, and source type could contain <c>null</c>, conversion expression will check converted value for <c>null</c> and replace it with default value.
            <see cref="M:LinqToDB.Mapping.MappingSchema.SetDefaultValue(System.Type,System.Object)"/> for more details.
            </param>
            <param name="createDefault">Create new conversion expression, if conversion is not defined.</param>
            <returns>Conversion expression or <c>null</c>, if there is no such conversion and <paramref name="createDefault"/> is <c>false</c>.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.GetConvertExpression(System.Type,System.Type,System.Boolean,System.Boolean)">
            <summary>
            Returns conversion expression from <paramref name="from"/> type to <paramref name="to"/> type.
            </summary>
            <param name="from">Source type.</param>
            <param name="to">Target type.</param>
            <param name="checkNull">If <c>true</c>, and source type could contain <c>null</c>, conversion expression will check converted value for <c>null</c> and replace it with default value.
            <see cref="M:LinqToDB.Mapping.MappingSchema.SetDefaultValue(System.Type,System.Object)"/> for more details.
            </param>
            <param name="createDefault">Create new conversion expression, if conversion is not defined.</param>
            <returns>Conversion expression or <c>null</c>, if there is no such conversion and <paramref name="createDefault"/> is <c>false</c>.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.GetConvertExpression(LinqToDB.Common.DbDataType,LinqToDB.Common.DbDataType,System.Boolean,System.Boolean)">
            <summary>
            Returns conversion expression from <paramref name="from"/> type to <paramref name="to"/> type.
            </summary>
            <param name="from">Source type.</param>
            <param name="to">Target type.</param>
            <param name="checkNull">If <c>true</c>, and source type could contain <c>null</c>, conversion expression will check converted value for <c>null</c> and replace it with default value.
            <see cref="M:LinqToDB.Mapping.MappingSchema.SetDefaultValue(System.Type,System.Object)"/> for more details.
            </param>
            <param name="createDefault">Create new conversion expression, if conversion is not defined.</param>
            <returns>Conversion expression or <c>null</c>, if there is no such conversion and <paramref name="createDefault"/> is <c>false</c>.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.GetConverter``2">
            <summary>
            Returns conversion delegate for conversion from <typeparamref name="TFrom"/> type to <typeparamref name="TTo"/> type.
            </summary>
            <typeparam name="TFrom">Source type.</typeparam>
            <typeparam name="TTo">Target type.</typeparam>
            <returns>Conversion delegate or <c>null</c> if conversion is not defined.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.SetConvertExpression(System.Type,System.Type,System.Linq.Expressions.LambdaExpression,System.Boolean)">
            <summary>
            Specify conversion expression for conversion from <paramref name="fromType"/> type to <paramref name="toType"/> type.
            </summary>
            <param name="fromType">Source type.</param>
            <param name="toType">Target type.</param>
            <param name="expr">Conversion expression.</param>
            <param name="addNullCheck">If <c>true</c>, conversion expression will be wrapped with default value substitution logic for <c>null</c> values.
            Wrapper will be added only if source type can have <c>null</c> values and conversion expression doesn't use
            default value provider.
            See <see cref="T:LinqToDB.Common.DefaultValue`1"/> and <see cref="T:LinqToDB.Common.DefaultValue"/> types for more details.
            </param>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.SetConvertExpression(LinqToDB.Common.DbDataType,LinqToDB.Common.DbDataType,System.Linq.Expressions.LambdaExpression,System.Boolean)">
            <summary>
            Specify conversion expression for conversion from <paramref name="fromType"/> type to <paramref name="toType"/> type.
            </summary>
            <param name="fromType">Source type.</param>
            <param name="toType">Target type.</param>
            <param name="expr">Conversion expression.</param>
            <param name="addNullCheck">If <c>true</c>, conversion expression will be wrapped with default value substitution logic for <c>null</c> values.
            Wrapper will be added only if source type can have <c>null</c> values and conversion expression doesn't use
            default value provider.
            See <see cref="T:LinqToDB.Common.DefaultValue`1"/> and <see cref="T:LinqToDB.Common.DefaultValue"/> types for more details.
            </param>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.SetConvertExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean)">
            <summary>
            Specify conversion expression for conversion from <typeparamref name="TFrom"/> type to <typeparamref name="TTo"/> type.
            </summary>
            <typeparam name="TFrom">Source type.</typeparam>
            <typeparam name="TTo">Target type.</typeparam>
            <param name="expr">Conversion expression.</param>
            <param name="addNullCheck">If <c>true</c>, conversion expression will be wrapped with default value substitution logic for <c>null</c> values.
            Wrapper will be added only if source type can have <c>null</c> values and conversion expression doesn't use
            default value provider.
            See <see cref="T:LinqToDB.Common.DefaultValue`1"/> and <see cref="T:LinqToDB.Common.DefaultValue"/> types for more details.
            </param>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.SetConvertExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Specify conversion expression for conversion from <typeparamref name="TFrom"/> type to <typeparamref name="TTo"/> type.
            </summary>
            <typeparam name="TFrom">Source type.</typeparam>
            <typeparam name="TTo">Target type.</typeparam>
            <param name="checkNullExpr"><c>null</c> values conversion expression.</param>
            <param name="expr">Conversion expression.</param>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.SetConverter``2(System.Func{``0,``1})">
            <summary>
            Specify conversion delegate for conversion from <typeparamref name="TFrom"/> type to <typeparamref name="TTo"/> type.
            </summary>
            <typeparam name="TFrom">Source type.</typeparam>
            <typeparam name="TTo">Target type.</typeparam>
            <param name="func">Conversion delegate.</param>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.SetConverter``2(System.Func{``0,``1},LinqToDB.Common.DbDataType,LinqToDB.Common.DbDataType)">
            <summary>
            Specify conversion delegate for conversion from <typeparamref name="TFrom"/> type to <typeparamref name="TTo"/> type.
            </summary>
            <typeparam name="TFrom">Source type.</typeparam>
            <typeparam name="TTo">Target type.</typeparam>
            <param name="func">Conversion delegate.</param>
            <param name="from">Source type detalization</param>
            <param name="to">Target type detalization</param>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.SetCultureInfo(System.Globalization.CultureInfo)">
            <summary>
            Set conversion expressions for conversion from and to <c>string</c> for basic types
            (<c>byte</c>, <c>sbyte</c>, <c>short</c>, <c>ushort</c>, <c>int</c>, <c>uint</c>, <c>long</c>, <c>ulong</c>
            , <c>float</c>, <c>double</c>, <c>decimal</c>, <c>DateTime</c>, <c>DateTimeOffset</c>)
            using provided culture format providers.
            </summary>
            <param name="info">Culture with format providers for conversions.</param>
        </member>
        <member name="P:LinqToDB.Mapping.MappingSchema.MetadataReader">
            <summary>
            Gets or sets metadata attributes provider for current schema.
            Metadata providers, shipped with LINQ to DB:
            - <see cref="T:LinqToDB.Metadata.MetadataReader"/> - aggregation metadata provider over collection of other providers;
            - <see cref="T:LinqToDB.Metadata.AttributeReader"/> - .NET attributes provider;
            - <see cref="T:LinqToDB.Metadata.FluentMetadataReader"/> - fluent mappings metadata provider;
            - <see cref="T:LinqToDB.Metadata.SystemDataSqlServerAttributeReader"/> - metadata provider that converts Microsoft.SqlServer.Server attributes to LINQ to DB mapping attributes;
            - <see cref="T:LinqToDB.Metadata.XmlAttributeReader"/> - XML-based mappings metadata provider.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.AddMetadataReader(LinqToDB.Metadata.IMetadataReader)">
            <summary>
            Adds additional metadata attributes provider to current schema.
            </summary>
            <param name="reader">Metadata attributes provider.</param>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.GetAttributes``1(System.Type,System.Boolean)">
            <summary>
            Gets attributes of specified type, associated with specified type.
            </summary>
            <typeparam name="T">Attribute type.</typeparam>
            <param name="type">Attributes owner type.</param>
            <param name="inherit">If <c>true</c> - include inherited attributes.</param>
            <returns>Attributes of specified type.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.GetAttributes``1(System.Type,System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets attributes of specified type, associated with specified type member.
            </summary>
            <typeparam name="T">Attribute type.</typeparam>
            <param name="type">Member's owner type.</param>
            <param name="memberInfo">Attributes owner member.</param>
            <param name="inherit">If <c>true</c> - include inherited attributes.</param>
            <returns>Attributes of specified type.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.GetAttribute``1(System.Type,System.Boolean)">
            <summary>
            Gets attribute of specified type, associated with specified type.
            </summary>
            <typeparam name="T">Attribute type.</typeparam>
            <param name="type">Attribute owner type.</param>
            <param name="inherit">If <c>true</c> - include inherited attribute.</param>
            <returns>First found attribute of specified type or <c>null</c>, if no attributes found.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.GetAttribute``1(System.Type,System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets attribute of specified type, associated with specified type member.
            </summary>
            <typeparam name="T">Attribute type.</typeparam>
            <param name="type">Member's owner type.</param>
            <param name="memberInfo">Attribute owner member.</param>
            <param name="inherit">If <c>true</c> - include inherited attribute.</param>
            <returns>First found attribute of specified type or <c>null</c>, if no attributes found.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.GetAttributes``1(System.Type,System.Func{``0,System.String},System.Boolean,System.Boolean)">
            <summary>
            Gets attributes of specified type, associated with specified type.
            Attributes filtered by schema's configuration names (see  <see cref="P:LinqToDB.Mapping.MappingSchema.ConfigurationList"/>).
            </summary>
            <typeparam name="T">Attribute type.</typeparam>
            <param name="type">Attributes owner type.</param>
            <param name="configGetter">Attribute configuration name provider.</param>
            <param name="inherit">If <c>true</c> - include inherited attributes.</param>
            <param name="exactForConfiguration">If <c>true</c> - only associated to configuration attributes will be returned.</param>
            <returns>Attributes of specified type.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.GetAttributes``1(System.Type,System.Reflection.MemberInfo,System.Func{``0,System.String},System.Boolean,System.Boolean)">
            <summary>
            Gets attributes of specified type, associated with specified type member.
            Attributes filtered by schema's configuration names (see  <see cref="P:LinqToDB.Mapping.MappingSchema.ConfigurationList"/>).
            </summary>
            <typeparam name="T">Attribute type.</typeparam>
            <param name="type">Member's owner type.</param>
            <param name="memberInfo">Attributes owner member.</param>
            <param name="configGetter">Attribute configuration name provider.</param>
            <param name="inherit">If <c>true</c> - include inherited attributes.</param>
            <param name="exactForConfiguration">If <c>true</c> - only associated to configuration attributes will be returned.</param>
            <returns>Attributes of specified type.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.GetAttribute``1(System.Type,System.Func{``0,System.String},System.Boolean)">
            <summary>
            Gets attribute of specified type, associated with specified type.
            Attributes filtered by schema's configuration names (see  <see cref="P:LinqToDB.Mapping.MappingSchema.ConfigurationList"/>).
            </summary>
            <typeparam name="T">Attribute type.</typeparam>
            <param name="type">Attribute owner type.</param>
            <param name="configGetter">Attribute configuration name provider.</param>
            <param name="inherit">If <c>true</c> - include inherited attribute.</param>
            <returns>First found attribute of specified type or <c>null</c>, if no attributes found.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.GetAttribute``1(System.Type,System.Reflection.MemberInfo,System.Func{``0,System.String},System.Boolean)">
            <summary>
            Gets attribute of specified type, associated with specified type member.
            Attributes filtered by schema's configuration names (see  <see cref="P:LinqToDB.Mapping.MappingSchema.ConfigurationList"/>).
            </summary>
            <typeparam name="T">Attribute type.</typeparam>
            <param name="type">Member's owner type.</param>
            <param name="memberInfo">Attribute owner member.</param>
            <param name="configGetter">Attribute configuration name provider.</param>
            <param name="inherit">If <c>true</c> - include inherited attribute.</param>
            <returns>First found attribute of specified type or <c>null</c>, if no attributes found.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.GetDynamicColumns(System.Type)">
            <summary>
            Gets the dynamic columns defined on given type.
            </summary>
            <param name="type">The type.</param>
            <returns>All dynamic columns defined on given type.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.GetFluentMappingBuilder">
            <summary>
            Gets fluent mapping builder for current schema.
            </summary>
            <returns>Fluent mapping builder.</returns>
        </member>
        <member name="P:LinqToDB.Mapping.MappingSchema.ConfigurationID">
            <summary>
            Unique schema configuration identifier. For internal use only.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.MappingSchema.ConfigurationList">
            <summary>
            Gets configurations, associated with current mapping schema.
            </summary>
        </member>
        <member name="F:LinqToDB.Mapping.MappingSchema.Default">
            <summary>
            Default mapping schema, used by LINQ to DB, when more specific mapping schema not provided.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.IsScalarType(System.Type)">
            <summary>
            Returns <c>true</c>, if provided type mapped to scalar database type in current schema.
            </summary>
            <param name="type">Type to check.</param>
            <returns><c>true</c>, if type mapped to scalar database type.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.SetScalarType(System.Type,System.Boolean)">
            <summary>
            Configure how provided type should be handled during mapping to database - as scalar value or composite type.
            </summary>
            <param name="type">Type to configure.</param>
            <param name="isScalarType"><c>true</c>, if provided type should be mapped to scalar database value.</param>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.AddScalarType(System.Type,System.Object,LinqToDB.DataType)">
            <summary>
            Configure provided type mapping to scalar database type.
            </summary>
            <param name="type">Type to configure.</param>
            <param name="defaultValue">Default value. See <see cref="M:LinqToDB.Mapping.MappingSchema.SetDefaultValue(System.Type,System.Object)"/> for more details.</param>
            <param name="dataType">Optional scalar data type.</param>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.AddScalarType(System.Type,System.Object,System.Boolean,LinqToDB.DataType)">
            <summary>
            Configure provided type mapping to scalar database type.
            </summary>
            <param name="type">Type to configure.</param>
            <param name="defaultValue">Default value. See <see cref="M:LinqToDB.Mapping.MappingSchema.SetDefaultValue(System.Type,System.Object)"/> for more details.</param>
            <param name="canBeNull">Set <c>null</c> value support flag. See <see cref="M:LinqToDB.Mapping.MappingSchema.SetCanBeNull(System.Type,System.Boolean)"/> for more details.</param>
            <param name="dataType">Optional scalar data type.</param>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.AddScalarType(System.Type,LinqToDB.DataType,System.Boolean)">
            <summary>
            Configure provided type mapping to scalar database type.
            </summary>
            <param name="type">Type to configure.</param>
            <param name="dataType">Optional scalar data type.</param>
            <param name="withNullable">Also register <see cref="T:System.Nullable`1"/> type.</param>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.AddScalarType(System.Type,LinqToDB.SqlQuery.SqlDataType,System.Boolean)">
            <summary>
            Configure provided type mapping to scalar database type.
            </summary>
            <param name="type">Type to configure.</param>
            <param name="dataType">Database data type.</param>
            <param name="withNullable">Also register <see cref="T:System.Nullable`1"/> type.</param>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.GetDataType(System.Type)">
            <summary>
            Returns database type mapping information for specified type.
            </summary>
            <param name="type">Mapped type.</param>
            <returns>Database type information.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.SetDataType(System.Type,LinqToDB.DataType)">
            <summary>
            Associate specified type with LINQ to DB data type.
            </summary>
            <param name="type">Mapped type.</param>
            <param name="dataType">LINQ to DB data type.</param>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.SetDataType(System.Type,LinqToDB.SqlQuery.SqlDataType)">
            <summary>
            Associate specified type with database data type.
            </summary>
            <param name="type">Mapped type.</param>
            <param name="dataType">Database data type.</param>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.GetUnderlyingDataType(System.Type,System.Boolean@)">
            <summary>
            Returns scalar database type mapping information for provided type.
            </summary>
            <param name="type">Mapped type.</param>
            <param name="canBeNull">Returns <c>true</c>, if <paramref name="type"/> type is enum with mapping to <c>null</c> value.
            Initial parameter value, passed to this method is not used.</param>
            <returns>Scalar database type information.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.GetMapValues(System.Type)">
            <summary>
            Returns enum type mapping information or <c>null</c> for non-enum types.
            </summary>
            <param name="type">Mapped type.</param>
            <returns>Mapping values for enum type and <c>null</c> for non-enum types.</returns>
        </member>
        <member name="P:LinqToDB.Mapping.MappingSchema.ColumnNameComparer">
            <summary>
            Gets or sets column name comparison rules for comparison of column names in mapping with column name,
             returned by provider's data reader.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.MappingSchema.EntityDescriptorCreatedCallback">
            <summary>
            Gets or sets action, called when the EntityDescriptor is created.
            Could be used to adjust created descriptor before use.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.GetEntityDescriptor(System.Type)">
            <summary>
            Returns mapped entity descriptor.
            </summary>
            <param name="type">Mapped type.</param>
            <returns>Mapping descriptor.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.GetDefinedTypes">
            <summary>
            Enumerates types registered by FluentMetadataBuilder.
            </summary>
            <returns>
            Returns array with all types, mapped by fluent mappings.
            </returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.ClearCache">
            <summary>
            Clears EntityDescriptor cache.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.GetDefaultFromEnumType(System.Type)">
            <summary>
            Returns type, to which provided enumeration type is mapped or <c>null</c>, if type is not configured.
            See <see cref="M:LinqToDB.Mapping.MappingSchema.SetDefaultFromEnumType(System.Type,System.Type)"/>.
            </summary>
            <param name="enumType">Enumeration type.</param>
            <returns>Mapped type or <c>null</c>.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.SetDefaultFromEnumType(System.Type,System.Type)">
            <summary>
            Sets type, to which provided enumeration type should be mapped.
            </summary>
            <param name="enumType">Enumeration type.</param>
            <param name="defaultFromType">Mapped type.</param>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchemaInfo.GetRegisteredTypes">
            <summary>
            Enumerates types, registered by FluentMetadataBuilder.
            </summary>
            <returns>
            Returns array with all types, mapped by fluent mappings.
            </returns>
        </member>
        <member name="P:LinqToDB.Mapping.MappingSchemaInfo.ConfigurationID">
            <summary>
            Unique schema configuration identifier. For internal use only.
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.MapValue">
            <summary>
            Stores enum mapping information for single enum value.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.MapValue.#ctor(System.Object,LinqToDB.Mapping.MapValueAttribute[])">
            <summary>
            Creates instance of class.
            </summary>
            <param name="origValue">Mapped enum value.</param>
            <param name="mapValues">Enum value mappings.</param>
        </member>
        <member name="P:LinqToDB.Mapping.MapValue.OrigValue">
            <summary>
            Gets enum value.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.MapValue.MapValues">
            <summary>
            Gets enum value mappings.
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.MapValueAttribute">
            <summary>
            <para>
            Defines bidirectional mapping between enum field value, used on client and database value, stored in database and
            used in queries.
            Enumeration field could have multiple <see cref="T:LinqToDB.Mapping.MapValueAttribute"/> attributes.
            </para>
            <para>
            Mapping from database value to enumeration performed when you load data from database. Linq2db will search for
            enumeration field with <see cref="T:LinqToDB.Mapping.MapValueAttribute"/> with required value. If attribute with such value is not
            found, you will receive <see cref="T:LinqToDB.LinqToDBException"/> error. If you cannot specify all possible values using
            <see cref="T:LinqToDB.Mapping.MapValueAttribute"/>, you can specify custom mapping using methods like
            <see cref="M:LinqToDB.Mapping.MappingSchema.SetConvertExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean)"/>.
            </para>
            <para>
            Mapping from enumeration value performed when you save it to database or use in query. If your enum field has
            multiple <see cref="T:LinqToDB.Mapping.MapValueAttribute"/> attributes, you should mark one of them as default using <see cref="P:LinqToDB.Mapping.MapValueAttribute.IsDefault"/> property.
            </para>
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.MapValueAttribute.#ctor">
            <summary>
            Adds <see cref="T:LinqToDB.Mapping.MapValueAttribute"/> mapping to enum field. If you don't specify <see cref="P:LinqToDB.Mapping.MapValueAttribute.Value"/> property,
            <c>null</c> value will be used.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.MapValueAttribute.#ctor(System.Object)">
            <summary>
            Adds <see cref="T:LinqToDB.Mapping.MapValueAttribute"/> to enum field.
            </summary>
            <param name="value">Database value, mapped to current enumeration field.</param>
        </member>
        <member name="M:LinqToDB.Mapping.MapValueAttribute.#ctor(System.String,System.Object)">
            <summary>
            Adds <see cref="T:LinqToDB.Mapping.MapValueAttribute"/> to enum field.
            </summary>
            <param name="configuration">Name of configuration, for which this attribute instance will be used.</param>
            <param name="value">Database value, mapped to current enumeration field.</param>
        </member>
        <member name="M:LinqToDB.Mapping.MapValueAttribute.#ctor(System.Object,System.Boolean)">
            <summary>
            Adds <see cref="T:LinqToDB.Mapping.MapValueAttribute"/> to enum field.
            </summary>
            <param name="value">Database value, mapped to current enumeration field.</param>
            <param name="isDefault">If <c>true</c>, database value from this attribute will be used for mapping
            to database value.</param>
        </member>
        <member name="M:LinqToDB.Mapping.MapValueAttribute.#ctor(System.String,System.Object,System.Boolean)">
            <summary>
            Adds <see cref="T:LinqToDB.Mapping.MapValueAttribute"/> to enum field.
            </summary>
            <param name="configuration">Name of configuration, for which this attribute instance will be used.</param>
            <param name="value">Database value, mapped to current enumeration field.</param>
            <param name="isDefault">If <c>true</c>, database value from this attribute will be used for mapping
            to database value.</param>
        </member>
        <member name="P:LinqToDB.Mapping.MapValueAttribute.Configuration">
            <summary>
            Mapping schema configuration name, for which this attribute should be taken into account.
            <see cref="T:LinqToDB.ProviderName"/> for standard names.
            Attributes with <c>null</c> or empty string <see cref="P:LinqToDB.Mapping.MapValueAttribute.Configuration"/> value applied to all configurations (if no attribute found for current configuration).
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.MapValueAttribute.Value">
            <summary>
            Database value, to which current enumeration field will be mapped when used in query or saved to database.
            This value, when loaded from database, will be converted to current enumeration field.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.MapValueAttribute.IsDefault">
            <summary>
            If <c>true</c>, <see cref="P:LinqToDB.Mapping.MapValueAttribute.Value"/> property value will be used for conversion from enumeration to
            database value.
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.NotColumnAttribute">
            <summary>
            Marks current property or column to be ignored for mapping when explicit column mapping disabled.
            See <see cref="P:LinqToDB.Mapping.TableAttribute.IsColumnAttributeRequired"/>.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.NotColumnAttribute.#ctor">
            <summary>
            Creates attribute instance.
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.NotNullAttribute">
            <summary>
            Sets nullability flag for current column to <c>false</c>.
            See <see cref="T:LinqToDB.Mapping.NullableAttribute"/> for more details.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.NotNullAttribute.#ctor">
            <summary>
            Creates attribute isntance.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.NotNullAttribute.#ctor(System.String)">
            <summary>
            Creates attribute isntance.
            </summary>
            <param name="configuration">Mapping schema configuration name. See <see cref="N:LinqToDB.Configuration"/>.</param>
        </member>
        <member name="T:LinqToDB.Mapping.NullableAttribute">
            <summary>
            Explicitly specifies that associated column could contain <c>NULL</c> values.
            Overrides default nullability flag from current mapping schema for property/field type.
            Has lower priority over <seealso cref="P:LinqToDB.Mapping.ColumnAttribute.CanBeNull"/>.
            Using this attribute, you can allow <c>NULL</c> values for identity columns.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.NullableAttribute.#ctor">
            <summary>
            Creates attribute isntance.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.NullableAttribute.#ctor(System.Boolean)">
            <summary>
            Creates attribute isntance.
            </summary>
            <param name="isNullable">Nullability flag for current column.</param>
        </member>
        <member name="M:LinqToDB.Mapping.NullableAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Creates attribute isntance.
            </summary>
            <param name="configuration">Mapping schema configuration name. See <see cref="P:LinqToDB.Mapping.NullableAttribute.Configuration"/>.</param>
            <param name="isNullable">Nullability flag for current column.</param>
        </member>
        <member name="P:LinqToDB.Mapping.NullableAttribute.Configuration">
            <summary>
            Gets or sets mapping schema configuration name, for which this attribute should be taken into account.
            <see cref="T:LinqToDB.ProviderName"/> for standard names.
            Attributes with <c>null</c> or empty string <see cref="P:LinqToDB.Mapping.NullableAttribute.Configuration"/> value applied to all configurations (if no attribute found for current configuration).
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.NullableAttribute.CanBeNull">
            <summary>
            Gets or sets nullability flag for current column.
            Default value: <c>true</c>.
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.PrimaryKeyAttribute">
            <summary>
            Marks property or field as a member of primary key for current mapping type.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.PrimaryKeyAttribute.#ctor">
            <summary>
            Creates attribute instance.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.PrimaryKeyAttribute.#ctor(System.Int32)">
            <summary>
            Creates attribute instance.
            </summary>
            <param name="order">Column order in composite primary key.</param>
        </member>
        <member name="M:LinqToDB.Mapping.PrimaryKeyAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Creates attribute instance.
            </summary>
            <param name="configuration">Mapping schema configuration name. See <see cref="P:LinqToDB.Mapping.PrimaryKeyAttribute.Configuration"/>.</param>
            <param name="order">Column order in composite primary key.</param>
        </member>
        <member name="P:LinqToDB.Mapping.PrimaryKeyAttribute.Configuration">
            <summary>
            Gets or sets mapping schema configuration name, for which this attribute should be taken into account.
            <see cref="T:LinqToDB.ProviderName"/> for standard names.
            Attributes with <c>null</c> or empty string <see cref="P:LinqToDB.Mapping.PrimaryKeyAttribute.Configuration"/> value applied to all configurations (if no attribute found for current configuration).
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.PrimaryKeyAttribute.Order">
            <summary>
            Gets or sets order of current column in composite primary key.
            Order is used for query generation to define in which order primary key columns must be mentioned in query
            from columns with smallest order value to greatest.
            Default value: <c>-1</c>.
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.PropertyMappingBuilder`2">
            <summary>
            Column or association fluent mapping builder.
            </summary>
            <typeparam name="TEntity">Entity type.</typeparam>
            <typeparam name="TProperty">Column or association member type.</typeparam>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`2.#ctor(LinqToDB.Mapping.EntityMappingBuilder{`0},System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            Creates column or association fluent mapping builder.
            </summary>
            <param name="entity">Entity fluent mapping builder.</param>
            <param name="memberGetter">Column or association member getter expression.</param>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`2.HasAttribute(LinqToDB.Mapping.MappingAttribute)">
            <summary>
            Adds attribute to current mapping member.
            </summary>
            <param name="attribute">Mapping attribute to add to specified member.</param>
            <returns>Returns current column or association mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`2.Entity``1(System.String)">
            <summary>
            Creates entity builder for specified mapping type.
            </summary>
            <typeparam name="TE">Mapping type.</typeparam>
            <param name="configuration">Optional mapping schema configuration name, for which this entity builder should be taken into account.
            <see cref="T:LinqToDB.ProviderName"/> for standard configuration names.</param>
            <returns>Returns entity mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`2.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Adds new column mapping to current column's entity.
            </summary>
            <param name="func">Column mapping property or field getter expression.</param>
            <returns>Returns property mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`2.Member``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Adds member mapping to current entity.
            </summary>
            <param name="func">Column mapping property or field getter expression.</param>
            <returns>Returns fluent property mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`2.Association``3(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Boolean)">
            <summary>
            Adds association mapping to current column's entity.
            </summary>
            <typeparam name="TOther">Association member type.</typeparam>
            <typeparam name="TThisKey">This association side key type.</typeparam>
            <typeparam name="TOtherKey">Other association side key type.</typeparam>
            <param name="prop">Association member getter expression.</param>
            <param name="thisKey">This association key getter expression.</param>
            <param name="otherKey">Other association key getter expression.</param>
            <param name="canBeNull">Defines type of join. True - left join, False - inner join.</param>
            <returns>Returns association mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`2.Association``3(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Boolean)">
            <summary>
            Adds association mapping to current column's entity.
            </summary>
            <typeparam name="TPropElement">Association member type.</typeparam>
            <typeparam name="TThisKey">This association side key type.</typeparam>
            <typeparam name="TOtherKey">Other association side key type.</typeparam>
            <param name="prop">Association member getter expression.</param>
            <param name="thisKey">This association key getter expression.</param>
            <param name="otherKey">Other association key getter expression.</param>
            <param name="canBeNull">Defines type of join. True - left join, False - inner join.</param>
            <returns>Returns fluent property mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`2.Association``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},System.Boolean)">
            <summary>
            Adds association mapping to current column's entity.
            </summary>
            <typeparam name="TOther">Other association side type</typeparam>
            <param name="prop">Association member getter expression.</param>
            <param name="predicate">Predicate expression.</param>
            <param name="canBeNull">Defines type of join. True - left join, False - inner join.</param>
            <returns>Returns fluent property mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`2.Association``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},System.Boolean)">
            <summary>
            Adds association mapping to current column's entity.
            </summary>
            <typeparam name="TOther">Other association side type</typeparam>
            <param name="prop">Association member getter expression.</param>
            <param name="predicate">Predicate expression</param>
            <param name="canBeNull">Defines type of join. True - left join, False - inner join.</param>
            <returns>Returns fluent property mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`2.Association``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Linq.Expressions.Expression{System.Func{`0,LinqToDB.IDataContext,System.Linq.IQueryable{``0}}},System.Boolean)">
            <summary>
            Adds association mapping to current column's entity.
            </summary>
            <typeparam name="TOther">Other association side type</typeparam>
            <param name="prop">Association member getter expression.</param>
            <param name="queryExpression">Query expression.</param>
            <param name="canBeNull">Defines type of join. True - left join, False - inner join.</param>
            <returns>Returns fluent property mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`2.Association``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,LinqToDB.IDataContext,System.Linq.IQueryable{``0}}},System.Boolean)">
            <summary>
            Adds association mapping to current column's entity.
            </summary>
            <typeparam name="TOther">Other association side type</typeparam>
            <param name="prop">Association member getter expression.</param>
            <param name="queryExpression">Query expression.</param>
            <param name="canBeNull">Defines type of join. True - left join, False - inner join.</param>
            <returns>Returns fluent property mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`2.IsPrimaryKey(System.Int32)">
            <summary>
            Marks current column as primary key member.
            </summary>
            <param name="order">Order of property in primary key.</param>
            <returns>Returns current column mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`2.IsIdentity">
            <summary>
            Marks current column as identity column.
            </summary>
            <returns>Returns current column mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`2.HasColumnName(System.String)">
            <summary>
            Sets name for current column.
            </summary>
            <param name="columnName">Column name.</param>
            <returns>Returns current column mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`2.HasDataType(LinqToDB.DataType)">
            <summary>
            Sets LINQ to DB type for current column.
            </summary>
            <param name="dataType">Data type.</param>
            <returns>Returns current column mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`2.HasDbType(System.String)">
            <summary>
            Sets database type for current column.
            </summary>
            <param name="dbType">Column type.</param>
            <returns>Returns current column mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`2.HasCreateFormat(System.String)">
            <summary>
            Sets custom column create SQL template.
            </summary>
            <param name="format">
            Custom template for column definition in create table SQL expression, generated using
            <see cref="M:LinqToDB.DataExtensions.CreateTable``1(LinqToDB.IDataContext,System.String,System.String,System.String,System.String,System.String,LinqToDB.SqlQuery.DefaultNullable,System.String,LinqToDB.TableOptions)"/> methods.
            Template accepts following string parameters:
            - {0} - column name;
            - {1} - column type;
            - {2} - NULL specifier;
            - {3} - identity specification.
            </param>
            <returns>Returns current column mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`2.HasStorage(System.String)">
            <summary>
            Adds data storage property or field for current column.
            </summary>
            <param name="storage">Name of storage property or field for current column.</param>
            <returns>Returns current column mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`2.IsDiscriminator(System.Boolean)">
            <summary>
            Marks current column as discriminator column for inheritance mapping.
            </summary>
            <param name="isDiscriminator">If <c>true</c> - column is used as inheritance mapping discriminator.</param>
            <returns>Returns current column mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`2.SkipOnEntityFetch(System.Boolean)">
            <summary>
            Marks current column to be skipped by default during a full entity fetch
            </summary>
            <param name="skipOnEntityFetch">If <c>true</c>, column won't be fetched unless explicity selected in a Linq query.</param>
            <returns>Returns current column mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`2.HasSkipOnInsert(System.Boolean)">
            <summary>
            Sets whether a column is insertable.
            This flag will affect only insert operations with implicit columns specification like
            <see cref="M:LinqToDB.DataExtensions.Insert``1(LinqToDB.IDataContext,``0,System.String,System.String,System.String,System.String,LinqToDB.TableOptions)"/>
            method and will be ignored when user explicitly specifies value for this column.
            </summary>
            <param name="skipOnInsert">If <c>true</c> - column will be ignored for implicit insert operations.</param>
            <returns>Returns current column mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`2.HasSkipOnUpdate(System.Boolean)">
            <summary>
            Sets whether a column is updatable.
            This flag will affect only update operations with implicit columns specification like
            <see cref="M:LinqToDB.DataExtensions.Update``1(LinqToDB.IDataContext,``0,System.String,System.String,System.String,System.String,LinqToDB.TableOptions)"/>
            method and will be ignored when user explicitly specifies value for this column.
            </summary>
            <param name="skipOnUpdate">If <c>true</c> - column will be ignored for implicit update operations.</param>
            <returns>Returns current column mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`2.IsNullable(System.Boolean)">
            <summary>
            Sets whether a column can contain <c>NULL</c> values.
            </summary>
            <param name="isNullable">If <c>true</c> - column could contain <c>NULL</c> values.</param>
            <returns>Returns current column mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`2.IsNotColumn">
            <summary>
            Sets current member to be excluded from mapping.
            </summary>
            <returns>Returns current mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`2.IsColumn">
            <summary>
            Sets current member to be included into mapping as column.
            </summary>
            <returns>Returns current column mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`2.HasLength(System.Int32)">
            <summary>
            Sets the length of the database column.
            </summary>
            <param name="length">Column length.</param>
            <returns>Returns current column mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`2.HasPrecision(System.Int32)">
            <summary>
            Sets the precision of the database column.
            </summary>
            <param name="precision">Column precision.</param>
            <returns>Returns current column mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`2.HasScale(System.Int32)">
            <summary>
            Sets the Scale of the database column.
            </summary>
            <param name="scale">Column scale.</param>
            <returns>Returns current column mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`2.HasOrder(System.Int32)">
            <summary>
            Sets the Order of the database column.
            </summary>
            <param name="order">Column order.</param>
            <returns>Returns current column mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`2.IsAlias(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Sets that property is alias to another member.
            </summary>
            <param name="aliasMember">Alias member getter expression.</param>
            <returns>Returns current column mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`2.IsAlias(System.String)">
            <summary>
            Sets that property is alias to another member.
            </summary>
            <param name="aliasMember">Alias member name.</param>
            <returns>Returns current column mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`2.IsExpression``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,System.String)">
            <summary>
            Configure property as alias to another member.
            </summary>
            <param name="expression">Expression for mapping member during read.</param>
            <param name="isColumn">Indicates whether a property value should be filled during entity materialization (calculated property).</param>
            <param name="alias">Optional alias for specific member expression. By default Member Name is used.</param>
            <returns>Returns current column mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`2.HasConversionFunc``1(System.Func{`1,``0},System.Func{``0,`1},System.Boolean)">
            <summary>
                Configures the property so that the property value is converted to the given type before
                writing to the database and converted back when reading from the database.
            </summary>
            <typeparam name="TProvider"> The type to convert to and from. </typeparam>
            <returns>Returns current column mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`2.HasConversion``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{``0,`1}},System.Boolean)">
            <summary>
                Configures the property so that the property value is converted to the given type before
                writing to the database and converted back when reading from the database.
            </summary>
            <typeparam name="TProvider"> The type to convert to and from. </typeparam>
            <returns>Returns current column mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`2.UseSequence(System.String,System.String,System.String)">
            <summary>
            Specifies value generation sequence for current column.
            See <see cref="T:LinqToDB.Mapping.SequenceNameAttribute"/> notes for list of supported databases.
            </summary>
            <param name="sequenceName">Name of sequence.</param>
            <param name="schema">Optional sequence schema name.</param>
            <param name="configuration">Optional mapping configuration name. If not specified, entity configuration used.</param>
            <returns>Returns current column mapping builder.</returns>
        </member>
        <member name="T:LinqToDB.Mapping.QueryFilterAttribute">
            <summary>
            Contains reference to filter function defined by <see cref="M:LinqToDB.Mapping.EntityMappingBuilder`1.HasQueryFilter(System.Func{System.Linq.IQueryable{`0},LinqToDB.IDataContext,System.Linq.IQueryable{`0}})"/>
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.QueryFilterAttribute.FilterFunc">
            <summary>
            Filter function of type <see cref="!:System.Func&lt;System.Linq.IQueryable&lt;T&gt;,LinqToDB.IDataContext,System.Linq.IQueryable&lt;T&gt;&gt;"/>.
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.Relationship">
            <summary>
            Defines relationship types for associations.
            See <see cref="P:LinqToDB.Mapping.AssociationAttribute.Relationship"/> for more details.
            </summary>
        </member>
        <member name="F:LinqToDB.Mapping.Relationship.OneToOne">
            <summary>
            One-to-one relationship.
            </summary>
        </member>
        <member name="F:LinqToDB.Mapping.Relationship.OneToMany">
            <summary>
            One-to-many relationship.
            </summary>
        </member>
        <member name="F:LinqToDB.Mapping.Relationship.ManyToOne">
            <summary>
            Many-to-one relationship.
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.ResultSetIndexAttribute">
            <summary>
            Used to mark the index of a result set when multiple result sets need to be processed for a command.
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.ScalarTypeAttribute">
            <summary>
            Overrides default scalar detection for target class or structure.
            By default linq2db treats primitives and structs as scalar types.
            This attribute allows you to mark class or struct as scalar type or mark struct as non-scalar type.
            Also see <seealso cref="F:LinqToDB.Common.Configuration.IsStructIsScalarType"/>.
            Note that if you marks some type as scalar, you will need to define custom mapping logic between object of
            that type and data parameter using <seealso cref="M:LinqToDB.Mapping.MappingSchema.SetConvertExpression(System.Type,System.Type,System.Linq.Expressions.LambdaExpression,System.Boolean)"/> methods.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.ScalarTypeAttribute.#ctor">
            <summary>
            Creates attribute instance.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.ScalarTypeAttribute.#ctor(System.Boolean)">
            <summary>
            Creates attribute instance.
            </summary>
            <param name="isScalar">Should target type be treated as scalar type or not.</param>
        </member>
        <member name="M:LinqToDB.Mapping.ScalarTypeAttribute.#ctor(System.String)">
            <summary>
            Creates attribute instance.
            </summary>
            <param name="configuration">Mapping schema configuration name. See <see cref="P:LinqToDB.Mapping.ScalarTypeAttribute.Configuration"/>.</param>
        </member>
        <member name="M:LinqToDB.Mapping.ScalarTypeAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Creates attribute instance.
            </summary>
            <param name="configuration">Mapping schema configuration name. See <see cref="P:LinqToDB.Mapping.ScalarTypeAttribute.Configuration"/>.</param>
            <param name="isScalar">Should target type be treated as scalar type or not.</param>
        </member>
        <member name="P:LinqToDB.Mapping.ScalarTypeAttribute.Configuration">
            <summary>
            Mapping schema configuration name, for which this attribute should be taken into account.
            <see cref="T:LinqToDB.ProviderName"/> for standard names.
            Attributes with <c>null</c> or empty string <see cref="P:LinqToDB.Mapping.ScalarTypeAttribute.Configuration"/> value applied to all configurations (if no attribute found for current configuration).
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ScalarTypeAttribute.IsScalar">
            <summary>
            Gets or sets scalar type flag.
            Default value: <c>true</c>.
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.SequenceNameAttribute">
            <summary>
            Specifies value generation sequence for mapped property of field.
            Currently it supported only for:
            <list type="bullet">
            <item>Firebird generators</item>
            <item>Oracle sequences</item>
            <item>PostgreSQL serial pseudotypes/sequences</item>
            </list>
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.SequenceNameAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates attribute instance.
            </summary>
            <param name="configuration">Mapping schema configuration name. See <see cref="P:LinqToDB.Mapping.SequenceNameAttribute.Configuration"/>.</param>
            <param name="sequenceName">Sequence generator name.</param>
        </member>
        <member name="M:LinqToDB.Mapping.SequenceNameAttribute.#ctor(System.String)">
            <summary>
            Creates attribute instance.
            </summary>
            <param name="sequenceName">Sequence generator name.</param>
        </member>
        <member name="P:LinqToDB.Mapping.SequenceNameAttribute.Configuration">
            <summary>
            Gets or sets mapping schema configuration name, for which this attribute should be taken into account.
            <see cref="T:LinqToDB.ProviderName"/> for standard names.
            Attributes with <c>null</c> or empty string <see cref="P:LinqToDB.Mapping.SequenceNameAttribute.Configuration"/> value applied to all configurations (if no attribute found for current configuration).
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.SequenceNameAttribute.SequenceName">
            <summary>
            Gets or sets sequence generator name.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.SequenceNameAttribute.Schema">
            <summary>
            Gets or sets sequence generator schema name.
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.SkipModification">
            <summary>
            Flags for specifying skip modifications used for Attributes based on <see cref="T:LinqToDB.Mapping.SkipBaseAttribute"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.Mapping.SkipModification.None">
            <summary>
            No value should be skipped.
            </summary>
        </member>
        <member name="F:LinqToDB.Mapping.SkipModification.Insert">
            <summary>
            A value should be skipped on insert.
            </summary>
        </member>
        <member name="F:LinqToDB.Mapping.SkipModification.Update">
            <summary>
            A value should be skipped on update.
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.SkipBaseAttribute">
            <summary>
            Abstract Attribute to be used for skipping values
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.SkipBaseAttribute.ShouldSkip(System.Object,LinqToDB.Mapping.EntityDescriptor,LinqToDB.Mapping.ColumnDescriptor)">
            <summary>
            Check if object contains values that should be skipped.
            </summary>
            <param name="obj">The object to check.</param>
            <param name="entityDescriptor">The entity descriptor.</param>
            <param name="columnDescriptor">The column descriptor.</param>
            <returns><c>true</c> if object should be skipped for the operation.</returns>
        </member>
        <member name="P:LinqToDB.Mapping.SkipBaseAttribute.Affects">
            <summary>
            Defines on which method a value should be skipped.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.SkipBaseAttribute.Configuration">
            <summary>
            Gets or sets mapping schema configuration name, for which this attribute should be taken into account.
            <see cref="T:LinqToDB.ProviderName"/> for standard names.
            Attributes with <c>null</c> or empty string <see cref="P:LinqToDB.Mapping.SkipBaseAttribute.Configuration"/> value applied to all configurations (if no attribute found for current configuration).
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.SkipValuesByListAttribute">
            <summary>
            Abstract Attribute to be used for skipping value for
            <see cref="T:LinqToDB.Mapping.SkipValuesOnInsertAttribute"/> based on <see cref="F:LinqToDB.Mapping.SkipModification.Insert"></see> or
            <see cref="T:LinqToDB.Mapping.SkipValuesOnUpdateAttribute"/> based on <see cref="F:LinqToDB.Mapping.SkipModification.Update"/>/> or a
            custom Attribute derived from this to override <see cref="M:LinqToDB.Mapping.SkipBaseAttribute.ShouldSkip(System.Object,LinqToDB.Mapping.EntityDescriptor,LinqToDB.Mapping.ColumnDescriptor)"/>
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.SkipValuesByListAttribute.Values">
            <summary>
            Gets collection with values to skip.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.SkipValuesByListAttribute.ShouldSkip(System.Object,LinqToDB.Mapping.EntityDescriptor,LinqToDB.Mapping.ColumnDescriptor)">
            <summary>
            Check if object contains values that should be skipped.
            </summary>
            <param name="obj">The object to check.</param>
            <param name="entityDescriptor">The entity descriptor.</param>
            <param name="columnDescriptor">The column descriptor.</param>
            <returns><c>true</c> if object should be skipped for the operation.</returns>
        </member>
        <member name="T:LinqToDB.Mapping.SkipValuesOnInsertAttribute">
            <summary>
            Attribute for skipping specific values on insert.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.SkipValuesOnInsertAttribute.#ctor(System.Object[])">
            <summary>
            Constructor.
            </summary>
            <param name="values">
            Values to skip on insert operations.
            </param>
        </member>
        <member name="P:LinqToDB.Mapping.SkipValuesOnInsertAttribute.Affects">
            <summary>
            Operations, affected by value skipping.
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.SkipValuesOnUpdateAttribute">
            <summary>
            Attribute for skipping specific values on update.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.SkipValuesOnUpdateAttribute.#ctor(System.Object[])">
            <summary>
            Constructor.
            </summary>
            <param name="values">
            Values to skip on update operations.
            </param>
        </member>
        <member name="P:LinqToDB.Mapping.SkipValuesOnUpdateAttribute.Affects">
            <summary>
            Operations, affected by value skipping.
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.TableAttribute">
            <summary>
            Maps databse table or view to a class or interface.
            You can apply it to any class including non-public, nester or abstract classes.
            Applying it to interfaces will allow you to perform queries against target table, but you need to specify
            projection in your query explicitly, if you want to select data from such mapping.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.TableAttribute.#ctor">
            <summary>
            Creates new table mapping attribute.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.TableAttribute.#ctor(System.String)">
            <summary>
            Creates new table mapping attribute.
            </summary>
            <param name="tableName">Name of mapped table or view in database.</param>
        </member>
        <member name="P:LinqToDB.Mapping.TableAttribute.Configuration">
            <summary>
            Gets or sets mapping schema configuration name, for which this attribute should be taken into account.
            <see cref="T:LinqToDB.ProviderName"/> for standard names.
            Attributes with <c>null</c> or empty string <see cref="P:LinqToDB.Mapping.TableAttribute.Configuration"/> value applied to all configurations (if no attribute found for current configuration).
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.TableAttribute.Name">
            <summary>
            Gets or sets name of table or view in database.
            When not specified, name of class or interface will be used.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.TableAttribute.Schema">
            <summary>
            Gets or sets optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.TableAttribute.Database">
            <summary>
            Gets or sets optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.TableAttribute.Server">
            <summary>
            Gets or sets optional linked server name. See <see cref="M:LinqToDB.LinqExtensions.ServerName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.TableAttribute.IsTemporary">
            <summary>
            Gets or sets IsTemporary flag. See <see cref="M:LinqToDB.TableExtensions.IsTemporary``1(LinqToDB.ITable{``0},System.Boolean)"/> method for support information per provider.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.TableAttribute.TableOptions">
            <summary>
            Gets or sets Table options. See <see cref="P:LinqToDB.Mapping.TableAttribute.TableOptions"/> enum for support information per provider.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.TableAttribute.IsColumnAttributeRequired">
            <summary>
            Gets or sets column mapping rules for current class or interface.
            If <c>true</c>, properties and fields should be marked with one of those attributes to be used for mapping:
            - <see cref="T:LinqToDB.Mapping.ColumnAttribute"/>;
            - <see cref="T:LinqToDB.Mapping.PrimaryKeyAttribute"/>;
            - <see cref="T:LinqToDB.Mapping.IdentityAttribute"/>;
            - <see cref="T:LinqToDB.Mapping.ColumnAliasAttribute"/>.
            Otherwise all supported members of scalar type will be used:
            - public instance fields and properties;
            - explicit interface implementation properties.
            Also see <seealso cref="F:LinqToDB.Common.Configuration.IsStructIsScalarType"/> and <seealso cref="T:LinqToDB.Mapping.ScalarTypeAttribute"/>.
            Default value: <c>true</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.TableAttribute.IsView">
            <summary>
            This property is not used by linq2db and could be used for informational purposes.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ValueConverterAttribute.ValueConverter">
            <summary>
            ValueConverter for mapping Database Values to Model values.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.ValueConverterAttribute.GetValueConverter(LinqToDB.Mapping.ColumnDescriptor)">
            <summary>
            Returns <see cref="T:LinqToDB.Common.IValueConverter"/> for specific column.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ValueConverterAttribute.Configuration">
            <summary>
            Gets or sets mapping schema configuration name, for which this attribute should be taken into account.
            <see cref="T:LinqToDB.ProviderName"/> for standard names.
            Attributes with <c>null</c> or empty string <see cref="P:LinqToDB.Mapping.ValueConverterAttribute.Configuration"/> value applied to all configurations (if no attribute found for current configuration).
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ValueConverterAttribute.ConverterType">
            <summary>
            Gets or sets converter type. ConverterType should implement <see cref="T:LinqToDB.Common.IValueConverter"/> interface, should have public constructor with no parameters.
            </summary>
        </member>
        <member name="T:LinqToDB.ProviderName">
            <summary>
            Default names for providers.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.Access">
            <summary>
            Microsoft Access OleDb provider (both JET or ACE).
            Used as configuration name for Access mapping schema <see cref="T:LinqToDB.DataProvider.Access.AccessMappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.AccessOdbc">
            <summary>
            Microsoft Access ODBC provider.
            Used as configuration name for Access mapping schema <see cref="T:LinqToDB.DataProvider.Access.AccessMappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.DB2">
            <summary>
            IBM DB2 default provider (DB2 LUW).
            Used as configuration name for both DB2 base mapping schema <see cref="T:LinqToDB.DataProvider.DB2.DB2MappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.DB2LUW">
            <summary>
            IBM DB2 LUW provider.
            Used as configuration name for DB2 LUW mapping schema <see cref="T:LinqToDB.DataProvider.DB2.DB2MappingSchema.DB2LUWMappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.DB2zOS">
            <summary>
            IBM DB2 for z/OS provider.
            Used as configuration name for DB2 z/OS mapping schema <see cref="T:LinqToDB.DataProvider.DB2.DB2MappingSchema.DB2zOSMappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.Firebird">
            <summary>
            Firebird provider.
            Used as configuration name for Firebird mapping schema <see cref="T:LinqToDB.DataProvider.Firebird.FirebirdMappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.Informix">
            <summary>
            Informix IBM.Data.Informix provider (including IDS provider).
            Used as configuration name for Informix mapping schema <see cref="T:LinqToDB.DataProvider.Informix.InformixMappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.InformixDB2">
            <summary>
            Informix over IBM.Data.DB2 IDS provider.
            Used as configuration name for Informix mapping schema <see cref="T:LinqToDB.DataProvider.Informix.InformixMappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.SqlServer">
            <summary>
            Microsoft SQL Server default provider (SQL Server 2008).
            Used as configuration name for SQL Server base mapping schema <see cref="T:LinqToDB.DataProvider.SqlServer.SqlServerMappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.SqlServer2005">
            <summary>
            Microsoft SQL Server 2005 provider.
            Used as configuration name for SQL Server 2005 mapping schema <see cref="T:LinqToDB.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2005MappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.SqlServer2008">
            <summary>
            Microsoft SQL Server 2008 provider.
            Used as configuration name for SQL Server 2008 mapping schema <see cref="T:LinqToDB.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2008MappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.SqlServer2012">
            <summary>
            Microsoft SQL Server 2012 provider.
            Used as configuration name for SQL Server 2012 mapping schema <see cref="T:LinqToDB.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2012MappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.SqlServer2014">
            <summary>
            Microsoft SQL Server 2012 provider.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.SqlServer2016">
            <summary>
            Microsoft SQL Server 2016 provider.
            Used as configuration name for SQL Server 2016 mapping schema <see cref="T:LinqToDB.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2016MappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.SqlServer2017">
            <summary>
            Microsoft SQL Server 2017 provider.
            Used as configuration name for SQL Server 2017 mapping schema <see cref="T:LinqToDB.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2017MappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.SqlServer2019">
            <summary>
            Microsoft SQL Server 2019 provider.
            Used as configuration name for SQL Server 2019 mapping schema <see cref="T:LinqToDB.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2019MappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.SqlServer2022">
            <summary>
            Microsoft SQL Server 2022 provider.
            Used as configuration name for SQL Server 2019 mapping schema <see cref="T:LinqToDB.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2022MappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.MySql">
            <summary>
            MySql provider.
            Used as configuration name for MySql mapping schema <see cref="T:LinqToDB.DataProvider.MySql.MySqlMappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.MySqlOfficial">
            <summary>
            MySql provider.
            Used as configuration name for MySql mapping schema <see cref="T:LinqToDB.DataProvider.MySql.MySqlMappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.MySqlConnector">
            <summary>
            MySqlConnector provider.
            Used as configuration name for MySql mapping schema <see cref="T:LinqToDB.DataProvider.MySql.MySqlMappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.Oracle">
            <summary>
            Oracle ODP.NET autodetected provider (native or managed).
            Used as configuration name for Oracle base mapping schema <see cref="T:LinqToDB.DataProvider.Oracle.OracleMappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.Oracle11Native">
            <summary>
            Oracle (11g dialect) ODP.NET native provider.
            Used as configuration name for Oracle native provider mapping schema <see cref="T:LinqToDB.DataProvider.Oracle.OracleMappingSchema.Native11MappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.Oracle11Devart">
            <summary>
            Oracle (11g dialect) Devart provider.
            Used as configuration name for Oracle managed provider mapping schema <see cref="T:LinqToDB.DataProvider.Oracle.OracleMappingSchema.Devart11MappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.Oracle11Managed">
            <summary>
            Oracle (11g dialect) ODP.NET managed provider.
            Used as configuration name for Oracle managed provider mapping schema <see cref="T:LinqToDB.DataProvider.Oracle.OracleMappingSchema.Managed11MappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.OracleNative">
            <summary>
            Oracle ODP.NET native provider.
            Used as configuration name for Oracle native provider mapping schema <see cref="T:LinqToDB.DataProvider.Oracle.OracleMappingSchema.NativeMappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.OracleManaged">
            <summary>
            Oracle ODP.NET managed provider.
            Used as configuration name for Oracle managed provider mapping schema <see cref="T:LinqToDB.DataProvider.Oracle.OracleMappingSchema.ManagedMappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.OracleDevart">
            <summary>
            Oracle Devart provider.
            Used as configuration name for Oracle managed provider mapping schema <see cref="T:LinqToDB.DataProvider.Oracle.OracleMappingSchema.DevartMappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.PostgreSQL">
            <summary>
            PostgreSQL 9.2- data provider.
            Used as configuration name for PostgreSQL mapping schema <see cref="T:LinqToDB.DataProvider.PostgreSQL.PostgreSQLMappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.PostgreSQL92">
            <summary>
            PostgreSQL 9.2- data provider.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.PostgreSQL93">
            <summary>
            PostgreSQL 9.3+ data provider.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.PostgreSQL95">
            <summary>
            PostgreSQL 9.5+ data provider.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.PostgreSQL15">
            <summary>
            PostgreSQL 15+ data provider.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.SqlCe">
            <summary>
            Microsoft SQL Server Compact Edition provider.
            Used as configuration name for SQL CE mapping schema <see cref="T:LinqToDB.DataProvider.SqlCe.SqlCeMappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.SQLite">
            <summary>
            SQLite provider.
            Used as configuration name for SQLite mapping schema <see cref="T:LinqToDB.DataProvider.SQLite.SQLiteMappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.SQLiteClassic">
            <summary>
            System.Data.Sqlite provider.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.SQLiteMS">
            <summary>
            Microsoft.Data.Sqlite provider.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.Sybase">
            <summary>
            Native SAP/Sybase ASE provider.
            Used as configuration name for Sybase ASE mapping schema <see cref="T:LinqToDB.DataProvider.Sybase.SybaseMappingSchema.NativeMappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.SybaseManaged">
            <summary>
            Managed Sybase/SAP ASE provider from <a href="https://github.com/DataAction/AdoNetCore.AseClient">DataAction</a>.
            Used as configuration name for Sybase ASE mapping schema <see cref="T:LinqToDB.DataProvider.Sybase.SybaseMappingSchema.ManagedMappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.SapHana">
            <summary>
            SAP HANA provider.
            Used as configuration name for SAP HANA mapping schema <see cref="T:LinqToDB.DataProvider.SapHana.SapHanaMappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.SapHanaNative">
            <summary>
            SAP HANA provider.
            Used as configuration name for SAP HANA mapping schema <see cref="T:LinqToDB.DataProvider.SapHana.SapHanaMappingSchema.NativeMappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.SapHanaOdbc">
            <summary>
            SAP HANA ODBC provider.
            Used as configuration name for SAP HANA mapping schema <see cref="T:LinqToDB.DataProvider.SapHana.SapHanaMappingSchema.OdbcMappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.ClickHouse">
            <summary>
            ClickHouse provider base name.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.ClickHouseOctonica">
            <summary>
            ClickHouse provider using Octonica.ClickHouseClient ADO.NET provider.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.ClickHouseClient">
            <summary>
            ClickHouse provider using ClickHouse.Client ADO.NET provider.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.ClickHouseMySql">
            <summary>
            ClickHouse provider using MySqlConnector ADO.NET provider.
            </summary>
        </member>
        <member name="T:LinqToDB.Reflection.Methods">
            <summary>
            This API supports the LinqToDB infrastructure and is not intended to be used  directly from your code.
            This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:LinqToDB.Remote.RemoteDataContextBase.AddInterceptor(LinqToDB.Interceptors.IInterceptor)">
            <inheritdoc cref="M:LinqToDB.IDataContext.AddInterceptor(LinqToDB.Interceptors.IInterceptor)"/>
        </member>
        <member name="T:LinqToDB.Remote.SerializationConverter">
            <summary>
            Implements conversions support between raw values and string to support de-/serialization of remote data context
            query AST and result values.
            </summary>
        </member>
        <member name="T:LinqToDB.Remote.SerializationMappingSchema">
            <summary>
            Mapping schema, that defines remote context values de-/serialization converters.
            Contains mappings between basic data types and <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="T:LinqToDB.SchemaProvider.ColumnSchema">
            <summary>
            Describes table column.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ColumnSchema.ColumnName">
            <summary>
            Gets column name.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ColumnSchema.ColumnType">
            <summary>
            Gets db-specific column type.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ColumnSchema.IsNullable">
            <summary>
            Gets flag indicating that it is nullable column.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ColumnSchema.IsIdentity">
            <summary>
            Gets flag indicating that it is identity column.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ColumnSchema.IsPrimaryKey">
            <summary>
            Gets flag indicating that column is a part of primary key.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ColumnSchema.PrimaryKeyOrder">
            <summary>
            Gets position of column in composite primary key.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ColumnSchema.Description">
            <summary>
            Gets column description.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ColumnSchema.MemberName">
            <summary>
            Gets C# friendly column name.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ColumnSchema.MemberType">
            <summary>
            Gets .net column type as a string.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ColumnSchema.ProviderSpecificType">
            <summary>
            Gets provider-specific .net column type as a string.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ColumnSchema.SystemType">
            <summary>
            Gets .net column type.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ColumnSchema.DataType">
            <summary>
            Gets column type as <see cref="P:LinqToDB.SchemaProvider.ColumnSchema.DataType"/> enumeration value.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ColumnSchema.SkipOnInsert">
            <summary>
            Gets flag indicating that insert operations without explicit column setter should ignore this column.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ColumnSchema.SkipOnUpdate">
            <summary>
            Gets flag indicating that update operations without explicit column setter should ignore this column.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ColumnSchema.Length">
            <summary>
            Gets column type length.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ColumnSchema.Precision">
            <summary>
            Gets column type precision.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ColumnSchema.Scale">
            <summary>
            Gets column type scale.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.ColumnSchema.Table">
            <summary>
            Gets column owner schema.
            </summary>
        </member>
        <member name="T:LinqToDB.SchemaProvider.DataTypeInfo">
            <summary>
            Database data type descriptor.
            Implements subset of DataTypes schema collection:
            https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/common-schema-collections.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.DataTypeInfo.ProviderSpecific">
            <summary>
            Marks provider-specific types.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.DataTypeInfo.TypeName">
            <summary>
            Gets or sets SQL name of data type.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.DataTypeInfo.DataType">
            <summary>
            Gets or sets .NET type name, used by provider for current type.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.DataTypeInfo.CreateFormat">
            <summary>
            Gets or sets SQL type name template - type name and, optionally, parameters. This template could be used
            to define column or variable of specific type.
            E.g. DECIMAL({0}, {1}).
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.DataTypeInfo.CreateParameters">
            <summary>
            Gets or sets comma-separated positional list of <see cref="F:LinqToDB.SchemaProvider.DataTypeInfo.CreateFormat"/> parameters.
            E.g. "precision,scale".
            Order of parameters must match order in <see cref="F:LinqToDB.SchemaProvider.DataTypeInfo.CreateFormat"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.DataTypeInfo.ProviderDbType">
            <summary>
            Gets or sets provider-specific type identifier to use for query parameters of this type.
            Corresponds to some provider's enumeration, e.g. SqlDbType, OracleType, etc.
            </summary>
        </member>
        <member name="T:LinqToDB.SchemaProvider.GetSchemaOptions">
            <summary>
            Defines schema load options.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.GetSchemaOptions.PreferProviderSpecificTypes">
            <summary>
            When set to true, will prefer generation of provider-specific types instead of general types.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.GetSchemaOptions.GetTables">
            <summary>
            Enable or disable read of table schema. Default - enabled (<c>true</c>).
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.GetSchemaOptions.GetForeignKeys">
            <summary>
            Enable or disable read of foreign keys. Default - enabled (<c>true</c>).
            Disabe could be useful at least for Access, as it could <a href="https://github.com/linq2db/linq2db.LINQPad/issues/23">crash</a> on some database files.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.GetSchemaOptions.GetProcedures">
            <summary>
            Enable or disable read of procedures and functions metadata. Default - enabled (<c>true</c>).
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.GetSchemaOptions.GenerateChar1AsString">
            <summary>
            Should linq2db use <see cref="T:System.String"/> for char(1) type or <see cref="T:System.Char"/>. Default type: <see cref="T:System.Char"/> (<c>false</c>).
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.GetSchemaOptions.DefaultSchema">
            <summary>
            Default Schema name.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.GetSchemaOptions.IncludedSchemas">
            <summary>
            List of allowed schemas/owners.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.GetSchemaOptions.ExcludedSchemas">
            <summary>
            List of disallowed schemas/owners.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.GetSchemaOptions.IncludedCatalogs">
            <summary>
            List of allowed databases/catalogs.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.GetSchemaOptions.ExcludedCatalogs">
            <summary>
            List of disallowed databases/catalogs.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.GetSchemaOptions.StringComparer">
            <summary>
            String comparison logic for <see cref="F:LinqToDB.SchemaProvider.GetSchemaOptions.IncludedSchemas"/>, <see cref="F:LinqToDB.SchemaProvider.GetSchemaOptions.ExcludedSchemas"/>, <see cref="F:LinqToDB.SchemaProvider.GetSchemaOptions.IncludedCatalogs"/> and <see cref="F:LinqToDB.SchemaProvider.GetSchemaOptions.ExcludedCatalogs"/> values.
            Default is <see cref="P:System.StringComparer.OrdinalIgnoreCase"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.GetSchemaOptions.LoadProcedure">
            <summary>
            Optional procedure metadata load filter. By default all procedures loaded.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.GetSchemaOptions.GetAssociationMemberName">
            <summary>
            Optional custom name generation logic for association property.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.GetSchemaOptions.ProcedureLoadingProgress">
            <summary>
            Optional callback to report procedure metadata load progress. First parameter contains total number of
            discovered procedures. Second parameter provides position of currently loaded procedure.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.GetSchemaOptions.LoadTable">
            <summary>
            Optinal callback to filter loaded tables. receives object with table details and return boolean flag
            to indicate that table should be loaded (<c>true</c>) or skipped (<c>false</c>).
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.GetSchemaOptions.UseSchemaOnly">
            <summary>
            if set to true, SchemaProvider uses <see cref="F:System.Data.CommandBehavior.SchemaOnly"/> to get SqlServer metadata.
            Otherwise the sp_describe_first_result_set sproc is used.
            </summary>
        </member>
        <member name="T:LinqToDB.SchemaProvider.ISchemaProvider">
            <summary>
            Database schema provider.
            </summary>
        </member>
        <member name="M:LinqToDB.SchemaProvider.ISchemaProvider.GetSchema(LinqToDB.Data.DataConnection,LinqToDB.SchemaProvider.GetSchemaOptions)">
            <summary>
            Returns database schema.
            Note that it is recommended to call this method outside of transaction as some providers do not support it
            or behave incorrectly.
            At least following providers shouldn't be called in transaction:
            - MySQL;
            - Microsoft SQL Server;
            - Sybase;
            - DB2.
            </summary>
            <param name="dataConnection">Data connection to use to read schema from.</param>
            <param name="options">Schema read configuration options.</param>
            <returns>Returns database schema information.</returns>
        </member>
        <member name="T:LinqToDB.SchemaProvider.LoadTableData">
            <summary>
            Contains table information, passed to <see cref="F:LinqToDB.SchemaProvider.GetSchemaOptions.LoadTable"/> delegate.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.LoadTableData.Database">
            <summary>
            Gets table database/catalog name. Could be <c>null</c> for some providers.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.LoadTableData.Schema">
            <summary>
            Gets table schema/owner name. Could be <c>null</c> for some providers.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.LoadTableData.Name">
            <summary>
            Gets name of current table or view.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.LoadTableData.IsDefaultSchema">
            <summary>
            Gets flag to indicate that table belongs to default schema.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.LoadTableData.IsView">
            <summary>
            Gets flag to indicate that this is not a table but view.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.LoadTableData.IsSystem">
            <summary>
            Gets flag to indicate system view or table.
            </summary>
        </member>
        <member name="T:LinqToDB.SchemaProvider.ParameterSchema">
            <summary>
            Describes database procedure or function parameter.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ParameterSchema.SchemaName">
            <summary>
            Gets parameter's name.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ParameterSchema.SchemaType">
            <summary>
            Gets database-specific parameter type.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ParameterSchema.IsIn">
            <summary>
            Gets flag indicating that it is input parameter.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ParameterSchema.IsOut">
            <summary>
            Gets flag indicating that it is output parameter.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ParameterSchema.IsResult">
            <summary>
            Gets flag indicating that it is return value parameter.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ParameterSchema.IsNullable">
            <summary>
            Gets flag indicating that it is nullable parameter.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ParameterSchema.Size">
            <summary>
            Gets parameter type size.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ParameterSchema.Description">
            <summary>
            Gets parameter description.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ParameterSchema.ParameterName">
            <summary>
            Gets C#-friendly parameter name.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ParameterSchema.ParameterType">
            <summary>
            Gets .net type for parameter as string.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ParameterSchema.SystemType">
            <summary>
            Gets .net type for parameter.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ParameterSchema.DataType">
            <summary>
            Gets parameter type as <see cref="P:LinqToDB.SchemaProvider.ParameterSchema.DataType"/> enumeration value.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ParameterSchema.ProviderSpecificType">
            <summary>
            Gets provider-specific .net parameter type as a string.
            </summary>
        </member>
        <member name="T:LinqToDB.SchemaProvider.ProcedureInfo">
            <summary>
            Database procedure or function description.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.ProcedureInfo.ProcedureID">
            <summary>
            Gets or sets unique procedure identifier.
            NOTE: this is not fully-qualified procedure name (even if it used right now for some providers as procedure identifier).
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.ProcedureInfo.CatalogName">
            <summary>
            Gets or sets database name for procedure.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.ProcedureInfo.SchemaName">
            <summary>
            Gets or sets schema/owner name for procedure.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.ProcedureInfo.PackageName">
            <summary>
            Gets or sets package/module/library name for procedure.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.ProcedureInfo.ProcedureName">
            <summary>
            Gets or sets procedure name.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.ProcedureInfo.IsFunction">
            <summary>
            Gets or sets flag to distinguish function from procedure.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.ProcedureInfo.IsTableFunction">
            <summary>
            Gets or sets flag to distinguish table function from other functions.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.ProcedureInfo.IsAggregateFunction">
            <summary>
            Gets or sets flag to distinguish aggregate function from other functions.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.ProcedureInfo.IsWindowFunction">
            <summary>
            Gets or sets flag to distinguish window function from other functions.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.ProcedureInfo.IsDefaultSchema">
            <summary>
            Get or sets flag, indicating that procedure belongs to default schema/owner.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.ProcedureInfo.ProcedureDefinition">
            <summary>
            Gets or sets procedure source code.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.ProcedureInfo.IsResultDynamic">
            <summary>
            Get or sets flag, indicating that procedure returns dynamic (generic) result.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.ProcedureInfo.Description">
            <summary>
            Procedure or function description.
            </summary>
        </member>
        <member name="T:LinqToDB.SchemaProvider.ProcedureParameterInfo">
            <summary>
            Database procedure or function parameter description.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.ProcedureParameterInfo.ProcedureID">
            <summary>
            Gets or sets unique procedure identifier.
            NOTE: this is not fully-qualified procedure name (even if it used right now for some providers as procedure identifier).
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.ProcedureParameterInfo.Ordinal">
            <summary>
            Gets or sets parameter position.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.ProcedureParameterInfo.ParameterName">
            <summary>
            Gets or sets parameter name.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.ProcedureParameterInfo.DataType">
            <summary>
            Get or sets database type for parameter.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.ProcedureParameterInfo.DataTypeExact">
            <summary>
            Get or sets exact database type for parameter.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.ProcedureParameterInfo.Length">
            <summary>
            Gets or sets parameter type length attribute.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.ProcedureParameterInfo.Precision">
            <summary>
            Gets or sets parameter type precision attribute.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.ProcedureParameterInfo.Scale">
            <summary>
            Gets or sets parameter type scale attribute.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.ProcedureParameterInfo.IsIn">
            <summary>
            Gets or sets input or input-output parameter flag.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.ProcedureParameterInfo.IsOut">
            <summary>
            Gets or sets output or input-output parameter flag.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.ProcedureParameterInfo.IsResult">
            <summary>
            Gets or sets return value parameter flag.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.ProcedureParameterInfo.UDTCatalog">
            <summary>
            Parameter's user-defined type(UDT) catalog/database.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.ProcedureParameterInfo.UDTSchema">
            <summary>
            Parameter's user-defined type(UDT) schema/owner.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.ProcedureParameterInfo.UDTName">
            <summary>
            Parameter's user-defined type(UDT) name.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.ProcedureParameterInfo.IsNullable">
            <summary>
            Gets flag indicating that it is nullable parameter.
            </summary>
        </member>
        <member name="F:LinqToDB.SchemaProvider.ProcedureParameterInfo.Description">
            <summary>
            Parameter's description.
            </summary>
        </member>
        <member name="T:LinqToDB.SchemaProvider.ProcedureSchema">
            <summary>
            Describes database procedure or function.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ProcedureSchema.CatalogName">
            <summary>
            Name of database, that contains current procedure.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ProcedureSchema.SchemaName">
            <summary>
            Name of procedure schema/owner.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ProcedureSchema.PackageName">
            <summary>
            Name of procedure package/library/module.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ProcedureSchema.ProcedureName">
            <summary>
            Procedure or function name.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ProcedureSchema.MemberName">
            <summary>
            C#-friendly name.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ProcedureSchema.IsFunction">
            <summary>
            <c>true</c> for function and <c>false</c> for procedure.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ProcedureSchema.IsTableFunction">
            <summary>
            Gets flag indicating that it is scalar or table function.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ProcedureSchema.IsResultDynamic">
            <summary>
            Get or sets flag, indicating that procedure returns dynamic (generic) result.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ProcedureSchema.IsAggregateFunction">
            <summary>
            Gets flag indicating that it is aggregate function or not.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ProcedureSchema.IsDefaultSchema">
            <summary>
            Gets flag indicating that procedure defined with default owner/schema or not.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ProcedureSchema.Description">
            <summary>
            Gets procedure or function description.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ProcedureSchema.IsLoaded">
            <summary>
            Gets flag indicating that procedure tabl result schema loaded. If it is <c>false</c>, procedure doesn't return
            table-like results or schema loading failed. In latter case check <see cref="P:LinqToDB.SchemaProvider.ProcedureSchema.ResultException"/> property for
            error.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ProcedureSchema.ResultTable">
            <summary>
            Gets table result schema for procedure to table function.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ProcedureSchema.ResultException">
            <summary>
            Contains exception, generated during schema load.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ProcedureSchema.SimilarTables">
            <summary>
            List of tables with the same schema as schema in <see cref="P:LinqToDB.SchemaProvider.ProcedureSchema.ResultTable"/>.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.ProcedureSchema.Parameters">
            <summary>
            Gets list of procedure parameters.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.SchemaProviderBase.GetProcedureSchemaExecutesProcedure">
            <summary>
            If true, provider doesn't support schema-only procedure execution and will execute procedure for real.
            </summary>
        </member>
        <member name="M:LinqToDB.SchemaProvider.SchemaProviderBase.BuildTableFunctionLoadTableSchemaCommand(LinqToDB.SchemaProvider.ProcedureSchema,System.String)">
            <summary>
            Builds table function call command.
            </summary>
        </member>
        <member name="M:LinqToDB.SchemaProvider.SchemaProviderBase.GetDataTypes(LinqToDB.Data.DataConnection)">
            <summary>
            Returns list of database data types.
            </summary>
            <param name="dataConnection">Database connection instance.</param>
            <returns>List of database data types.</returns>
        </member>
        <member name="T:LinqToDB.SchemaProvider.TableSchema">
            <summary>
            Describes table-like objects such as tables, views, procedure or function results.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.TableSchema.ID">
            <summary>
            Gets unique table identifier, based on name, schema and database names.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.TableSchema.CatalogName">
            <summary>
            Gets table database (catalog) name.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.TableSchema.SchemaName">
            <summary>
            Gets table owner/schema name.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.TableSchema.TableName">
            <summary>
            Gets database table name.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.TableSchema.Description">
            <summary>
            Gets table description.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.TableSchema.IsDefaultSchema">
            <summary>
            Gets flag indicating that table defined with default owner/schema or not.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.TableSchema.IsView">
            <summary>
            Gets flag indicating that table describes view.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.TableSchema.IsProcedureResult">
            <summary>
            Gets flag indicating that table describes procedure or function result set.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.TableSchema.TypeName">
            <summary>
            Gets C# friendly table name.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.TableSchema.IsProviderSpecific">
            <summary>
            Gets flag indicating that it is not a user-defined table.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.TableSchema.Columns">
            <summary>
            Gets list of table columns.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.TableSchema.ForeignKeys">
            <summary>
            Gets list of table foreign keys.
            </summary>
        </member>
        <member name="P:LinqToDB.SchemaProvider.TableSchema.GroupName">
            <summary>
            Gets table group name. Used by T4 templates to group tables to generate Schema Type if <c>GenerateSchemaAsType</c> is <c>true</c>.
            If NULL, SchemaName is used.
            </summary>
        </member>
        <member name="T:LinqToDB.SqlJoinType">
            <summary>
            Defines join type. Used with join LINQ helpers.
            </summary>
        </member>
        <member name="F:LinqToDB.SqlJoinType.Inner">
            <summary>
            Inner join.
            </summary>
        </member>
        <member name="F:LinqToDB.SqlJoinType.Left">
            <summary>
            Left outer join.
            </summary>
        </member>
        <member name="F:LinqToDB.SqlJoinType.Right">
            <summary>
            Right outer join.
            </summary>
        </member>
        <member name="F:LinqToDB.SqlJoinType.Full">
            <summary>
            Full outer join.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.BasicSqlBuilder.WrapJoinCondition">
            <summary>
            True if it is needed to wrap join condition with ()
            </summary>
            <example>
            <code>
            INNER JOIN Table2 t2 ON (t1.Value = t2.Value)
            </code>
            </example>
        </member>
        <member name="P:LinqToDB.SqlProvider.BasicSqlBuilder.InlineComma">
            <summary>
            Inline comma separator.
            Default value: <code>", "</code>
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.BasicSqlBuilder.Comma">
            <summary>
            End-of-line comma separator.
            Default value: <code>","</code>
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.BasicSqlBuilder.OpenParens">
            <summary>
            End-of-line open parentheses element.
            Default value: <code>"("</code>
            </summary>
        </member>
        <member name="M:LinqToDB.SqlProvider.BasicSqlBuilder.BuildFieldTableAlias(LinqToDB.SqlQuery.SqlField)">
            <summary>
            Used to disable field table name (alias) generation.
            </summary>
        </member>
        <member name="M:LinqToDB.SqlProvider.BasicSqlBuilder.BuildDataType(System.Text.StringBuilder,LinqToDB.SqlQuery.SqlDataType)">
            <summary>
            Appends an <see cref="T:LinqToDB.SqlQuery.SqlDataType"/>'s String to a provided <see cref="P:LinqToDB.SqlProvider.BasicSqlBuilder.StringBuilder"/>
            </summary>
            <param name="sb"></param>
            <param name="dataType"></param>
            <returns>The stringbuilder with the type information appended.</returns>
        </member>
        <member name="M:LinqToDB.SqlProvider.BasicSqlBuilder.BuildDataType(LinqToDB.SqlQuery.SqlDataType,System.Boolean,System.Boolean)">
            <param name="canBeNull">Type could store <c>NULL</c> values (could be used for column table type generation or for databases with explicit typee nullability like ClickHouse).</param>
        </member>
        <member name="M:LinqToDB.SqlProvider.BasicSqlBuilder.BuildDataTypeFromDataType(LinqToDB.SqlQuery.SqlDataType,System.Boolean,System.Boolean)">
            <param name="canBeNull">Type could store <c>NULL</c> values (could be used for column table type generation or for databases with explicit typee nullability like ClickHouse).</param>
        </member>
        <member name="P:LinqToDB.SqlProvider.BasicSqlBuilder.SupportsColumnAliasesInSource">
            <summary>
            If true, provider supports column aliases specification after table alias.
            E.g. as table_alias (column_alias1, column_alias2).
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.BasicSqlBuilder.RequiresConstantColumnAliases">
            <summary>
            If true, provider require column aliases for each  column.
            E.g. as table_alias (column_alias1, column_alias2).
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.BasicSqlBuilder.IsValuesSyntaxSupported">
            <summary>
            If true, provider supports list of VALUES as a source element of merge command.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.BasicSqlBuilder.IsEmptyValuesSourceSupported">
            <summary>
            If true, builder will generate command for empty enumerable source;
            Otherwise exception will be generated.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.BasicSqlBuilder.FakeTable">
            <summary>
            If <see cref="P:LinqToDB.SqlProvider.BasicSqlBuilder.IsValuesSyntaxSupported"/> set to false and provider doesn't support SELECTs without
            FROM clause, this property should contain name of table (or equivalent SQL) with single record.
            IMPORTANT: as this property could return SQL, we don't escape it, so it should contain only valid SQL/identifiers.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.BasicSqlBuilder.FakeTableSchema">
            <summary>
            If <see cref="P:LinqToDB.SqlProvider.BasicSqlBuilder.IsValuesSyntaxSupported"/> set to false and provider doesn't support SELECTs without
            FROM clause, this property could contain name of schema for table with single record.
            Returned name should be already escaped if escaping required.
            </summary>
        </member>
        <member name="M:LinqToDB.SqlProvider.BasicSqlBuilder.BuildMergeTerminator(LinqToDB.SqlQuery.SqlMergeStatement)">
            <summary>
            Allows to add text after generated merge command. E.g. to specify command terminator if provider requires it.
            </summary>
        </member>
        <member name="M:LinqToDB.SqlProvider.BasicSqlBuilder.IsSqlValuesTableValueTypeRequired(LinqToDB.SqlQuery.SqlValuesTable,System.Collections.Generic.IReadOnlyList{LinqToDB.SqlQuery.ISqlExpression[]},System.Int32,System.Int32)">
            <summary>
            Checks that value in specific row and column in enumerable source requires type information generation.
            </summary>
            <param name="source">Merge source table.</param>
            <param name="rows">Merge source data.</param>
            <param name="row">Index of data row to check. Could contain -1 to indicate that this is a check for empty source NULL value.</param>
            <param name="column">Index of data column to check in row.</param>
            <returns>Returns <c>true</c>, if generated SQL should include type information for value at specified position, otherwise <c>false</c> returned.</returns>
        </member>
        <member name="M:LinqToDB.SqlProvider.BasicSqlOptimizer.TransformStatement(LinqToDB.SqlQuery.SqlStatement)">
            <summary>
            Used for correcting statement and should return new statement if changes were made.
            </summary>
            <param name="statement"></param>
            <returns></returns>
        </member>
        <member name="P:LinqToDB.SqlProvider.BasicSqlOptimizer.LikeEscapeCharacter">
            <summary>
            Escape sequence/character to escape special characters in LIKE predicate (defined by <see cref="P:LinqToDB.SqlProvider.BasicSqlOptimizer.LikeCharactersToEscape"/>).
            Default: <c>"~"</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.BasicSqlOptimizer.LikeIsEscapeSupported">
            <summary>
            Should be <c>true</c> for provider with <c>LIKE ... ESCAPE</c> modifier support.
            Default: <c>true</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.BasicSqlOptimizer.LikeCharactersToEscape">
            <summary>
            Characters with special meaning in LIKE predicate (defined by <see cref="P:LinqToDB.SqlProvider.BasicSqlOptimizer.LikeCharactersToEscape"/>) that should be escaped to be used as matched character.
            Default: <c>["%", "_", "?", "*", "#", "[", "]"]</c>.
            </summary>
        </member>
        <member name="M:LinqToDB.SqlProvider.BasicSqlOptimizer.EscapeLikePattern(System.String)">
            <summary>
            Implements LIKE pattern escaping logic for provider without ESCAPE clause support (<see cref="P:LinqToDB.SqlProvider.BasicSqlOptimizer.LikeIsEscapeSupported"/> is <c>false</c>).
            Default logic prefix characters from <see cref="P:LinqToDB.SqlProvider.BasicSqlOptimizer.LikeCharactersToEscape"/> with <see cref="P:LinqToDB.SqlProvider.BasicSqlOptimizer.LikeEscapeCharacter"/>.
            </summary>
            <param name="str">Raw pattern value.</param>
            <returns>Escaped pattern value.</returns>
        </member>
        <member name="M:LinqToDB.SqlProvider.BasicSqlOptimizer.ConvertLikePredicate(LinqToDB.Mapping.MappingSchema,LinqToDB.SqlQuery.SqlPredicate.Like,LinqToDB.SqlQuery.EvaluationContext)">
            <summary>
            LIKE predicate interceptor. Default implementation does nothing.
            </summary>
            <param name="mappingSchema">Current mapping schema.</param>
            <param name="predicate">LIKE predicate.</param>
            <param name="context">Parameters evaluation context for current query.</param>
            <returns>Preprocessed predicate.</returns>
        </member>
        <member name="M:LinqToDB.SqlProvider.BasicSqlOptimizer.ConvertConvertion(LinqToDB.SqlQuery.SqlFunction)">
            <summary>
            Implements <see cref="F:LinqToDB.SqlQuery.PseudoFunctions.CONVERT"/> function converter.
            </summary>
        </member>
        <member name="M:LinqToDB.SqlProvider.BasicSqlOptimizer.CorrectUpdateTable(LinqToDB.SqlQuery.SqlUpdateStatement)">
            <summary>
            Corrects situation when update table is located in JOIN clause.
            Usually it is generated by associations.
            </summary>
            <param name="statement">Statement to examine.</param>
            <returns>Corrected statement.</returns>
        </member>
        <member name="M:LinqToDB.SqlProvider.BasicSqlOptimizer.SeparateDistinctFromPagination(LinqToDB.SqlQuery.SqlStatement,System.Func{LinqToDB.SqlQuery.SelectQuery,System.Boolean})">
            <summary>
            Moves Distinct query into another subquery. Useful when preserving ordering is required, because some providers do not support DISTINCT ORDER BY.
            <code>
            -- before
            SELECT DISTINCT TAKE 10 c1, c2
            FROM A
            ORDER BY c1
            -- after
            SELECT TAKE 10 B.c1, B.c2
            FROM
              (
                SELECT DISTINCT c1, c2
                FROM A
              ) B
            ORDER BY B.c1
            </code>
            </summary>
            <param name="statement">Statement which may contain take/skip and Distinct modifiers.</param>
            <param name="queryFilter">Query filter predicate to determine if query needs processing.</param>
            <returns>The same <paramref name="statement"/> or modified statement when transformation has been performed.</returns>
        </member>
        <member name="M:LinqToDB.SqlProvider.BasicSqlOptimizer.ReplaceTakeSkipWithRowNumber(LinqToDB.SqlQuery.SqlStatement,System.Boolean,System.Boolean)">
            <summary>
            Replaces pagination by Window function ROW_NUMBER().
            </summary>
            <param name="statement">Statement which may contain take/skip modifiers.</param>
            <param name="supportsEmptyOrderBy">Indicates that database supports OVER () syntax.</param>
            <param name="onlySubqueries">Indicates when transformation needed only for subqueries.</param>
            <returns>The same <paramref name="statement"/> or modified statement when transformation has been performed.</returns>
        </member>
        <member name="M:LinqToDB.SqlProvider.BasicSqlOptimizer.ReplaceTakeSkipWithRowNumber``1(``0,LinqToDB.SqlQuery.SqlStatement,System.Func{``0,LinqToDB.SqlQuery.SelectQuery,System.Boolean},System.Boolean)">
            <summary>
            Replaces pagination by Window function ROW_NUMBER().
            </summary>
            <param name="context"><paramref name="predicate"/> context object.</param>
            <param name="statement">Statement which may contain take/skip modifiers.</param>
            <param name="supportsEmptyOrderBy">Indicates that database supports OVER () syntax.</param>
            <param name="predicate">Indicates when the transformation is needed</param>
            <returns>The same <paramref name="statement"/> or modified statement when transformation has been performed.</returns>
        </member>
        <member name="M:LinqToDB.SqlProvider.BasicSqlOptimizer.ReplaceDistinctOrderByWithRowNumber(LinqToDB.SqlQuery.SqlStatement,System.Func{LinqToDB.SqlQuery.SelectQuery,System.Boolean})">
            <summary>
            Alternative mechanism how to prevent loosing sorting in Distinct queries.
            </summary>
            <param name="statement">Statement which may contain Distinct queries.</param>
            <param name="queryFilter">Query filter predicate to determine if query needs processing.</param>
            <returns>The same <paramref name="statement"/> or modified statement when transformation has been performed.</returns>
        </member>
        <member name="F:LinqToDB.SqlProvider.ConvertType.NameToQueryParameter">
            <summary>
            Provided name should be converted to query parameter name.
            For example:
                firstName -> @firstName
            for the following query:
                SELECT * FROM Person WHERE FirstName = @firstName
                                                       ^ here
            </summary>
        </member>
        <member name="F:LinqToDB.SqlProvider.ConvertType.NameToCommandParameter">
            <summary>
            Provided name should be converted to command parameter name.
            For example:
                firstName -> @firstName
            for the following query:
                db.Parameter("@firstName") = "John";
                              ^ here
            </summary>
        </member>
        <member name="F:LinqToDB.SqlProvider.ConvertType.NameToSprocParameter">
            <summary>
            Provided name should be converted to stored procedure parameter name.
            For example:
                firstName -> @firstName
            for the following query:
                db.Parameter("@firstName") = "John";
                              ^ here
            </summary>
        </member>
        <member name="F:LinqToDB.SqlProvider.ConvertType.NameToQueryField">
            <summary>
            Provided name should be converted to query field name.
            For example:
                FirstName -> [FirstName]
            for the following query:
                SELECT [FirstName] FROM Person WHERE ID = 1
                       ^   add   ^
            </summary>
        </member>
        <member name="F:LinqToDB.SqlProvider.ConvertType.NameToQueryFieldAlias">
            <summary>
            Provided name should be converted to query field alias.
            For example:
                ID -> "ID"
            for the following query:
                SELECT "ID" as "ID" FROM Person WHERE "ID" = 1
                               ^  ^ here
            </summary>
        </member>
        <member name="F:LinqToDB.SqlProvider.ConvertType.NameToServer">
            <summary>
            Provided name should be converted to linked server name.
            For example:
                host name\named instance -> [host name\named instance]
            for the following query:
                SELECT * FROM [host name\named instance]..[Person]
                              ^ add      ^
            </summary>
        </member>
        <member name="F:LinqToDB.SqlProvider.ConvertType.NameToDatabase">
            <summary>
            Provided name should be converted to query database.
            For example:
                MyDatabase -> [MyDatabase]
            for the following query:
                SELECT * FROM [MyDatabase]..[Person]
                              ^ add      ^
            </summary>
        </member>
        <member name="F:LinqToDB.SqlProvider.ConvertType.NameToSchema">
            <summary>
            Provided name should be converted to query schema/owner.
            For example:
                dbo -> [dbo]
            for the following query:
                SELECT * FROM [ dbo ].[Person]
                              ^ add ^
            </summary>
        </member>
        <member name="F:LinqToDB.SqlProvider.ConvertType.NameToPackage">
            <summary>
            Provided name should be converted to package/module/library name.
            </summary>
        </member>
        <member name="F:LinqToDB.SqlProvider.ConvertType.NameToProcedure">
            <summary>
            Provided name should be converted to function/procedure name.
            </summary>
        </member>
        <member name="F:LinqToDB.SqlProvider.ConvertType.NameToQueryTable">
            <summary>
            Provided name should be converted to query table name.
            For example:
                Person -> [Person]
            for the following query:
                SELECT * FROM [Person]
                              ^ add  ^
            </summary>
        </member>
        <member name="F:LinqToDB.SqlProvider.ConvertType.NameToQueryTableAlias">
            <summary>
            Provided name should be converted to query table alias.
            For example:
                table1 -> [table1]
            for the following query:
                SELECT * FROM [Person] [table1]
                                       ^ add  ^
            </summary>
        </member>
        <member name="F:LinqToDB.SqlProvider.ConvertType.SprocParameterToName">
            <summary>
            Provided stored procedure parameter name should be converted to name.
            For example:
                @firstName -> firstName
            for the following query:
                db.Parameter("@firstName") = "John";
                              ^ '@' has to be removed
            </summary>
        </member>
        <member name="F:LinqToDB.SqlProvider.ConvertType.ExceptionToErrorNumber">
            <summary>
            Gets error number from a native exception.
            For example:
                SqlException -> SqlException.Number,
              OleDbException -> OleDbException.Errors[0].NativeError
            </summary>
        </member>
        <member name="F:LinqToDB.SqlProvider.ConvertType.ExceptionToErrorMessage">
            <summary>
            Gets error message from a native exception.
            For example:
                SqlException -> SqlException.Message,
              OleDbException -> OleDbException.Errors[0].Message
            </summary>
        </member>
        <member name="F:LinqToDB.SqlProvider.ConvertType.SequenceName">
            <summary>
            Provided name should be converted to sequence name.
            </summary>
        </member>
        <member name="F:LinqToDB.SqlProvider.ConvertType.TriggerName">
            <summary>
            Provided name should be converted to trigger name.
            </summary>
        </member>
        <member name="M:LinqToDB.SqlProvider.ISqlBuilder.BuildObjectName(System.Text.StringBuilder,LinqToDB.SqlQuery.SqlObjectName,LinqToDB.SqlProvider.ConvertType,System.Boolean,LinqToDB.TableOptions)">
            <summary>
            Writes database object name into provided <see cref="P:LinqToDB.SqlProvider.ISqlBuilder.StringBuilder"/> instance.
            </summary>
            <param name="sb">String builder for generated object name.</param>
            <param name="name">Name of database object (e.g. table, view, procedure or function).</param>
            <param name="objectType">Type of database object, used to select proper name converter.</param>
            <param name="escape">If <c>true</c>, apply required escaping to name components. Must be <c>true</c> except rare cases when escaping is not needed.</param>
            <param name="tableOptions">Table options if called for table. Used to properly generate names for temporary tables.</param>
            <returns><paramref name="sb"/> parameter value.</returns>
        </member>
        <member name="M:LinqToDB.SqlProvider.ISqlOptimizer.Finalize(LinqToDB.Mapping.MappingSchema,LinqToDB.SqlQuery.SqlStatement)">
            <summary>
            Finalizes query.
            </summary>
            <returns>Query which is ready for optimization.</returns>
        </member>
        <member name="M:LinqToDB.SqlProvider.ISqlOptimizer.IsParameterDependent(LinqToDB.SqlQuery.SqlStatement)">
            <summary>
            Examine query for parameter dependency.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqToDB.SqlProvider.ISqlOptimizer.ConvertSkipTake(LinqToDB.Mapping.MappingSchema,LinqToDB.SqlQuery.SelectQuery,LinqToDB.SqlProvider.OptimizationContext,LinqToDB.SqlQuery.ISqlExpression@,LinqToDB.SqlQuery.ISqlExpression@)">
            <summary>
            Corrects skip/take for specific DataProvider
            </summary>
        </member>
        <member name="M:LinqToDB.SqlProvider.ISqlOptimizer.ConvertElement(LinqToDB.Mapping.MappingSchema,LinqToDB.SqlQuery.IQueryElement,LinqToDB.SqlProvider.OptimizationContext)">
            <summary>
            Converts query element to specific provider dialect. 
            </summary>
        </member>
        <member name="M:LinqToDB.SqlProvider.JoinOptimizer.GetKeysInternal(LinqToDB.SqlQuery.SqlTableSource)">
            <summary>
            Collects unique keys from different sources.
            </summary>
            <param name="tableSource"></param>
            <returns>List of unique keys</returns>
        </member>
        <member name="T:LinqToDB.SqlProvider.RowFeature">
            <summary>
            ROW constructor (tuple) feature support flags.
            </summary>
        </member>
        <member name="F:LinqToDB.SqlProvider.RowFeature.IsNull">
            <summary>
            Provider supports for IS NULL operator: <c>(1, 2) IS NULL</c>.
            </summary>
        </member>
        <member name="F:LinqToDB.SqlProvider.RowFeature.Equality">
            <summary>
            Provider supports equality (=, &lt;&gt;) operators with tuples.
            </summary>
        </member>
        <member name="F:LinqToDB.SqlProvider.RowFeature.Comparisons">
            <summary>
            Provider supports comparison operators for tuples: &gt;, &gt;=, &lt;&lt;=.
            </summary>
        </member>
        <member name="F:LinqToDB.SqlProvider.RowFeature.Overlaps">
            <summary>
            Provider supports OVERLAPS operator.
            </summary>
        </member>
        <member name="F:LinqToDB.SqlProvider.RowFeature.Between">
            <summary>
            Provider supports BETWEEN operator for tuples.
            </summary>
        </member>
        <member name="F:LinqToDB.SqlProvider.RowFeature.CompareToSelect">
            <summary>
            Provider supports subqueries in tuple constructor: <c>(SELECT 1, 2)</c>.
            </summary>
        </member>
        <member name="F:LinqToDB.SqlProvider.RowFeature.In">
            <summary>
            Provider supports tuples with IN operator: <c>(1, 2) IN ((1, 2), (3, 4))</c>.
            </summary>
        </member>
        <member name="F:LinqToDB.SqlProvider.RowFeature.Update">
            <summary>
            Provider supports tuples in SET clause with non-literal rvalue: <c>UPDATE T SET (COL1, COL2) = (SELECT 1, 2)</c>.
            </summary>
        </member>
        <member name="F:LinqToDB.SqlProvider.RowFeature.UpdateLiteral">
            <summary>
            Provider supports tuples in SET clause with rvalue literal: <c>UPDATE T SET (COL1, COL2) = (1, 2)</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.SqlProviderFlags.IsSybaseBuggyGroupBy">
            <summary>
            Enables fix for incorrect Sybase ASE behavior for following query:
            <code>
            -- will return single record with 0 value (incorrect)
            SELECT 0 as [c1] FROM [Child] [t1] GROUP BY [t1].[ParentID]
            </code>
            Fix enables following SQL generation:
            <code>
            -- works correctly
            SELECT [t1].[ParentID] as [c1] FROM [Child] [t1] GROUP BY [t1].[ParentID]
            </code>
            Default (set by <see cref="T:LinqToDB.DataProvider.DataProviderBase"/>): <c>false</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.SqlProviderFlags.IsParameterOrderDependent">
            <summary>
            Indicates that provider (not database!) uses positional parameters instead of named parameters (parameter values assigned in order they appear in query, not by parameter name).
            Default (set by <see cref="T:LinqToDB.DataProvider.DataProviderBase"/>): <c>false</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.SqlProviderFlags.AcceptsTakeAsParameter">
            <summary>
            Indicates that TAKE/TOP/LIMIT could accept parameter.
            Default (set by <see cref="T:LinqToDB.DataProvider.DataProviderBase"/>): <c>true</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.SqlProviderFlags.AcceptsTakeAsParameterIfSkip">
            <summary>
            Indicates that TAKE/LIMIT could accept parameter only if also SKIP/OFFSET specified.
            Default (set by <see cref="T:LinqToDB.DataProvider.DataProviderBase"/>): <c>false</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.SqlProviderFlags.IsTakeSupported">
            <summary>
            Indicates support for TOP/TAKE/LIMIT paging clause.
            Default (set by <see cref="T:LinqToDB.DataProvider.DataProviderBase"/>): <c>true</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.SqlProviderFlags.IsSkipSupported">
            <summary>
            Indicates support for SKIP/OFFSET paging clause (parameter) without TAKE clause.
            Provider could set this flag even if database not support it if emulates missing functionality.
            E.g. : <c>TAKE [MAX_ALLOWED_VALUE] SKIP skip_value </c>
            Default (set by <see cref="T:LinqToDB.DataProvider.DataProviderBase"/>): <c>true</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.SqlProviderFlags.IsSkipSupportedIfTake">
            <summary>
            Indicates support for SKIP/OFFSET paging clause (parameter) only if also TAKE/LIMIT specified.
            Default (set by <see cref="T:LinqToDB.DataProvider.DataProviderBase"/>): <c>false</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.SqlProviderFlags.TakeHintsSupported">
            <summary>
            Indicates supported TAKE/LIMIT hints.
            Default (set by <see cref="T:LinqToDB.DataProvider.DataProviderBase"/>): <c>null</c> (none).
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.SqlProviderFlags.IsSubQueryTakeSupported">
            <summary>
            Indicates support for paging clause in subquery.
            Default (set by <see cref="T:LinqToDB.DataProvider.DataProviderBase"/>): <c>true</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.SqlProviderFlags.IsSubQueryColumnSupported">
            <summary>
            Indicates support for scalar subquery in select list.
            E.g. <c>SELECT (SELECT TOP 1 value FROM some_table) AS MyColumn, ...</c>
            Default (set by <see cref="T:LinqToDB.DataProvider.DataProviderBase"/>): <c>true</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.SqlProviderFlags.IsSubQueryOrderBySupported">
            <summary>
            Indicates support of <c>ORDER BY</c> clause in sub-queries.
            Default (set by <see cref="T:LinqToDB.DataProvider.DataProviderBase"/>): <c>false</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.SqlProviderFlags.IsCountSubQuerySupported">
            <summary>
            Indicates that database supports count subquery as scalar in column.
            <code>SELECT (SELECT COUNT(*) FROM some_table) FROM ...</code>
            Default (set by <see cref="T:LinqToDB.DataProvider.DataProviderBase"/>): <c>true</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.SqlProviderFlags.IsIdentityParameterRequired">
            <summary>
            Indicates that provider requires explicit output parameter for insert with identity queries to get identity from database.
            Default (set by <see cref="T:LinqToDB.DataProvider.DataProviderBase"/>): <c>false</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.SqlProviderFlags.IsApplyJoinSupported">
            <summary>
            Indicates support for OUTER/CROSS APPLY.
            Default (set by <see cref="T:LinqToDB.DataProvider.DataProviderBase"/>): <c>false</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.SqlProviderFlags.IsInsertOrUpdateSupported">
            <summary>
            Indicates support for single-query insert-or-update operation support.
            Otherwise two separate queries used to emulate operation (update, then insert if nothing found to update).
            Default (set by <see cref="T:LinqToDB.DataProvider.DataProviderBase"/>): <c>true</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.SqlProviderFlags.CanCombineParameters">
            <summary>
            Indicates that provider could share parameter between statements in multi-statement batch.
            Default (set by <see cref="T:LinqToDB.DataProvider.DataProviderBase"/>): <c>true</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.SqlProviderFlags.MaxInListValuesCount">
            <summary>
            Specifies limit of number of values in single <c>IN</c> predicate without splitting it into several IN's.
            Default (set by <see cref="T:LinqToDB.DataProvider.DataProviderBase"/>): <c>int.MaxValue</c> (basically means there is no limit).
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.SqlProviderFlags.IsUpdateSetTableAliasSupported">
            <summary>
            Indicates that SET clause in update statement could use table alias prefix for set columns (lvalue): <c> SET t_alias.field = value</c>.
            Default (set by <see cref="T:LinqToDB.DataProvider.DataProviderBase"/>): <c>true</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.SqlProviderFlags.OutputDeleteUseSpecialTable">
            <summary>
            If <c>true</c>, removed record fields in OUTPUT clause of DELETE statement should be referenced using
            table with special name (e.g. DELETED or OLD). Otherwise fields should be referenced using target table.
            Default (set by <see cref="T:LinqToDB.DataProvider.DataProviderBase"/>): <c>false</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.SqlProviderFlags.OutputInsertUseSpecialTable">
            <summary>
            If <c>true</c>, added record fields in OUTPUT clause of INSERT statement should be referenced using
            table with special name (e.g. INSERTED or NEW). Otherwise fields should be referenced using target table.
            Default (set by <see cref="T:LinqToDB.DataProvider.DataProviderBase"/>): <c>false</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.SqlProviderFlags.OutputUpdateUseSpecialTables">
            <summary>
            If <c>true</c>, OUTPUT clause supports both OLD and NEW data in UPDATE statement using tables with special names.
            Otherwise only current record fields (after update) available using target table.
            Default (set by <see cref="T:LinqToDB.DataProvider.DataProviderBase"/>): <c>false</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.SqlProviderFlags.IsGroupByColumnRequred">
            <summary>
            Provider requires that selected subquery column must be used in group by even for constant column.
            Default (set by <see cref="T:LinqToDB.DataProvider.DataProviderBase"/>): <c>false</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.SqlProviderFlags.IsCrossJoinSupported">
            <summary>
            Indicates support for CROSS JOIN.
            Default (set by <see cref="T:LinqToDB.DataProvider.DataProviderBase"/>): <c>true</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.SqlProviderFlags.IsInnerJoinAsCrossSupported">
            <summary>
            Indicates support for CROSS JOIN emulation using <c>INNER JOIN a ON 1 = 1</c>.
            Currently has no effect if <see cref="P:LinqToDB.SqlProvider.SqlProviderFlags.IsCrossJoinSupported"/> enabled but it is recommended to use proper value.
            Default (set by <see cref="T:LinqToDB.DataProvider.DataProviderBase"/>): <c>true</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.SqlProviderFlags.IsCommonTableExpressionsSupported">
            <summary>
            Indicates support of CTE expressions.
            If provider does not support CTE, unsuported exception will be thrown when using CTE.
            Default (set by <see cref="T:LinqToDB.DataProvider.DataProviderBase"/>): <c>false</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.SqlProviderFlags.IsDistinctOrderBySupported">
            <summary>
            Indicates that database supports and correctly handles DISTINCT queries with ORDER BY over fields missing from projection.
            Otherwise:
            <list>
            <item>if <see cref="F:LinqToDB.Common.Configuration.Linq.KeepDistinctOrdered"/> is set: query will be converted to GROUP BY query</item>
            <item>if <see cref="F:LinqToDB.Common.Configuration.Linq.KeepDistinctOrdered"/> is not set: non-projected columns will be removed from ordering</item>
            </list>
            Default (set by <see cref="T:LinqToDB.DataProvider.DataProviderBase"/>): <c>true</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.SqlProviderFlags.IsOrderByAggregateFunctionsSupported">
            <summary>
            Indicates support for aggregate functions in ORDER BY statement.
            Default (set by <see cref="T:LinqToDB.DataProvider.DataProviderBase"/>): <c>true</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.SqlProviderFlags.IsAllSetOperationsSupported">
            <summary>
            Provider supports EXCEPT ALL, INTERSECT ALL set operators. Otherwise they will be emulated.
            Default (set by <see cref="T:LinqToDB.DataProvider.DataProviderBase"/>): <c>false</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.SqlProviderFlags.IsDistinctSetOperationsSupported">
            <summary>
            Provider supports EXCEPT, INTERSECT set operators. Otherwise it will be emulated.
            Default (set by <see cref="T:LinqToDB.DataProvider.DataProviderBase"/>): <c>true</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.SqlProviderFlags.IsCountDistinctSupported">
            <summary>
            Provider supports COUNT(DISTINCT column) function. Otherwise it will be emulated.
            Default (set by <see cref="T:LinqToDB.DataProvider.DataProviderBase"/>): <c>false</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.SqlProviderFlags.AcceptsOuterExpressionInAggregate">
             <summary>
             Provider supports aggregated expression with Outer reference
             <code>
             SELECT
             (
            		SELECT SUM(inner.FieldX + outer.FieldOuter)
            		FROM table2 inner
             ) AS Sum_Column
             FROM table1 outer
            </code>
             Otherwise aggeragated expression will be wrapped in subquery and aggregate function will be applied to subquery column.
             <code>
             SELECT
             (
            		SELECT
            			SUM(sub.Column)
            		FROM
            			(
            				SELECT inner.FieldX + outer.FieldOuter AS Column
            				FROM table2 inner
            			) sub
             ) AS Sum_Column
             FROM table1 outer
            </code>
             Default (set by <see cref="T:LinqToDB.DataProvider.DataProviderBase"/>): <c>true</c>.
             </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.SqlProviderFlags.IsUpdateFromSupported">
            <summary>
            Indicates support for following UPDATE syntax:
            <code>
            UPDATE A
            SET ...
            FROM B
            </code>
            Default (set by <see cref="T:LinqToDB.DataProvider.DataProviderBase"/>): <c>true</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.SqlProviderFlags.IsNamingQueryBlockSupported">
            <summary>
            Provider supports Naming Query Blocks
            <code>
            QB_NAME(qb)
            </code>
            Default (set by <see cref="T:LinqToDB.DataProvider.DataProviderBase"/>): <c>false</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.SqlProviderFlags.DefaultMultiQueryIsolationLevel">
            <summary>
            Used when there is query which needs several additional database requests for completing query (e.g. eager load or client-side GroupBy).
            Default (set by <see cref="T:LinqToDB.DataProvider.DataProviderBase"/>): <see cref="F:System.Data.IsolationLevel.RepeatableRead"/>.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.SqlProviderFlags.RowConstructorSupport">
            <summary>
            Provider support Row Constructor `(1, 2, 3)` in various positions (flags)
            Default (set by <see cref="T:LinqToDB.DataProvider.DataProviderBase"/>): <see cref="F:LinqToDB.SqlProvider.RowFeature.None"/>.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.SqlProviderFlags.CustomFlags">
            <summary>
            Flags for use by external providers.
            </summary>
        </member>
        <member name="F:LinqToDB.SqlQuery.Precedence.Concatenate">
            <summary>
            This precedence is only for SQLite's || concatenate operator: https://www.sqlite.org/lang_expr.html
            </summary>
        </member>
        <member name="T:LinqToDB.SqlQuery.PseudoFunctions">
            <summary>
            Contains names and create helpers for pseudo-functions, generated by linq2db and then converted to database-specific SQL by provider-specific SQL optimizer.
            </summary>
        </member>
        <member name="F:LinqToDB.SqlQuery.PseudoFunctions.TO_LOWER">
            <summary>
            Function to convert text parameter to lowercased form: <c>TO_LOWER(string)</c>
            </summary>
        </member>
        <member name="F:LinqToDB.SqlQuery.PseudoFunctions.TO_UPPER">
            <summary>
            Function to convert text parameter to uppercased form: <c>TO_UPPER(string)</c>
            </summary>
        </member>
        <member name="F:LinqToDB.SqlQuery.PseudoFunctions.CONVERT">
            <summary>
            Function to convert value from one type to another: <c>CONVERT(to_type, from_type, value) { CanBeNull = value.CanBeNull }</c>
            </summary>
        </member>
        <member name="F:LinqToDB.SqlQuery.PseudoFunctions.TRY_CONVERT">
            <summary>
            Function to convert value from one type to another: <c>TRY_CONVERT(to_type, from_type, value) { CanBeNull = true }</c>.
            Returns NULL on conversion failure.
            </summary>
        </member>
        <member name="F:LinqToDB.SqlQuery.PseudoFunctions.TRY_CONVERT_OR_DEFAULT">
            <summary>
            Function to convert value from one type to another: <c>TRY_CONVERT_OR_DEFAULT(to_type, from_type, value, defaultValue) { CanBeNull = value.CanBeNull || defaultValue.CanBeNull }</c>.
            Returns provided default value on conversion failure.
            </summary>
        </member>
        <member name="F:LinqToDB.SqlQuery.PseudoFunctions.REPLACE">
            <summary>
            Function to replace one text fragment with another in string: <c>REPLACE(value, oldSubstring, newSubstring)</c>
            </summary>
        </member>
        <member name="F:LinqToDB.SqlQuery.PseudoFunctions.REMOVE_CONVERT">
            <summary>
            Function to suppress conversion SQL generation for provided value: <c>REMOVE_CONVERT(value, resultType)</c>
            </summary>
        </member>
        <member name="F:LinqToDB.SqlQuery.PseudoFunctions.COALESCE">
            <summary>
            Function to return first non-null argument: <c>COALESCE(values...)</c>
            </summary>
        </member>
        <member name="M:LinqToDB.SqlQuery.QueryHelper.GetValueConverter(LinqToDB.SqlQuery.ISqlExpression)">
            <summary>
            Returns <see cref="T:LinqToDB.Common.IValueConverter"/> for <paramref name="expr"/>.
            </summary>
            <param name="expr">Tested SQL Expression.</param>
            <returns>Associated converter or <c>null</c>.</returns>
        </member>
        <member name="M:LinqToDB.SqlQuery.QueryHelper.GetColumnDescriptor(LinqToDB.SqlQuery.ISqlExpression)">
            <summary>
            Returns <see cref="T:LinqToDB.Mapping.ColumnDescriptor"/> for <paramref name="expr"/>.
            </summary>
            <param name="expr">Tested SQL Expression.</param>
            <returns>Associated column descriptor or <c>null</c>.</returns>
        </member>
        <member name="M:LinqToDB.SqlQuery.QueryHelper.IsExpression(LinqToDB.SqlQuery.ISqlExpression)">
            <summary>
            Returns true if it is anything except Field or Column.
            </summary>
            <param name="expr">Tested expression</param>
            <returns>true if tested expression is not a Field or Column</returns>
        </member>
        <member name="M:LinqToDB.SqlQuery.QueryHelper.IsConstant(LinqToDB.SqlQuery.ISqlExpression)">
            <summary>
            Returns <c>true</c> if tested expression is constant during query execution (e.g. value or parameter).
            </summary>
            <param name="expr">Tested expression.</param>
            <returns></returns>
        </member>
        <member name="M:LinqToDB.SqlQuery.QueryHelper.EnsureConjunction(LinqToDB.SqlQuery.SqlSearchCondition)">
            <summary>
            Ensures that expression is not A OR B but (A OR B)
            Function makes all needed manipulations for that
            </summary>
            <param name="searchCondition"></param>
        </member>
        <member name="M:LinqToDB.SqlQuery.QueryHelper.EnsureConjunction(LinqToDB.SqlQuery.SqlWhereClause)">
            <summary>
            Ensures that expression is not A OR B but (A OR B)
            Function makes all needed manipulations for that
            </summary>
            <param name="whereClause"></param>
        </member>
        <member name="M:LinqToDB.SqlQuery.QueryHelper.EnumerateAccessibleSources(LinqToDB.SqlQuery.SelectQuery)">
            <summary>
            Enumerates table sources recursively based on joins
            </summary>
            <param name="selectQuery"></param>
            <returns></returns>
        </member>
        <member name="M:LinqToDB.SqlQuery.QueryHelper.TryConvertOrderedDistinctToGroupBy(LinqToDB.SqlQuery.SelectQuery,LinqToDB.SqlProvider.SqlProviderFlags)">
            <summary>
            Converts ORDER BY DISTINCT to GROUP BY equivalent
            </summary>
            <param name="select"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:LinqToDB.SqlQuery.QueryHelper.CanRemoveOrderBy(LinqToDB.SqlQuery.SelectQuery,LinqToDB.SqlProvider.SqlProviderFlags,LinqToDB.SqlQuery.QueryInformation)">
            <summary>
            Detects when we can remove order
            </summary>
            <param name="selectQuery"></param>
            <param name="flags"></param>
            <param name="information"></param>
            <returns></returns>
        </member>
        <member name="M:LinqToDB.SqlQuery.QueryHelper.TryRemoveDistinct(LinqToDB.SqlQuery.SelectQuery,LinqToDB.SqlQuery.QueryInformation)">
            <summary>
            Detects when we can remove order
            </summary>
            <param name="selectQuery"></param>
            <param name="information"></param>
            <returns></returns>
        </member>
        <member name="M:LinqToDB.SqlQuery.QueryHelper.TransformInnerJoinsToWhere(LinqToDB.SqlQuery.SelectQuery)">
            <summary>
            Transforms
              SELECT * FROM A
                INNER JOIN B ON A.ID = B.ID
            to
              SELECT * FROM A, B
              WHERE A.ID = B.ID
            </summary>
            <param name="selectQuery">Input SelectQuery.</param>
            <returns>The same query instance.</returns>
        </member>
        <member name="M:LinqToDB.SqlQuery.QueryHelper.GetUnderlyingExpression(LinqToDB.SqlQuery.ISqlExpression)">
            <summary>
            Unwraps SqlColumn and returns underlying expression.
            </summary>
            <param name="expression"></param>
            <returns>Underlying expression.</returns>
        </member>
        <member name="M:LinqToDB.SqlQuery.QueryHelper.GetUnderlyingField(LinqToDB.SqlQuery.ISqlExpression)">
            <summary>
            Returns SqlField from specific expression. Usually from SqlColumn.
            Complex expressions ignored.
            </summary>
            <param name="expression"></param>
            <returns>Field instance associated with expression</returns>
        </member>
        <member name="M:LinqToDB.SqlQuery.QueryHelper.ExtractField(LinqToDB.SqlQuery.ISqlExpression)">
            <summary>
            Returns SqlField from specific expression. Usually from SqlColumn.
            Conversion is ignored.
            </summary>
            <param name="expression"></param>
            <returns>Field instance associated with expression</returns>
        </member>
        <member name="M:LinqToDB.SqlQuery.QueryHelper.GetUsedSources(LinqToDB.SqlQuery.ISqlExpression,System.Collections.Generic.HashSet{LinqToDB.SqlQuery.ISqlTableSource})">
            <summary>
            Retrieves which sources are used in the <paramref name="root"/>expression
            </summary>
            <param name="root">Expression to analyze.</param>
            <param name="foundSources">Output container for detected sources/</param>
        </member>
        <member name="M:LinqToDB.SqlQuery.QueryHelper.NeedColumnForExpression(LinqToDB.SqlQuery.SelectQuery,LinqToDB.SqlQuery.ISqlExpression,System.Boolean)">
            <summary>
            Returns correct column or field according to nesting.
            </summary>
            <param name="selectQuery">Analyzed query.</param>
            <param name="forExpression">Expression that has to be enveloped by column.</param>
            <param name="inProjection">If 'true', function ensures that column is created. If 'false' it may return Field if it fits to nesting level.</param>
            <returns>Returns Column of Field according to its nesting level. May return null if expression is not valid for <paramref name="selectQuery"/></returns>
        </member>
        <member name="M:LinqToDB.SqlQuery.QueryHelper.WrapQuery``2(``1,``0,System.Func{``1,LinqToDB.SqlQuery.SelectQuery,LinqToDB.SqlQuery.IQueryElement,System.Int32},System.Action{``1,System.Collections.Generic.IReadOnlyList{LinqToDB.SqlQuery.SelectQuery}},System.Boolean,System.Boolean)">
            <summary>
            Wraps tested query in subquery(s).
            Keeps columns count the same. After modification statement is equivalent semantically.
            <code>
            --before
            SELECT c1, c2           -- QA
            FROM A
            -- after (with 2 subqueries)
            SELECT C.c1, C.c2       -- QC
            FROM (
              SELECT B.c1, B.c2     -- QB
              FROM (
                SELECT c1, c2       -- QA
                FROM A
                   ) B
              FROM
                 ) C
            </code>
            </summary>
            <typeparam name="TStatement"></typeparam>
            <typeparam name="TContext">Type of <paramref name="onWrap"/> and <paramref name="wrapTest"/> context object.</typeparam>
            <param name="context"><paramref name="onWrap"/> and <paramref name="wrapTest"/> context object.</param>
            <param name="statement">Statement which may contain tested query</param>
            <param name="wrapTest">Delegate for testing which query needs to be enveloped.
            Result of delegate call tells how many subqueries needed.
            0 - no changes
            1 - one subquery
            N - N subqueries
            </param>
            <param name="onWrap">
            After wrapping query this function called for prcess needed optimizations. Array of queries contains [QC, QB, QA]
            </param>
            <param name="allowMutation">Wrapped query can be not recreated for performance considerations.</param>
            <param name="withStack">Must be set to <c>true</c>, if <paramref name="wrapTest"/> function use 3rd parameter (containing parent element) otherwise it will be always null.</param>
            <returns>The same <paramref name="statement"/> or modified statement when wrapping has been performed.</returns>
        </member>
        <member name="M:LinqToDB.SqlQuery.QueryHelper.WrapQuery``1(``0,LinqToDB.SqlQuery.SelectQuery,System.Boolean)">
            <summary>
            Wraps <paramref name="queryToWrap"/> by another select.
            Keeps columns count the same. After modification statement is equivalent symantically.
            <code>
            --before
            SELECT c1, c2
            FROM A
            -- after
            SELECT B.c1, B.c2
            FROM (
              SELECT c1, c2
              FROM A
                 ) B
            </code>
            </summary>
            <typeparam name="TStatement"></typeparam>
            <param name="statement">Statement which may contain tested query</param>
            <param name="queryToWrap">Tells which select query needs enveloping</param>
            <param name="allowMutation">Wrapped query can be not recreated for performance considerations.</param>
            <returns>The same <paramref name="statement"/> or modified statement when wrapping has been performed.</returns>
        </member>
        <member name="M:LinqToDB.SqlQuery.QueryHelper.WrapQuery``2(``1,``0,System.Func{``1,LinqToDB.SqlQuery.SelectQuery,LinqToDB.SqlQuery.IQueryElement,System.Boolean},System.Action{``1,LinqToDB.SqlQuery.SelectQuery,LinqToDB.SqlQuery.SelectQuery},System.Boolean,System.Boolean)">
            <summary>
            Wraps queries by another select.
            Keeps columns count the same. After modification statement is equivalent symantically.
            </summary>
            <typeparam name="TStatement"></typeparam>
            <typeparam name="TContext">Type of <paramref name="onWrap"/> and <paramref name="wrapTest"/> context object.</typeparam>
            <param name="context"><paramref name="onWrap"/> and <paramref name="wrapTest"/> context object.</param>
            <param name="statement"></param>
            <param name="wrapTest">Delegate for testing when query needs to be wrapped.</param>
            <param name="onWrap">After enveloping query this function called for prcess needed optimizations.</param>
            <param name="allowMutation">Wrapped query can be not recreated for performance considerations.</param>
            <param name="withStack">Must be set to <c>true</c>, if <paramref name="wrapTest"/> function use 3rd parameter (containing parent element) otherwise it will be always null.</param>
            <returns>The same <paramref name="statement"/> or modified statement when wrapping has been performed.</returns>
        </member>
        <member name="M:LinqToDB.SqlQuery.QueryHelper.JoinRemoval``1(``0,LinqToDB.SqlQuery.SqlStatement,System.Func{``0,LinqToDB.SqlQuery.SqlStatement,LinqToDB.SqlQuery.SqlJoinedTable,System.Boolean})">
            <summary>
            Removes Join from query based on <paramref name="joinFunc"/> result.
            </summary>
            <param name="context"><paramref name="joinFunc"/> context object.</param>
            <param name="statement">Source statement.</param>
            <param name="joinFunc"></param>
            <returns>Same or new statement with removed joins.</returns>
        </member>
        <member name="M:LinqToDB.SqlQuery.QueryHelper.MoveOrderByUp(LinqToDB.SqlQuery.SelectQuery[])">
            <summary>
            Helper function for moving Ordering up in select tree.
            </summary>
            <param name="queries">Array of queries</param>
        </member>
        <member name="M:LinqToDB.SqlQuery.QueryHelper.CollectUniqueKeys(LinqToDB.SqlQuery.SqlTableSource,System.Collections.Generic.List{System.Collections.Generic.IList{LinqToDB.SqlQuery.ISqlExpression}})">
            <summary>
            Collects unique keys from different sources.
            </summary>
            <param name="tableSource"></param>
            <param name="knownKeys">List with found keys.</param>
        </member>
        <member name="M:LinqToDB.SqlQuery.QueryHelper.CollectUniqueKeys(LinqToDB.SqlQuery.ISqlTableSource,System.Boolean,System.Collections.Generic.List{System.Collections.Generic.IList{LinqToDB.SqlQuery.ISqlExpression}})">
            <summary>
            Collects unique keys from different sources.
            </summary>
            <param name="tableSource"></param>
            <param name="includeDistinct">Flag to include Distinct as unique key.</param>
            <param name="knownKeys">List with found keys.</param>
        </member>
        <member name="T:LinqToDB.SqlQuery.QueryInformation">
            <summary>
            This is internal API and is not intended for use by Linq To DB applications.
            It may change or be removed without further notice.
            </summary>
        </member>
        <member name="M:LinqToDB.SqlQuery.QueryInformation.#ctor(LinqToDB.SqlQuery.SelectQuery)">
            <summary>
            This is internal API and is not intended for use by Linq To DB applications.
            It may change or be removed without further notice.
            </summary>
        </member>
        <member name="M:LinqToDB.SqlQuery.QueryInformation.GetParentQuery(LinqToDB.SqlQuery.SelectQuery)">
            <summary>
            Returns parent query if query is subquery for select
            </summary>
            <param name="selectQuery"></param>
            <returns></returns>
        </member>
        <member name="M:LinqToDB.SqlQuery.QueryInformation.GetHierarchyInfo(LinqToDB.SqlQuery.SelectQuery)">
            <summary>
            Returns HirarchyInfo for specific selectQuery
            </summary>
            <param name="selectQuery"></param>
            <returns></returns>
        </member>
        <member name="M:LinqToDB.SqlQuery.QueryInformation.Resync">
            <summary>
            Resync tree info. Can be called also during enumeration.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlQuery.SelectQuery.DoNotRemove">
            <summary>
            Gets or sets flag when sub-query can be removed during optimization.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlQuery.SelectQuery.UniqueKeys">
            <summary>
            Contains list of columns that build unique key for this sub-query.
            Used in JoinOptimizer for safely removing sub-query from resulting SQL.
            </summary>
        </member>
        <member name="T:LinqToDB.SqlQuery.SqlExtensions">
            <summary>
            This is internal API and is not intended for use by Linq To DB applications.
            It may change or be removed without further notice.
            </summary>
        </member>
        <member name="M:LinqToDB.SqlQuery.SqlExtensions.IsInsert(LinqToDB.SqlQuery.SqlStatement)">
            <summary>
            This is internal API and is not intended for use by Linq To DB applications.
            It may change or be removed without further notice.
            </summary>
        </member>
        <member name="M:LinqToDB.SqlQuery.SqlExtensions.NeedsIdentity(LinqToDB.SqlQuery.SqlStatement)">
            <summary>
            This is internal API and is not intended for use by Linq To DB applications.
            It may change or be removed without further notice.
            </summary>
        </member>
        <member name="M:LinqToDB.SqlQuery.SqlExtensions.IsUpdate(LinqToDB.SqlQuery.SqlStatement)">
            <summary>
            This is internal API and is not intended for use by Linq To DB applications.
            It may change or be removed without further notice.
            </summary>
        </member>
        <member name="M:LinqToDB.SqlQuery.SqlExtensions.IsDelete(LinqToDB.SqlQuery.SqlStatement)">
            <summary>
            This is internal API and is not intended for use by Linq To DB applications.
            It may change or be removed without further notice.
            </summary>
        </member>
        <member name="M:LinqToDB.SqlQuery.SqlExtensions.GetIdentityField(LinqToDB.SqlQuery.SqlStatement)">
            <summary>
            This is internal API and is not intended for use by Linq To DB applications.
            It may change or be removed without further notice.
            </summary>
        </member>
        <member name="M:LinqToDB.SqlQuery.SqlExtensions.GetInsertClause(LinqToDB.SqlQuery.SqlStatement)">
            <summary>
            This is internal API and is not intended for use by Linq To DB applications.
            It may change or be removed without further notice.
            </summary>
        </member>
        <member name="M:LinqToDB.SqlQuery.SqlExtensions.RequireInsertClause(LinqToDB.SqlQuery.SqlStatement)">
            <summary>
            This is internal API and is not intended for use by Linq To DB applications.
            It may change or be removed without further notice.
            </summary>
        </member>
        <member name="M:LinqToDB.SqlQuery.SqlExtensions.GetUpdateClause(LinqToDB.SqlQuery.SqlStatement)">
            <summary>
            This is internal API and is not intended for use by Linq To DB applications.
            It may change or be removed without further notice.
            </summary>
        </member>
        <member name="M:LinqToDB.SqlQuery.SqlExtensions.RequireUpdateClause(LinqToDB.SqlQuery.SqlStatement)">
            <summary>
            This is internal API and is not intended for use by Linq To DB applications.
            It may change or be removed without further notice.
            </summary>
        </member>
        <member name="M:LinqToDB.SqlQuery.SqlExtensions.GetOutputClause(LinqToDB.SqlQuery.SqlStatement)">
            <summary>
            This is internal API and is not intended for use by Linq To DB applications.
            It may change or be removed without further notice.
            </summary>
        </member>
        <member name="M:LinqToDB.SqlQuery.SqlExtensions.EnsureQuery(LinqToDB.SqlQuery.SqlStatement)">
            <summary>
            This is internal API and is not intended for use by Linq To DB applications.
            It may change or be removed without further notice.
            </summary>
        </member>
        <member name="T:LinqToDB.SqlQuery.SqlObjectName">
            <summary>
            Represents full name of database object (e.g. table, view, function or procedure) split into components.
            </summary>
            <param name="Name">Name of object in current scope (e.g. in schema or package).</param>
            <param name="Server">Database server or linked server name.</param>
            <param name="Database">Database/catalog name.</param>
            <param name="Schema">Schema/user name.</param>
            <param name="Package">Package/module/library name (used with functions and stored procedures).</param>
        </member>
        <member name="M:LinqToDB.SqlQuery.SqlObjectName.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Represents full name of database object (e.g. table, view, function or procedure) split into components.
            </summary>
            <param name="Name">Name of object in current scope (e.g. in schema or package).</param>
            <param name="Server">Database server or linked server name.</param>
            <param name="Database">Database/catalog name.</param>
            <param name="Schema">Schema/user name.</param>
            <param name="Package">Package/module/library name (used with functions and stored procedures).</param>
        </member>
        <member name="P:LinqToDB.SqlQuery.SqlObjectName.Name">
            <summary>Name of object in current scope (e.g. in schema or package).</summary>
        </member>
        <member name="P:LinqToDB.SqlQuery.SqlObjectName.Server">
            <summary>Database server or linked server name.</summary>
        </member>
        <member name="P:LinqToDB.SqlQuery.SqlObjectName.Database">
            <summary>Database/catalog name.</summary>
        </member>
        <member name="P:LinqToDB.SqlQuery.SqlObjectName.Schema">
            <summary>Schema/user name.</summary>
        </member>
        <member name="P:LinqToDB.SqlQuery.SqlObjectName.Package">
            <summary>Package/module/library name (used with functions and stored procedures).</summary>
        </member>
        <member name="M:LinqToDB.SqlQuery.SqlSelectClause.AddOrFindColumn(LinqToDB.SqlQuery.SqlColumn)">
            <summary>
            Adds column if it is not added yet.
            </summary>
            <returns>Returns index of column in Columns list.</returns>
        </member>
        <member name="P:LinqToDB.SqlQuery.SqlStatement.ParentStatement">
            <summary>
            Used internally for SQL Builder
            </summary>
        </member>
        <member name="M:LinqToDB.SqlQuery.SqlStatement.IsDependedOn(LinqToDB.SqlQuery.SqlTable)">
            <summary>
            Indicates when optimizer can not remove reference for particular table
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="P:LinqToDB.SqlQuery.SqlTable.Expression">
            <summary>
            Custom SQL expression format string (used together with <see cref="P:LinqToDB.SqlQuery.SqlTable.TableArguments"/>) to
            transform <see cref="T:LinqToDB.SqlQuery.SqlTable"/> to custom table expression.
            Arguments:
            <list type="bullet">
            <item>{0}: <see cref="P:LinqToDB.SqlQuery.SqlTable.TableName"/></item>
            <item>{1}: <see cref="P:LinqToDB.SqlQuery.SqlTable.Alias"/></item>
            <item>{2+}: arguments from <see cref="P:LinqToDB.SqlQuery.SqlTable.TableArguments"/> (with index adjusted by 2)</item>
            </list>
            </summary>
        </member>
        <member name="P:LinqToDB.SqlQuery.SqlTableSource.UniqueKeys">
            <summary>
            Contains list of columns that build unique key for <see cref="P:LinqToDB.SqlQuery.SqlTableSource.Source"/>.
            Used in JoinOptimizer for safely removing sub-query from resulting SQL.
            </summary>
        </member>
        <member name="F:LinqToDB.SqlQuery.SqlTableType.SystemTable">
            <summary>
            Special context-specific table with fixed name.
            E.g. NEW/OLD, INSERTED/DELETED tables, available in OUTPUT/RETURNING clause contexts.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlQuery.SqlValue.Value">
            <summary>
            Provider specific value
            </summary>
        </member>
        <member name="M:LinqToDB.SqlQuery.SqlValuesTable.#ctor(LinqToDB.SqlQuery.ISqlExpression)">
            <summary>
            To create new instance in build context.
            </summary>
            <param name="source">Expression, that contains enumerable source.</param>
        </member>
        <member name="M:LinqToDB.SqlQuery.SqlValuesTable.#ctor(LinqToDB.SqlQuery.ISqlExpression,System.Collections.Generic.List{System.Func{System.Object,LinqToDB.SqlQuery.ISqlExpression}},System.Collections.Generic.IEnumerable{LinqToDB.SqlQuery.SqlField},System.Collections.Generic.IReadOnlyList{LinqToDB.SqlQuery.ISqlExpression[]})">
            <summary>
            Constructor for convert visitor.
            </summary>
        </member>
        <member name="M:LinqToDB.SqlQuery.SqlValuesTable.#ctor(LinqToDB.SqlQuery.SqlField[],System.Reflection.MemberInfo[],System.Collections.Generic.IReadOnlyList{LinqToDB.SqlQuery.ISqlExpression[]})">
            <summary>
            Constructor for remote context.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlQuery.SqlValuesTable.Source">
            <summary>
            Source value expression.
            </summary>
        </member>
        <member name="P:LinqToDB.SqlQuery.SqlValuesTable.FieldsLookup">
            <summary>
            Used only during build.
            </summary>
        </member>
        <member name="T:LinqToDB.Sql.IsNullableType">
            <summary>
            Provides information when function or expression could return null.
            </summary>
        </member>
        <member name="F:LinqToDB.Sql.IsNullableType.Undefined">
            <summary>
            Nullability not specified, and other sources (like <see cref="P:LinqToDB.Sql.ExpressionAttribute.CanBeNull"/> or return type)
            will be used to identify nullability.
            </summary>
        </member>
        <member name="F:LinqToDB.Sql.IsNullableType.Nullable">
            <summary>
            Expression could always return NULL.
            </summary>
        </member>
        <member name="F:LinqToDB.Sql.IsNullableType.NotNullable">
            <summary>
            Expression never returns NULL.
            </summary>
        </member>
        <member name="F:LinqToDB.Sql.IsNullableType.IfAnyParameterNullable">
            <summary>
            Expression could return NULL if at least one parameter of expression could contain NULL.
            </summary>
        </member>
        <member name="F:LinqToDB.Sql.IsNullableType.SameAsFirstParameter">
            <summary>
            Expression could return NULL if first parameter of expression could contain NULL.
            </summary>
        </member>
        <member name="F:LinqToDB.Sql.IsNullableType.SameAsSecondParameter">
            <summary>
            Expression could return NULL if second parameter of expression could contain NULL.
            </summary>
        </member>
        <member name="F:LinqToDB.Sql.IsNullableType.SameAsThirdParameter">
            <summary>
            Expression could return NULL if third parameter of expression could contain NULL.
            </summary>
        </member>
        <member name="F:LinqToDB.Sql.IsNullableType.SameAsLastParameter">
            <summary>
            Expression could return NULL if last parameter of expression could contain NULL.
            </summary>
        </member>
        <member name="M:LinqToDB.Sql.Collate(System.String,System.String)">
            <summary>
            Apply collation to a string expression.
            </summary>
            <param name="expr">Expression to apply collation to.</param>
            <param name="collation">Collation to apply.</param>
            <returns>Expression with specified collation.</returns>
            <remarks>Server-side only, does not perform validation on collation name beyond simple valid character checks.</remarks>
        </member>
        <member name="M:LinqToDB.Sql.NamedCollationBuilder.ValidateCollation(System.String)">
            <summary>
            Simple check for invalid collation names.
            </summary>
            <param name="collation">Collation name to check.</param>
            <returns>False if invalid characters found, else true.</returns>
        </member>
        <member name="M:LinqToDB.Sql.AllColumns">
            <summary>
            Generates '*'.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqToDB.Sql.Default``1">
            <summary>
            Generates 'DEFAULT' keyword, usable in inserts.
            </summary>
        </member>
        <member name="M:LinqToDB.Sql.AsSql``1(``0)">
            <summary>
            Enforces generating SQL even if an expression can be calculated locally.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">Expression to generate SQL.</param>
            <returns>Returns 'obj'.</returns>
        </member>
        <member name="M:LinqToDB.Sql.Property``1(System.Object,System.String)">
            <summary>
            Allows access to entity property via name. Property can be dynamic or non-dynamic.
            </summary>
            <typeparam name="T">Property type.</typeparam>
            <param name="entity">The entity.</param>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
            <exception cref="T:LinqToDB.Linq.LinqException">'Property' is only server-side method.</exception>
        </member>
        <member name="M:LinqToDB.Sql.Alias``1(``0,System.String)">
            <summary>
            Used internally for keeping Alias information with expression.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:LinqToDB.Sql.TryConvert``2(``0,System.Nullable{``1})">
            <summary>
            Performs value conversion to specified type. If conversion failed, returns <c>null</c>.
            Supported databases:
            <list type="bullet">
            <item>SQL Server 2012 or newer</item>
            <item>Oracle 12.2 or newer (not all conversions possible, check Oracle's documentation on CAST expression)</item>
            </list>
            </summary>
            <typeparam name="TFrom">Source value type.</typeparam>
            <typeparam name="TTo">Target value type.</typeparam>
            <param name="value">Value to convert.</param>
            <param name="_">Unused. Added to support method overloads.</param>
            <returns>Value, converted to target type or <c>null</c> if conversion failed.</returns>
        </member>
        <member name="M:LinqToDB.Sql.TryConvert``2(``0,``1)">
            <summary>
            Performs value conversion to specified type. If conversion failed, returns <c>null</c>.
            Supported databases:
            <list type="bullet">
            <item>SQL Server 2012 or newer</item>
            <item>Oracle 12.2 or newer (not all conversions possible, check Oracle's documentation on CAST expression)</item>
            </list>
            </summary>
            <typeparam name="TFrom">Source value type.</typeparam>
            <typeparam name="TTo">Target value type.</typeparam>
            <param name="value">Value to convert.</param>
            <param name="_">Unused. Added to support method overloads.</param>
            <returns>Value, converted to target type or <c>null</c> if conversion failed.</returns>
        </member>
        <member name="M:LinqToDB.Sql.TryConvertOrDefault``2(``0,System.Nullable{``1})">
            <summary>
            Performs value conversion to specified type. If conversion failed, returns value, specified by <paramref name="defaultValue"/> parameter.
            Supported databases:
            <list type="bullet">
            <item>Oracle 12.2 or newer (not all conversions possible, check Oracle's documentation on CAST expression)</item>
            </list>
            </summary>
            <typeparam name="TFrom">Source value type.</typeparam>
            <typeparam name="TTo">Target value type.</typeparam>
            <param name="value">Value to convert.</param>
            <param name="defaultValue">Value, returned when conversion failed.</param>
            <returns>Value, converted to target type or <paramref name="defaultValue"/> if conversion failed.</returns>
        </member>
        <member name="M:LinqToDB.Sql.TryConvertOrDefault``2(``0,``1)">
            <summary>
            Performs value conversion to specified type. If conversion failed, returns value, specified by <paramref name="defaultValue"/> parameter.
            Supported databases:
            <list type="bullet">
            <item>Oracle 12.2 or newer (not all conversions possible, check Oracle's documentation on CAST expression)</item>
            </list>
            </summary>
            <typeparam name="TFrom">Source value type.</typeparam>
            <typeparam name="TTo">Target value type.</typeparam>
            <param name="value">Value to convert.</param>
            <param name="defaultValue">Value, returned when conversion failed.</param>
            <returns>Value, converted to target type or <paramref name="defaultValue"/> if conversion failed.</returns>
        </member>
        <member name="M:LinqToDB.Sql.CurrentIdentity(System.String)">
            <summary>
            Returns last identity value (current value) for specific table.
            </summary>
        </member>
        <member name="M:LinqToDB.Sql.IdentityStep(System.String)">
            <summary>
            Returns identity step for specific table.
            </summary>
        </member>
        <member name="F:LinqToDB.Sql.DateParts.Week">
             <summary>
             This date part behavior depends on used database and also depends on where if calculated - in C# code or in database.
             Eeach database could have own week numbering logic, see notes below.
            
             Current implementation uses following schemas per-provider:
             C# evaluation:
             <para>
             <c>CultureInfo.CurrentCulture.Calendar.GetWeekOfYear(date.Value, CalendarWeekRule.FirstDay, DayOfWeek.Sunday)</c>
             </para>
             Databases:
             <list type="bullet">
             <item>US numbering schema used by:
             <list type="bullet">
             <item>MS Access</item>
             <item>SQL CE</item>
             <item>SQL Server</item>
             <item>SAP/Sybase ASE</item>
             <item>Informix</item>
             </list>
             </item>
             <item>US 0-based numbering schema used by MySQL database</item>
             <item>ISO numbering schema with incorrect numbering of first week used by SAP HANA database</item>
             <item>ISO numbering schema with proper numbering of first week used by:
             <list type="bullet">
             <item>Firebird</item>
             <item>PostgreSQL</item>
             <item>ClickHouse</item>
             </list>
             </item>
             <item>Primitive (each 7 days counted as week) numbering schema:
             <list type="bullet">
             <item>DB2</item>
             <item>Oracle</item>
             </list>
             </item>
             <item>SQLite numbering logic cannot be classified by human being</item>
             </list>
             </summary>
        </member>
        <member name="T:LinqToDB.Sql.ExpressionAttribute">
            <summary>
            An Attribute that allows custom Expressions to be defined
            for a Method used within a Linq Expression.
            </summary>
        </member>
        <member name="M:LinqToDB.Sql.ExpressionAttribute.#ctor(System.String)">
            <summary>
            Creates an Expression that will be used in SQL,
            in place of the method call decorated by this attribute.
            </summary>
            <param name="expression">The SQL expression. Use {0},{1}... for parameters given to the method call.</param>
        </member>
        <member name="M:LinqToDB.Sql.ExpressionAttribute.#ctor(System.String,System.Int32[])">
            <summary>
            Creates an Expression that will be used in SQL,
            in place of the method call decorated by this attribute.
            </summary>
            <param name="expression">The SQL expression. Use {0},{1}... for parameters given to the method call.</param>
            <param name="argIndices">Used for setting the order of the method arguments
            being passed into the function.</param>
        </member>
        <member name="M:LinqToDB.Sql.ExpressionAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates an Expression that will be used in SQL,
            for the <see cref="T:LinqToDB.ProviderName"/> specified,
            in place of the method call decorated by this attribute.
            </summary>
            <param name="expression">The SQL expression. Use {0},{1}... for parameters given to the method call.</param>
            <param name="configuration">The Database configuration for which this Expression will be used.</param>
        </member>
        <member name="M:LinqToDB.Sql.ExpressionAttribute.#ctor(System.String,System.String,System.Int32[])">
            <summary>
            Creates an Expression that will be used in SQL,
            for the <see cref="T:LinqToDB.ProviderName"/> specified,
            in place of the method call decorated by this attribute.
            </summary>
            <param name="expression">The SQL expression. Use {0},{1}... for parameters given to the method call.</param>
            <param name="configuration">The Database configuration for which this Expression will be used.</param>
            <param name="argIndices">Used for setting the order of the method arguments
            being passed into the function.</param>
        </member>
        <member name="P:LinqToDB.Sql.ExpressionAttribute.Expression">
            <summary>
            The expression to be used in building the SQL.
            </summary>
        </member>
        <member name="P:LinqToDB.Sql.ExpressionAttribute.ArgIndices">
            <summary>
            The order of Arguments to be passed
            into the function from the method call.
            </summary>
        </member>
        <member name="P:LinqToDB.Sql.ExpressionAttribute.Precedence">
            <summary>
            Determines the priority of the expression in evaluation.
            Refer to <see cref="T:LinqToDB.SqlQuery.Precedence"/>.
            </summary>
        </member>
        <member name="P:LinqToDB.Sql.ExpressionAttribute.Configuration">
            <summary>
            If <c>null</c>, this will be treated as the default
            evaluation for the expression. If set to a <see cref="T:LinqToDB.ProviderName"/>,
            It will only be used for that provider configuration.
            </summary>
        </member>
        <member name="P:LinqToDB.Sql.ExpressionAttribute.ServerSideOnly">
            <summary>
            If <c>true</c> The expression will only be evaluated on the
            database server. If it cannot, an exception will
            be thrown.
            </summary>
        </member>
        <member name="P:LinqToDB.Sql.ExpressionAttribute.PreferServerSide">
            <summary>
            If <c>true</c> a greater effort will be made to execute
            the expression on the DB server instead of in .NET.
            </summary>
        </member>
        <member name="P:LinqToDB.Sql.ExpressionAttribute.InlineParameters">
            <summary>
            If <c>true</c> inline all parameters passed into the expression.
            </summary>
        </member>
        <member name="P:LinqToDB.Sql.ExpressionAttribute.ExpectExpression">
            <summary>
            Used internally by <see cref="T:LinqToDB.Sql.ExtensionAttribute"/>.
            </summary>
        </member>
        <member name="P:LinqToDB.Sql.ExpressionAttribute.IsPredicate">
            <summary>
            If <c>true</c> the expression is treated as a Predicate
            And when used in a Where clause will not have
            an added comparison to 'true' in the database.
            </summary>
        </member>
        <member name="P:LinqToDB.Sql.ExpressionAttribute.IsAggregate">
            <summary>
            If <c>true</c>, this expression represents an aggregate result
            Examples would be SUM(),COUNT().
            </summary>
        </member>
        <member name="P:LinqToDB.Sql.ExpressionAttribute.IsWindowFunction">
            <summary>
            If <c>true</c>, this expression represents a Window Function
            Examples would be SUM() OVER(), COUNT() OVER().
            </summary>
        </member>
        <member name="P:LinqToDB.Sql.ExpressionAttribute.IsPure">
            <summary>
            If <c>true</c>, it notifies SQL Optimizer that expression returns same result if the same values/parameters are used. It gives optimizer additional information how to simplify query.
            For example ORDER BY PureFunction("Str") can be removed because PureFunction function uses constant value.
            <example>
            For example Random function is NOT Pure function because it returns different result all time.
            But expression <see cref="P:LinqToDB.Sql.CurrentTimestamp"/> is Pure in case of executed query.
            <see cref="M:LinqToDB.Sql.DateAdd(LinqToDB.Sql.DateParts,System.Nullable{System.Double},System.Nullable{System.DateTime})"/> is also Pure function because it returns the same result with the same parameters.
            </example>
            </summary>
        </member>
        <member name="P:LinqToDB.Sql.ExpressionAttribute.IsNullable">
            <summary>
            Used to determine whether the return type should be treated as
            something that can be null If CanBeNull is not explicitly set.
            <para>Default is <see cref="F:LinqToDB.Sql.IsNullableType.Undefined"/>,
            which will be treated as <c>true</c></para>
            </summary>
        </member>
        <member name="P:LinqToDB.Sql.ExpressionAttribute.IgnoreGenericParameters">
            <summary>
            if <c>true</c>, do not generate generic parameters.
            </summary>
        </member>
        <member name="P:LinqToDB.Sql.ExpressionAttribute.CanBeNull">
            <summary>
            If <c>true</c>, result can be null
            </summary>
        </member>
        <member name="M:LinqToDB.Sql.AliasExpr">
            <summary>
            Useful for specifying place of alias when using <see cref="M:LinqToDB.DataExtensions.FromSql``1(LinqToDB.IDataContext,LinqToDB.Common.RawSqlString,System.Object[])"/> method.
            </summary>
            <remarks>
            	If <see cref="M:LinqToDB.DataExtensions.FromSql``1(LinqToDB.IDataContext,LinqToDB.Common.RawSqlString,System.Object[])"/> contains at least one <see cref="M:LinqToDB.Sql.AliasExpr"/>,
            	automatic alias for the query will be not generated.
            </remarks>
            <returns>ISqlExpression which is Alias Placeholder.</returns>
            <example>
            The following <see cref="M:LinqToDB.DataExtensions.FromSql``1(LinqToDB.IDataContext,LinqToDB.Common.RawSqlString,System.Object[])"/> calls are equivalent.
            <code>
            db.FromSql&lt;int&gt;($"select 1 as value from TableA {Sql.AliasExpr()}")
            db.FromSql&lt;int&gt;($"select 1 as value from TableA")
            </code>
            </example>
        </member>
        <member name="P:LinqToDB.Sql.ExtensionAttribute.ChainPrecedence">
            <summary>
            Defines in which order process extensions. Items will be ordered Descending.
            </summary>
        </member>
        <member name="T:LinqToDB.Sql.FunctionAttribute">
            <summary>
            Defines an SQL server-side Function with parameters passed in.
            </summary>
        </member>
        <member name="M:LinqToDB.Sql.FunctionAttribute.#ctor">
            <summary>
            Defines an SQL Function, which
            shall be the same as the name as the function called.
            </summary>
        </member>
        <member name="M:LinqToDB.Sql.FunctionAttribute.#ctor(System.String)">
            <summary>
            Defines an SQL function with the given name.
            </summary>
            <param name="name">The name of the function. no parenthesis () should be used.</param>
        </member>
        <member name="M:LinqToDB.Sql.FunctionAttribute.#ctor(System.String,System.Int32[])">
            <summary>
            Defines an SQL function with the given name.
            </summary>
            <param name="name">The name of the function. no parenthesis () should be used.</param>
            <param name="argIndices">Used for setting the order of the method arguments
            being passed into the function.</param>
        </member>
        <member name="M:LinqToDB.Sql.FunctionAttribute.#ctor(System.String,System.String)">
            <summary>
            Defines an SQL function with the given name,
            for the <see cref="T:LinqToDB.ProviderName"/> given.
            </summary>
            <param name="configuration">The Database configuration for which this Expression will be used.</param>
            <param name="name">The name of the function. no parenthesis () should be used.</param>
        </member>
        <member name="M:LinqToDB.Sql.FunctionAttribute.#ctor(System.String,System.String,System.Int32[])">
            <summary>
            Defines an SQL function with the given name,
            for the <see cref="T:LinqToDB.ProviderName"/> given.
            </summary>
            <param name="configuration">The Database configuration for which this Expression will be used.</param>
            <param name="name">The name of the function. no parenthesis () should be used.</param>
            <param name="argIndices">Used for setting the order of the method arguments
            being passed into the function.</param>
        </member>
        <member name="P:LinqToDB.Sql.FunctionAttribute.Name">
            <summary>
            The name of the Database Function
            </summary>
        </member>
        <member name="T:LinqToDB.Sql.PropertyAttribute">
            <summary>
            An attribute used to define a static value or
            a Database side property/method that takes no parameters.
            </summary>
        </member>
        <member name="M:LinqToDB.Sql.PropertyAttribute.#ctor">
            <summary>
            Creates a property to be used in SQL
            The name of the Property/Method will be used.
            </summary>
        </member>
        <member name="M:LinqToDB.Sql.PropertyAttribute.#ctor(System.String)">
            <summary>
            Creates a Property to be used in SQL.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:LinqToDB.Sql.PropertyAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates a property to be used in SQL
            for the given <see cref="T:LinqToDB.ProviderName"/>.
            </summary>
            <param name="configuration">The <see cref="T:LinqToDB.ProviderName"/>
            the property will be used under.</param>
            <param name="name">The name of the property.</param>
        </member>
        <member name="P:LinqToDB.Sql.PropertyAttribute.Name">
            <summary>
            The name of the Property.
            </summary>
        </member>
        <member name="T:LinqToDB.Sql.QueryExtensionAttribute">
            <summary>
            Defines custom query extension builder.
            </summary>
        </member>
        <member name="P:LinqToDB.Sql.QueryExtensionAttribute.ExtensionBuilderType">
            <summary>
            Instance of <see cref="T:LinqToDB.SqlQuery.ISqlExtensionBuilder"/>.
            </summary>
        </member>
        <member name="M:LinqToDB.Sql.ConcatStrings(System.String,System.String[])">
            <summary>
            Concatenates NOT NULL strings, using the specified separator between each member.
            </summary>
            <param name="separator">The string to use as a separator. <paramref name="separator" /> is included in the returned string only if <paramref name="arguments" /> has more than one element.</param>
            <param name="arguments">A collection that contains the strings to concatenate.</param>
            <returns></returns>
        </member>
        <member name="F:LinqToDB.AnalyticFunctions.FunctionToken">
            <summary>
            Token name for analytic function. Used for resolving method chain.
            </summary>
        </member>
        <member name="T:LinqToDB.TableExtensions">
            <summary>
            Contains extension methods for LINQ queries.
            </summary>
        </member>
        <member name="M:LinqToDB.TableExtensions.IsTemporary``1(LinqToDB.ITable{``0},System.Boolean)">
            <summary>
            Overrides IsTemporary flag for the current table. This call will have effect only for databases that support
            temporary tables.
            <para>Supported by: DB2, Oracle, PostgreSQL, Informix, SQL Server, Sybase ASE.</para>
            </summary>
            <typeparam name="T">Table record mapping class.</typeparam>
            <param name="table">Table-like query source.</param>
            <param name="isTemporary">If true, the current tables will handled as a temporary table.</param>
            <returns>Table-like query source with new owner/schema name.</returns>
        </member>
        <member name="M:LinqToDB.TableExtensions.IsTemporary``1(LinqToDB.ITable{``0})">
            <summary>
            Overrides IsTemporary flag for the current table. This call will have effect only for databases that support
            temporary tables.
            <para>Supported by: DB2, Oracle, PostgreSQL, Informix, SQL Server, Sybase ASE.</para>
            </summary>
            <typeparam name="T">Table record mapping class.</typeparam>
            <param name="table">Table-like query source.</param>
            <returns>Table-like query source with new owner/schema name.</returns>
        </member>
        <member name="M:LinqToDB.TableExtensions.TableOptions``1(LinqToDB.ITable{``0},LinqToDB.TableOptions)">
            <summary>
            Overrides TableOptions value for the current table. This call will have effect only for databases that support
            the options.
            </summary>
            <typeparam name="T">Table record mapping class.</typeparam>
            <param name="table">Table-like query source.</param>
            <param name="options"><see cref="M:LinqToDB.TableExtensions.TableOptions``1(LinqToDB.ITable{``0},LinqToDB.TableOptions)"/> value.</param>
            <returns>Table-like query source with new owner/schema name.</returns>
        </member>
        <member name="M:LinqToDB.TableExtensions.GetTableName``1(LinqToDB.ITable{``0})">
            <summary>
            Builds table name for <paramref name="table"/>.
            </summary>
            <typeparam name="T">Table record type.</typeparam>
            <param name="table">Table instance.</param>
            <returns>Table name.</returns>
        </member>
        <member name="T:LinqToDB.TableOptions">
            <summary>
            Provides table mapping flags to specify temporary table kind if mapped table is temporary table
            and Create/Drop Table API behavior when target table exists/not exists.
            </summary>
        </member>
        <member name="F:LinqToDB.TableOptions.CreateIfNotExists">
            <summary>
            IF NOT EXISTS option of the CREATE statement. This option will have effect only for databases that support the option.
            <para>Supported by: DB2, Firebird, Informix, MySql, Oracle, PostgreSQL, SQLite, SQL Server, Sybase ASE.</para>
            </summary>
        </member>
        <member name="F:LinqToDB.TableOptions.DropIfExists">
            <summary>
            IF EXISTS option of the DROP statement. This option will have effect only for databases that support the option.
            <para>Supported by: DB2, Firebird, Informix, MySql, Oracle, PostgreSQL, SQLite, SQL Server, Sybase ASE.</para>
            </summary>
        </member>
        <member name="F:LinqToDB.TableOptions.IsTemporary">
            <summary>
            Table is temporary (not visible to other sessions). This option will have effect only for databases that support temporary tables.
            If database supports both global and local temporary tables, local table will be used.
            <para>Supported by: DB2, Firebird, Informix, MySql, Oracle, PostgreSQL, SQLite, SQL Server, SAP Hana, Sybase ASE.</para>
            </summary>
        </member>
        <member name="F:LinqToDB.TableOptions.IsLocalTemporaryStructure">
            <summary>
            Table is temporary (table structure is not visible to other sessions). This option will have effect only for databases that support temporary tables.
            <para>Supported by: DB2, Informix, MySql, PostgreSQL, SQLite, SAP Hana, SQL Server, Sybase ASE.</para>
            </summary>
        </member>
        <member name="F:LinqToDB.TableOptions.IsGlobalTemporaryStructure">
            <summary>
            Table is global temporary (table structure is visible from other sessions). This option will have effect only for databases that support temporary tables.
            <para>Supported by: DB2, Firebird, Oracle, SAP Hana, SQL Server, Sybase ASE.</para>
            </summary>
        </member>
        <member name="F:LinqToDB.TableOptions.IsLocalTemporaryData">
            <summary>
            Table data is temporary (table data is not visible to other sessions). This option will have effect only for databases that support temporary tables.
            <para>Supported by: DB2, Informix, MySql, PostgreSQL, SQLite, SAP Hana, SQL Server, Sybase ASE.</para>
            </summary>
        </member>
        <member name="F:LinqToDB.TableOptions.IsGlobalTemporaryData">
            <summary>
            Table data is global temporary (table data is visible from other sessions). This option will have effect only for databases that support temporary tables.
            <para>Supported by: DB2, Firebird, Oracle, SAP Hana, SQL Server, Sybase ASE.</para>
            </summary>
        </member>
        <member name="F:LinqToDB.TableOptions.IsTransactionTemporaryData">
            <summary>
            Table data is temporary (table data is transaction level visible). This option will have effect only for databases that support temporary tables.
            <para>Supported by: Firebird, Oracle, PostgreSQL.</para>
            </summary>
        </member>
        <member name="T:LinqToDB.TakeHints">
            <summary>
            Hints for Take
            <see cref="M:LinqToDB.LinqExtensions.Take``1(System.Linq.IQueryable{``0},System.Int32,LinqToDB.TakeHints)"/>
            <see cref="M:LinqToDB.LinqExtensions.Take``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}},LinqToDB.TakeHints)"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.TakeHints.Percent">
            <summary>
            SELECT TOP 10 PERCENT.
            </summary>
        </member>
        <member name="F:LinqToDB.TakeHints.WithTies">
            <summary>
            SELECT TOP 10 WITH TIES.
            </summary>
        </member>
        <member name="T:LinqToDB.TempTable`1">
            <summary>
            Temporary table. Temporary table is a table, created when you create instance of this class and deleted when
            you dispose it. It uses regular tables even if underlying database supports temporary tables concept.
            </summary>
            <typeparam name="T">Table record mapping class.</typeparam>
        </member>
        <member name="F:LinqToDB.TempTable`1.TotalCopied">
            <summary>
            Gets total number of records, inserted into table using BulkCopy.
            </summary>
        </member>
        <member name="M:LinqToDB.TempTable`1.#ctor(LinqToDB.IDataContext,System.String,System.String,System.String,System.String,LinqToDB.TableOptions)">
            <summary>
            Creates new temporary table.
            </summary>
            <param name="db">Database connection instance.</param>
            <param name="tableName">Optional name of temporary table. If not specified, value from mapping will be used.</param>
            <param name="databaseName">Optional name of table's database. If not specified, value from mapping will be used.</param>
            <param name="schemaName">Optional name of table schema/owner. If not specified, value from mapping will be used.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Optional Table options. If not specified, value from mapping will be used.</param>
        </member>
        <member name="M:LinqToDB.TempTable`1.#ctor(LinqToDB.IDataContext,System.Collections.Generic.IEnumerable{`0},LinqToDB.Data.BulkCopyOptions,System.String,System.String,System.String,System.String,LinqToDB.TableOptions)">
            <summary>
            Creates new temporary table and populate it using BulkCopy.
            </summary>
            <param name="db">Database connection instance.</param>
            <param name="items">Initial records to insert into created table.</param>
            <param name="options">Optional BulkCopy options.</param>
            <param name="tableName">Optional name of temporary table. If not specified, value from mapping will be used.</param>
            <param name="databaseName">Optional name of table's database. If not specified, value from mapping will be used.</param>
            <param name="schemaName">Optional name of table schema/owner. If not specified, value from mapping will be used.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Optional Table options. If not specified, value from mapping will be used.</param>
        </member>
        <member name="M:LinqToDB.TempTable`1.#ctor(LinqToDB.IDataContext,System.String,System.Collections.Generic.IEnumerable{`0},LinqToDB.Data.BulkCopyOptions,System.String,System.String,System.String,LinqToDB.TableOptions)">
            <summary>
            Creates new temporary table and populate it using BulkCopy.
            </summary>
            <param name="db">Database connection instance.</param>
            <param name="tableName">Optional name of temporary table. If not specified, value from mapping will be used.</param>
            <param name="items">Initial records to insert into created table.</param>
            <param name="options">Optional BulkCopy options.</param>
            <param name="databaseName">Optional name of table's database. If not specified, value from mapping will be used.</param>
            <param name="schemaName">Optional name of table schema/owner. If not specified, value from mapping will be used.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Optional Table options. If not specified, value from mapping will be used.</param>
        </member>
        <member name="M:LinqToDB.TempTable`1.#ctor(LinqToDB.IDataContext,System.Linq.IQueryable{`0},System.String,System.String,System.String,System.Action{LinqToDB.ITable{`0}},System.String,LinqToDB.TableOptions)">
            <summary>
            Creates new temporary table and populate it using data from provided query.
            </summary>
            <param name="db">Database connection instance.</param>
            <param name="items">Query to get records to populate created table with initial data.</param>
            <param name="tableName">Optional name of temporary table. If not specified, value from mapping will be used.</param>
            <param name="databaseName">Optional name of table's database. If not specified, value from mapping will be used.</param>
            <param name="schemaName">Optional name of table schema/owner. If not specified, value from mapping will be used.</param>
            <param name="action">Optional action that will be executed after table creation but before it populated with data from <paramref name="items"/>.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Optional Table options. If not specified, value from mapping will be used.</param>
        </member>
        <member name="M:LinqToDB.TempTable`1.#ctor(LinqToDB.IDataContext,System.String,System.Linq.IQueryable{`0},System.String,System.String,System.Action{LinqToDB.ITable{`0}},System.String,LinqToDB.TableOptions)">
            <summary>
            Creates new temporary table and populate it using data from provided query.
            </summary>
            <param name="db">Database connection instance.</param>
            <param name="tableName">Optional name of temporary table. If not specified, value from mapping will be used.</param>
            <param name="items">Query to get records to populate created table with initial data.</param>
            <param name="databaseName">Optional name of table's database. If not specified, value from mapping will be used.</param>
            <param name="schemaName">Optional name of table schema/owner. If not specified, value from mapping will be used.</param>
            <param name="action">Optional action that will be executed after table creation but before it populated with data from <paramref name="items"/>.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Optional Table options. If not specified, value from mapping will be used.</param>
        </member>
        <member name="M:LinqToDB.TempTable`1.#ctor(LinqToDB.ITable{`0})">
            <summary>
            Configures a temporary table that will be dropped when this instance is disposed
            </summary>
            <param name="table">Table instance.</param>
        </member>
        <member name="M:LinqToDB.TempTable`1.CreateAsync(LinqToDB.IDataContext,System.String,System.String,System.String,System.String,LinqToDB.TableOptions,System.Threading.CancellationToken)">
            <summary>
            Creates new temporary table.
            </summary>
            <param name="db">Database connection instance.</param>
            <param name="tableName">Optional name of temporary table. If not specified, value from mapping will be used.</param>
            <param name="databaseName">Optional name of table's database. If not specified, value from mapping will be used.</param>
            <param name="schemaName">Optional name of table schema/owner. If not specified, value from mapping will be used.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Optional Table options. If not specified, value from mapping will be used.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
        </member>
        <member name="M:LinqToDB.TempTable`1.CreateAsync(LinqToDB.IDataContext,System.Collections.Generic.IEnumerable{`0},LinqToDB.Data.BulkCopyOptions,System.String,System.String,System.String,System.String,LinqToDB.TableOptions,System.Threading.CancellationToken)">
            <summary>
            Creates new temporary table and populate it using BulkCopy.
            </summary>
            <param name="db">Database connection instance.</param>
            <param name="items">Initial records to insert into created table.</param>
            <param name="options">Optional BulkCopy options.</param>
            <param name="tableName">Optional name of temporary table. If not specified, value from mapping will be used.</param>
            <param name="databaseName">Optional name of table's database. If not specified, value from mapping will be used.</param>
            <param name="schemaName">Optional name of table schema/owner. If not specified, value from mapping will be used.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Optional Table options. If not specified, value from mapping will be used.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
        </member>
        <member name="M:LinqToDB.TempTable`1.CreateAsync(LinqToDB.IDataContext,System.String,System.Collections.Generic.IEnumerable{`0},LinqToDB.Data.BulkCopyOptions,System.String,System.String,System.String,LinqToDB.TableOptions,System.Threading.CancellationToken)">
            <summary>
            Creates new temporary table and populate it using BulkCopy.
            </summary>
            <param name="db">Database connection instance.</param>
            <param name="tableName">Optional name of temporary table. If not specified, value from mapping will be used.</param>
            <param name="items">Initial records to insert into created table.</param>
            <param name="options">Optional BulkCopy options.</param>
            <param name="databaseName">Optional name of table's database. If not specified, value from mapping will be used.</param>
            <param name="schemaName">Optional name of table schema/owner. If not specified, value from mapping will be used.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Optional Table options. If not specified, value from mapping will be used.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
        </member>
        <member name="M:LinqToDB.TempTable`1.CreateAsync(LinqToDB.IDataContext,System.Linq.IQueryable{`0},System.String,System.String,System.String,System.Func{LinqToDB.ITable{`0},System.Threading.Tasks.Task},System.String,LinqToDB.TableOptions,System.Threading.CancellationToken)">
            <summary>
            Creates new temporary table and populate it using data from provided query.
            </summary>
            <param name="db">Database connection instance.</param>
            <param name="items">Query to get records to populate created table with initial data.</param>
            <param name="tableName">Optional name of temporary table. If not specified, value from mapping will be used.</param>
            <param name="databaseName">Optional name of table's database. If not specified, value from mapping will be used.</param>
            <param name="schemaName">Optional name of table schema/owner. If not specified, value from mapping will be used.</param>
            <param name="action">Optional asynchronous action that will be executed after table creation but before it populated with data from <paramref name="items"/>.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Optional Table options. If not specified, value from mapping will be used.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
        </member>
        <member name="M:LinqToDB.TempTable`1.CreateAsync(LinqToDB.IDataContext,System.String,System.Linq.IQueryable{`0},System.String,System.String,System.Func{LinqToDB.ITable{`0},System.Threading.Tasks.Task},System.String,LinqToDB.TableOptions,System.Threading.CancellationToken)">
            <summary>
            Creates new temporary table and populate it using data from provided query.
            </summary>
            <param name="db">Database connection instance.</param>
            <param name="tableName">Optional name of temporary table. If not specified, value from mapping will be used.</param>
            <param name="items">Query to get records to populate created table with initial data.</param>
            <param name="databaseName">Optional name of table's database. If not specified, value from mapping will be used.</param>
            <param name="schemaName">Optional name of table schema/owner. If not specified, value from mapping will be used.</param>
            <param name="action">Optional asynchronous action that will be executed after table creation but before it populated with data from <paramref name="items"/>.</param>
            <param name="serverName">Optional name of linked server. If not specified, value from mapping will be used.</param>
            <param name="tableOptions">Optional Table options. If not specified, value from mapping will be used.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
        </member>
        <member name="M:LinqToDB.TempTable`1.Copy(System.Collections.Generic.IEnumerable{`0},LinqToDB.Data.BulkCopyOptions)">
            <summary>
            Insert new records into table using BulkCopy.
            </summary>
            <param name="items">Records to insert into table.</param>
            <param name="options">Optional BulkCopy options.</param>
            <returns>Number of records, inserted into table.</returns>
        </member>
        <member name="M:LinqToDB.TempTable`1.CopyAsync(System.Collections.Generic.IEnumerable{`0},LinqToDB.Data.BulkCopyOptions,System.Threading.CancellationToken)">
            <summary>
            Insert new records into table using BulkCopy.
            </summary>
            <param name="items">Records to insert into table.</param>
            <param name="options">Optional BulkCopy options.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Number of records, inserted into table.</returns>
        </member>
        <member name="M:LinqToDB.TempTable`1.Insert(System.Linq.IQueryable{`0})">
            <summary>
            Insert data into table using records, returned by provided query.
            </summary>
            <param name="items">Query with records to insert into temporary table.</param>
            <returns>Number of records, inserted into table.</returns>
        </member>
        <member name="M:LinqToDB.TempTable`1.InsertAsync(System.Linq.IQueryable{`0},System.Threading.CancellationToken)">
            <summary>
            Insert data into table using records, returned by provided query.
            </summary>
            <param name="items">Query with records to insert into temporary table.</param>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Number of records, inserted into table.</returns>
        </member>
        <member name="P:LinqToDB.TempTable`1.DataContext">
            <summary>
            Gets data connection, associated with current table.
            </summary>
        </member>
        <member name="M:LinqToDB.Tools.DataExtensions.RetrieveIdentity``1(System.Collections.Generic.IEnumerable{``0},LinqToDB.Data.DataConnection,System.Boolean,System.Boolean)">
            <summary>
            Initializes source columns, marked with <see cref="P:LinqToDB.Mapping.ColumnAttribute.IsIdentity"/> or <see cref="T:LinqToDB.Mapping.IdentityAttribute" /> with identity values:
            <list type="bullet">
            <item>if column had sequence name set using <see cref="T:LinqToDB.Mapping.SequenceNameAttribute"/> and <paramref name="useSequenceName"/> set to <c>true</c>, values from sequence used. Implemented for: Oracle, PostgreSQL</item>
            <item>if table has identity configured and <paramref name="useIdentity"/> set to <c>true</c>, values from sequence used. Implemented for: SQL Server 2005+</item>
            <item>Otherwise column initialized with values, incremented by 1 starting with max value from database for this column plus 1.</item>
            </list>
            </summary>
            <typeparam name="T">Entity type.</typeparam>
            <param name="source">Ordered list of entities to initialize.</param>
            <param name="context">Data connection to use to retrieve sequence values of max used value for column.</param>
            <param name="useSequenceName">Enables identity values retrieval from sequence for columns with sequence name specified in mapping using <see cref="T:LinqToDB.Mapping.SequenceNameAttribute"/>. Implemented for Oracle and PostgreSQL.</param>
            <param name="useIdentity">Enables identity values retrieval from table with identity column. Implemented for SQL Server 2005+.</param>
            <returns>Returns new collection of identity fields initialized or <paramref name="source"/> if entity had no identity columns.</returns>
        </member>
    </members>
</doc>
